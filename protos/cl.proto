syntax = "proto2";

import "ret.proto";
import "common.proto";

package cl;

enum ID {
  MSG_NONE = 0;
  MSG_MIN = 10000;
  MSG_MAX = 30000;
  MSG_BEGIN = 11000;
  MSG_END = 20000;
}

//空占位结构
message PlaceHolder {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 param = 4; //空占位符可以不填
  optional RewardsResult result = 5; //数据变化
}

//公共消息体，空请求
message CS_EmptyReq {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
}

//公共消息体 只回复错误码
message SC_CommonRet {
  optional int32 sn = 1; //  消息序列id
  optional ret.RET code = 2; //  错误码
  optional RewardsResult result = 3; //数据变化
}

//公共错误消息
message SC_CommonError {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional int32 msgID = 3; // 之前请求的消息id
  optional RewardsResult result = 4; // 数据变化(这只为格式统一，不填充数据)
}

message CS_StringReq {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional string str = 4;
}

message SC_StringResp {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional int32 msgID = 3; // 之前请求的消息id
  optional RewardsResult result = 4; // 数据变化
  optional string str = 5;
}

//--------------------------------------------------------------------------------------------------通用回复数据

//角色属性改变
message PlayerProperty {
  optional common.PlayerPropertyType type = 1; //属性类型
  optional int64 value = 2 [jstype = JS_STRING]; //对应的当前数值
}

//英雄属性改变
message CommanderProperty {
  enum CommanderPropertyType {
    level = 1; //等级
    exp = 2; //当前等级的经验
    peerage = 3; //爵位 //Peerage
    awakenLevel = 4; //觉醒等级
    quality = 5; //品级
    starLevel = 6; //星级
    littleStarLevel = 7; //当前小星等级
    officialPosition = 8; //官职
    basePower = 9; //基础战斗力
    leadershipLevel = 10; //统率能力等级
    soldierId = 11; //统率的兵团
    totalPower = 12; //总战斗力
  }
  optional CommanderPropertyType type = 1; //属性类型
  optional int32 value = 2; //对应的当前数值
}

message CommandersProperty {
  optional int32 id = 1; //武将实例ID
  repeated CommanderProperty commanderChangedProperties = 2; //发生变化的背包武将属性
  repeated common.CommanderSkill skills = 3; //技能
  repeated common.CommanderEquip equips = 4; //装备
}

//奖励的数据
message RewardData {
  repeated PlayerProperty playerProperties = 1; //玩家属性更新
  repeated common.Item bagItems = 2; //修改的道具（为0则删除某个道具）
  repeated CommandersProperty commandersProperty = 3; //武将属性更新
  optional Mission missionChange = 4; //任务更新
  repeated common.Commander commanders = 5; //被召唤英雄
  optional Dungeon dungeon = 6; //副本
  repeated common.Counsellor counsellorChange = 7; // 军师战斗力变化数据
  optional Activity activity = 8; // 活动变化
  repeated common.Treasure treasures = 9; // 宝物数据
  repeated common.TreasureFate treasureFates = 10; // 宝物缘分数据
  optional World worldChange = 11; // 世界数据变化
  repeated common.Counsellor counsellors = 12; // 完整军师变化数据
  optional DailyRefresh dailyRefresh = 13; // 每日刷新
  optional Slay slay = 14; // 群雄割据变化值
  optional Task task = 15; // 日常
  optional common.PrivilegeData privilege = 16; // 特权
  optional common.HandBook handbook = 17; // 领主手册
  optional CheckinReplenish checkinReplenish = 18; // 签到补签次数
  optional StrMansion strMansion = 19; //计谋府
  repeated common.Formation formations = 20; // 阵型
  optional bool useLevelDraw = 21; // 是否等级首次抽卡过了
  repeated common.PokedexFmtPower pokedexFmtPowers = 22; //图鉴编组战斗力
  optional int32 unlock3Magic = 23; // 第三计谋开启
  optional int32 unlock4Magic = 24; // 第四计谋开启
  optional TreasureDraw treasureDraw = 25; // 宝物抽卡
  optional Drama drama = 26; // 剧本
  optional History history = 27; // 史记
  optional Recharge recharge = 28; // 充值数据
  optional int64 lastPhyscalRecoveryTime = 29 [jstype = JS_STRING]; // 上次体力回复时间
  optional Chibi chibi = 30; // 赤壁之战
  repeated common.UsedFunction usedFunction = 31; //使用过了某的功能
  optional common.Collect collect = 32; // 治所
}

//大奖励结构
message RewardsResult {
  optional RewardData rewardData = 1; //数据更新
  repeated common.Item rewardShow = 2; //奖励展示
  repeated ItemList itemLists = 3; // 多组物品展示
}

// 物品列表
message ItemList {
  repeated common.Item items = 1;
}

//unix时间戳 the number of seconds elapsed since January 1, 1970 UTC
message UnixTimeStamp {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int64 unixTimeStamp = 4 [jstype = JS_STRING];
  optional RewardsResult result = 5;
}

//-------------------------------------------------------------------------------------玩家

//请求玩家所有数据
message CS_UserData {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional bool total = 4; //是否是所有数据
}

//服务器信息
message ServerInfo {
  optional int32 timeZone = 1; //服务器时区
  optional int64 timeStamp = 2 [jstype = JS_STRING]; //服务器距离时区1970.1.1秒数
  optional int32 serverID = 3; //服务器id
  optional string serverName = 4; //服务器名字
  optional int64 openServerTime = 5 [jstype = JS_STRING]; //开服时间
}

//返回玩家所有数据
message SC_UserData {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2; //返回码
  optional RewardsResult result = 3; //数据变化
  optional User user = 4; //玩家数据
  optional ServerInfo serverInfo = 5; //服务器信息
}

//登陆返回的竞技场数据
message Arena {
  optional uint32 leftChallengeTimes = 3; //可用的竞技场挑战次数
  optional uint32 usedChallengeBuyTimes = 4; //使用过的竞技场挑战购买次数
  optional uint32 maxRank = 5; //个人的最大排名
  repeated int32 exchangeIds = 6; //已经兑换的奖励id
  optional uint32 selfRank = 7; //
  optional uint32 arenaDefencePower = 8; //竞技场战斗力
}

//登陆返回的巅峰竞技场数据
message Peak {
  optional int64 firstSeaonBeginTime = 3 [jstype = JS_STRING]; //第一个赛季开始时间
  optional int32 totalBattleTimes = 4; //赛季总战斗次数
  optional uint32 leftChallengeTimes = 5; //可用的挑战次数
  optional uint32 usedChallengeBuyTimes = 6; //使用过的挑战购买次数
  repeated int32 exchangeIds = 7; //已经兑换的奖励id
  optional uint32 score = 8; //本赛季天梯积分
  optional uint32 maxScore = 9; //本赛季最大天梯积分
  optional int32 hotCounsellor = 10; //热点军师
}

message GuildLoginInfo {
  optional uint64 guildId = 1 [jstype = JS_STRING]; //势力id
  optional string guildName = 2; //势力名字
  repeated common.PlayerGuildSkill skills = 3; //技能
  optional uint32 dayBuildTimes = 4; //今日构造次数
  repeated uint32 receivedActivityTag = 5; //已领取的活跃度奖励cl(数组的[1,2,3]之类)
  repeated common.GuildNotice notices = 6; //通知
  optional uint32 todayTotalActivity = 7; //总活跃度
  optional bool nextCrit = 8; //下次暴击
  repeated GuildBuilding buildings = 9; //建筑信息
  optional int64 lastGetSalaryTime = 10; // 上次领取每日俸禄的时间
  optional uint32 todayLeftPubExchangeBaseTimes = 11; //今日剩余发布次数
}

//玩家数据
message User {
  optional uint64 id = 1 [jstype = JS_STRING]; //id
  optional uint64 serverId = 2 [jstype = JS_STRING]; //服务器id
  optional string name = 3; //名字
  optional uint32 career = 4; //职业
  optional uint32 level = 5; //等级
  optional uint32 vipLevel = 6; //vip等级
  optional uint32 exp = 7; //经验
  optional uint32 diamond = 8; //钻石
  optional uint32 gold = 9; //金币
  optional uint32 physcal = 10; //体力值
  optional uint32 activity = 11; //活跃度
  optional uint32 commanderExpPool = 12; //武将经验池
  optional uint32 vipExp = 13; //vip经验
  optional uint32 skillExp = 14; //技能经验池
  optional int64 lastPhyscalRecoveryTime = 15 [jstype = JS_STRING]; //上次体力回复时间
  optional uint32 power = 16; //战斗力
  optional uint32 treasureCoin = 17; // 宝物精华
  optional uint32 dramaCoin = 18; //剧本货币
  optional uint32 goldenDragon = 22; //龙气
  optional uint32 physicalCollectNum = 23; //今日已收取好友体力数量
  optional uint32 arenaCoin = 24; //竞技币
  optional uint32 gameCoin = 25; //游戏币
  optional uint32 privilegeCoin = 26; //特权点
  optional uint32 guildContributionCoin = 27; //联盟贡献币
  optional string msg = 28; //宣言
  optional uint32 rolePaid = 29; //是否是付费用户int，1是，0否roleType角色类型
  optional uint32 serverType = 30; //服务器类型
  optional uint32 roleType = 31; //角色类型 1:正常 2:测试(不计入充值等统计) 3:GM/福利号 4：机器人 5：其它。
  optional int64 lastLogout = 32 [jstype = JS_STRING]; //上次登出时间
  optional uint32 peakCoin = 33; // 巅峰币
  optional uint32 treasureBaseCoin = 34; // 珍宝币
  optional uint32 treasureScore = 35; // 宝物积分

  optional int64 createTime = 40 [jstype = JS_STRING]; //创建时间
  optional uint32 renameTimes = 41; //重命名次数
  optional int32 avatar = 42; //头像
  optional int32 avatarFrame = 43; //头像框
  optional GuildLoginInfo guildLoginInfo = 44; //联盟初始数据
  repeated common.UsedFunction usedFunction = 45; //使用过的功能
  repeated common.Mail mails = 59; //玩家邮件 (客户端要求自己请求)
  repeated common.Item bagItems = 60; //背包
  repeated common.Counsellor counsellors = 61; //军师
  optional Mission mission = 62; //任务
  repeated int32 avatars = 63; //所有头像
  repeated int32 avatarFrames = 64; //所有头像框
  optional CheckinInfo checkin = 65; //签到
  repeated common.Commander commanders = 66; //英雄
  repeated common.Formation formations = 67; //阵型数据（只放一个pve阵型）
  repeated common.Soldier soldiers = 68; //军团数据的包装
  optional common.ShopDailyRecord shopDailyRecord = 69; //每日购买记录
  optional Dungeon dungeon = 70; //副本
  optional SoldierTechs soldierTechs = 71; //士兵科技
  optional World world = 72; //世界数据
  optional TreasureDraw treasureDraw = 73; // 宝物抽卡
  optional Arena arena = 77; //竞技场数据
  optional common.DailyBoss dailyBoss = 79; //日常Boss
  optional common.StrMansion strMansion = 80; //计谋府
  optional Peak peak = 81; //巅峰竞技场
  optional SlayBaseData slay = 82; //群雄割据基础数据
  optional Task task = 85; //日常
  optional common.DailyExp dailyExp = 86; //日常经验
  optional common.DailyCoin dailyCoin = 87; //日常金币
  optional Recharge recharge = 88; //充值数据
  optional common.Announce announce = 89; // 公告

  optional bool musicSwitch = 90; //音乐
  optional bool soundcSwitch = 91; //音效
  optional bool pushSwitch = 92; //推送
  optional int32 guide = 93; //新手引导id
  repeated int32 hideVipSystems = 94; //隐藏Vip标记的功能
  optional common.PeakStateData peakStateData = 95; // 巅峰竞技场数据
  optional bool useLevelDraw = 96; // 是否等级首次抽卡过了
  optional Drama drama = 97; // 剧本
  optional History history = 98; // 史记
  optional Chibi chibi = 99; // 赤壁之战

  optional DailyRefresh dailyRefresh = 100; //每日刷新
  optional Activity activities = 101; //活动
  repeated common.QuestionnaireInfo qInfos = 102; // web
  optional common.Collect collect = 103; // 治所
  repeated string guideTrigger = 104;

  optional common.HandBook handbook = 110; //功能手册
  optional common.PrivilegeData privilege = 111; //特权数据
  optional common.Pokedex pokedex = 112; //图鉴数据
  optional Treasure treasure = 113; //宝物数据
  optional int32 unlock3Magic = 114; // 第三计谋开启(1 待播放 2 已播放）
  optional int32 unlock4Magic = 115; // 第四计谋开启
}

// 每天刷新的数据
message DailyRefresh {
  optional uint32 normalDrawFreeTimes = 1; // 主将普通抽卡免费已抽次数
  optional uint32 diamondDrawFreeTimes = 2; // 主将钻石抽卡免费已抽次数
  optional uint32 diamondDrawHalfPriceTimes = 3; // 主将钻石半价抽卡已抽次数
  optional uint32 diamondDrawTimes = 4; // 今日钻石抽卡次数（不包含免费次数）
}

// 每天零刷新的数据
message DailyZeroRefresh {
  optional int32 hotCounsellor = 1; //热点军师
}

// 兵营科技数据
message SoldierTechs {
  repeated common.SoldierTech techs = 1; // 兵营科技
  repeated SoldierTechData data = 2; // 兵营科技战斗力
  repeated int32 rewardIds = 3; // 已领取奖励
}

// 兵营科技数据
message SoldierTechData {
  optional int32 id = 1; // 配置ID
  optional uint32 power = 2; // 战斗力
}

// 宝物抽卡
message TreasureDraw {
  optional uint32 totalDrawCount = 1; // 总共抽卡次数
  optional uint32 todayBuyItemCount = 2; // 今日宝物抽卡购买道具次数
  optional uint32 todayFreeDrawCount = 3; // 今日免费已抽次数
  optional uint32 showTimes = 5; // 展示次数
}

//请求多个玩家简单数据
message C_PlayerSimpleData {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  repeated uint64 ids = 4 [jstype = JS_STRING]; //请求人id
}

//多个玩家简单数据
message S_PlayerSimpleData {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2; //返回码
  repeated common.PlayerSimpleData datas = 3; //返回数据
  optional RewardsResult result = 4;
}

//请求单个玩家简单数据——自己指定阵型
//req C_PlayerSimpleData
//rsp S_PlayerSimpleData
message C_PlayerSimpleDataEx {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional uint64 id = 4 [jstype = JS_STRING]; //请求人id
  optional common.FormationType formationId = 5; //阵型类型
}
message S_PlayerSimpleDataEx {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2; //返回码
  optional RewardsResult result = 3;
  optional common.PlayerSimpleDataEx data = 4; //返回数据
}

//请求单个玩家简单数据——自己指定阵型
//req C_PlayerSimpleData
//rsp S_PlayerSimpleData
message C_PlayerTargetData {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional uint64 id = 4 [jstype = JS_STRING]; //请求人id
  optional common.FormationType formationId = 5; //阵型类型
}
//玩家详细数据数据
message PlayerTargetData {
  optional uint64 id = 1 [jstype = JS_STRING]; //id
  optional string name = 2; //数量
  optional uint64 serverId = 3 [jstype = JS_STRING]; //服务器id
  optional uint32 level = 4; //等级
  optional uint32 career = 5; //职业
  optional int32 avatar = 6; //头像
  optional int32 avatarFrame = 7; //头像框
  optional string msg = 8; //宣言
  optional uint32 vip = 9; //VIP
  optional uint32 power = 10; //战斗力
  optional int64 lastLogout = 11 [jstype = JS_STRING]; //上一次登出时间
  optional uint64 guildId = 12 [jstype = JS_STRING]; //势力id
  optional string guildName = 13; //势力名字
  optional int32 counsellorId = 14; //军师
  optional int64 lastLogin = 15 [jstype = JS_STRING]; //上一次登陆时间
  optional uint32 arenaRank = 16; //竞技场排名的显示数据（真实的在竞技场管理器里）
  optional uint32 arenaDefencePower = 17; //竞技场Pve阵型的战斗力
  optional uint32 praise = 18; //点赞
  optional bool hasPraise = 19; //今日是否点赞

  repeated common.Commander commanders = 20; //上阵武将
  optional common.Formation formation = 21; //阵型数据
  repeated common.Counsellor counsellors = 22; // 军师数据
  repeated common.StrTalent strTalents = 23; // 计谋府
  repeated common.Treasure treasures = 24; //宝物数据
  optional common.TreasureFatesInfo treasureFates = 25; //宝物缘分数据
  optional common.PokedexBattleInfo pokedexInfo = 26; //图鉴数据
  repeated common.SoldierTech soldierTech = 27; // 兵营科技
  optional uint32 peakRank = 28; //巅峰竞技场排名
  repeated int32 hideVipSystems = 29; //需要隐藏Vip标识的功能
  optional common.Collect collect = 30; // 治所
}
message S_PlayerTargetData {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2; //返回码
  optional RewardsResult result = 3;
  optional PlayerTargetData data = 4; //返回数据
}

//同步玩家数据
message S_SyncPlayerData {
  repeated PlayerProperty DataList = 1; // 玩家数据
}

//玩家状态数据
message SC_PlayerGameStateData {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional common.PeakStateData peakStateData = 4; // 巅峰竞技场数据
}

//点赞
//req CS_Praise
//rsp SC_Praise
message CS_Praise {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional uint64 uid = 4 [jstype = JS_STRING]; //玩家id
}
message SC_Praise {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3; //数据变化
  optional uint32 count = 4; //
}

//获取点赞
//req CS_Praise
//rsp SC_Praise
message CS_GetPraise {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
}
message SC_GetPraise {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3; //数据变化
  optional uint32 count = 4; //
}

//设置guideTrigger
//req CS_GuideTrigger
//rsp SC_CommonRet
message CS_GuideTrigger {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional string guideTrigger = 4;
}

// 使用功能
message CS_UseFunction {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional common.UsedFunction usedFunction = 4;
}

//设置宣言
//req CS_SetDeclaration
//rsp SC_CommonRet
message CS_SetDeclaration {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional string declaration = 4; //宣言
}

message SC_DailyRefresh {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3; //数据变化
  optional DailyRefresh dailyRefresh = 4; // 每日数据
}

message SC_DailyZeroRefresh {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3; //数据变化
  optional DailyZeroRefresh dailyRefresh = 4; // 每日数据
}

message SC_PeakState {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2; //错误码
  optional RewardsResult result = 3; //数据变化
  optional common.PeakStateData peakStateData = 4; // 巅峰竞技场数据
}

//-------------------------------------------------------------------------------------背包

// 背包数据
message SC_BagData {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3; //数据变化
  repeated common.Item items = 4;
}

// 使用物品
message CS_UseItem {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 itemId = 4;
  optional uint32 itemCount = 5;
  repeated uint32 selectIndexes = 6; //玩家选择物品索引(从1开始)
}

// 使用物品结果
message SC_UseItem {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
}

// 分解物品
message CS_DecomposeItem {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 itemId = 4;
  optional uint32 itemCount = 5;
}

// 使用物品结果
message SC_DecomposeItem {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
}

//请求缓存
//CS_PushCache SC_PushCache
message CS_PushCache {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 puSn = 4; //
}
message SC_PushCache {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional User user = 4; //
}

//-------------------------------------------------------------------------------------邮件
//客户端发送给服务器的邮件id
message CS_MailId {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional uint64 mailId = 4 [jstype = JS_STRING];
}
//返回给客户端加载的邮件列表
message SC_LoadMails {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3; //数据变化
  repeated common.Mail mails = 4;
}
//阅读邮件
message SC_ReadMail {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3; //数据变化
  optional common.Mail mail = 4;
}

//一键领取
//req CS_FastGetMailsAttachment
//rsp SC_FastGetMailsAttachment
message CS_FastGetMailsAttachment {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  repeated uint64 mailIds = 4 [jstype = JS_STRING];

}
//获取多个附件
message SC_FastGetMailsAttachment {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional uint32 count = 4; //受影响的邮件数
  repeated uint64 deletes = 5 [jstype = JS_STRING]; //哪些邮件被删除了
}

//一键删除
//req CS_FastDeleteMails
//rsp SC_FastDeleteMails
message CS_FastDeleteMails {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  repeated uint64 mailIds = 4 [jstype = JS_STRING];
}
message SC_FastDeleteMails {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional uint32 count = 4; //受影响的邮件数
  repeated uint64 deletes = 6 [jstype = JS_STRING]; //哪些邮件被删除了
}

message S_NotifyNewMail {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional uint32 newCount = 4; //新邮件增加个数( 暂时保留，永远都是1，没必要存在)
  repeated common.MailCondition mailConditions = 5; //邮件条件（主要来自gm）
}

//-------------------------------------------------------------------------------------签到

// 补签数据
message CheckinReplenish {
  optional uint32 actTimes = 1; // 活跃度获得的补签次数
  optional uint32 payTimes = 2; // 充值获得的补签次数
}

// 签到数据
message CheckinInfo {
  optional uint32 days = 1; // 签到总天数
  repeated uint32 takedAward = 2; // 领取过的奖励
  optional CheckinReplenish replenish = 3; // 可补签次数
  optional uint32 todaySignIndex = 4; // 今天是本月第几次签到（补签为这个次数+1）
  repeated uint32 vipReward = 5; // 签到和补签的领奖次数(0，未签到 1，领取的是单倍 2，领取双倍了)
  optional uint32 usedReplenishNum = 6; // 本月已经消耗补签次数
}

// 签到返回结果
message SC_CheckinRet {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3; //数据变化
  optional CheckinInfo info = 5;
}

// 补签结果
message SC_ReplenishRet {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3; //数据变化
  optional CheckinInfo info = 4;
}

// 签到数据消息
message SC_CheckinInfos {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3; //数据变化
  optional CheckinInfo info = 4;
}

// 领取签到次数奖励
message CS_CheckinCountAward {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional uint32 count = 4; // 第几次奖励（从1开始）
}

// 领取签到次数奖励结果
message SC_CheckinAwardRet {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3; //数据变化
}

// 双倍签到奖励
message CS_SigninDouble {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional uint32 day = 4; //第几天的双倍
}
message SC_SigninDouble {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3; //数据变化
  optional CheckinInfo info = 4;
}

//-------------------------------------------------------------------------------------好友

// 请求好友数据
message C_RequestFriendData {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  required common.FriendType friendType = 4;
}

message S_RequestFriendData {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2; //错误码
  optional RewardsResult result = 3; //数据变化
  optional common.FriendType friendType = 4;
  repeated common.FriendCommonData datas = 5;
}

// 添加好友
message C_AddFriend {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  repeated uint64 uids = 4 [jstype = JS_STRING];
}

message S_AddFriend {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2; //错误码
  optional RewardsResult result = 3; //数据变化
  repeated uint64 successUids = 4 [jstype = JS_STRING]; //添加成功uids
}

// 添加黑名单
message C_AddBlack {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  required uint64 uid = 4 [jstype = JS_STRING];
}

message S_AddBlack {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2; //错误码
  optional RewardsResult result = 3; //数据变化
  optional common.FriendCommonData data = 4;
}

// 删除好友
message C_DeleteFriend {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  repeated uint64 uids = 4 [jstype = JS_STRING];
}

message S_DeleteFriend {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2; //错误码
  optional RewardsResult result = 3; //数据变化
}

// 删除黑名单
message CS_DeleteBlack {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  required uint64 uid = 4 [jstype = JS_STRING];
}

message SC_DeleteBlack {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2; //错误码
  optional RewardsResult result = 3; //数据变化
}

// 确认好友申请
message C_ConfirmFriendRequest {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  repeated uint64 uids = 4 [jstype = JS_STRING];
}

message S_ConfirmFriendRequest {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2; //错误码
  optional RewardsResult result = 3; //数据变化
  repeated uint64 successUids = 4 [jstype = JS_STRING]; //确认成功uids
}

// 拒绝好友申请
message CS_RefuseFriendRequest {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  repeated uint64 uids = 4 [jstype = JS_STRING];
}

message SC_RefuseFriendRequest {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2; //错误码
  optional RewardsResult result = 3; //数据变化
}

// 赠送体力
message C_GivePhysical {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  repeated uint64 uids = 4 [jstype = JS_STRING];
}

message S_GivePhysical {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2; //错误码
  optional RewardsResult result = 3; //数据变化
}

// 领取体力
message CS_CollectPhysical {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  repeated uint64 uids = 4 [jstype = JS_STRING];
}

message SC_CollectPhysical {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2; //错误码
  optional RewardsResult result = 3; //数据变化
  repeated uint64 successUids = 4 [jstype = JS_STRING]; //领取成功uids
  optional uint32 collectNum = 5; //今日已收取好友赠送体力数量
}

// 查找玩家
message C_SearchPlayer {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional string name = 4;
  optional uint64 id = 5 [jstype = JS_STRING];
  optional int32 startIndex = 6; //查询开始索引 按名字模糊搜索的时候使用
}

message S_SearchPlayer {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2; //错误码
  optional RewardsResult result = 3; //数据变化
  repeated common.FriendCommonData searchResult = 4;
}

message S_NotifyFriendCollectPhysical {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2; //错误码
  optional RewardsResult result = 3; //数据变化
  optional uint64 uid = 4 [jstype = JS_STRING];
}

message S_NotifyFriendRequest {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2; //错误码
  optional RewardsResult result = 3; //数据变化
  optional common.FriendCommonData data = 4;
}

message S_NotifyNewFriend {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2; //错误码
  optional RewardsResult result = 3; //数据变化
  optional common.FriendCommonData data = 4;
}

message S_NotifyDeleteFriend {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2; //错误码
  optional RewardsResult result = 3; //数据变化
  optional uint64 uid = 4 [jstype = JS_STRING];
}

//--------------------------------------------------------------------------------------------------武将
enum CommanderOp {
  None = 0; //非通用操作
  Levelup = 1; //升级 opTimes 决定次数
  LittleStarLevelup = 2; //小星升级
  BigStarLevelup = 3; //大星升级
  LeadershipUp = 4; //领导能力升级  opTimes 决定次数
}

//操作的武将ID
message CS_CommanderId {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 commanderId = 4; //被操作的英雄id
  optional CommanderOp commanderOp = 5; //操作类型g
  optional uint32 opTimes = 6; //操作的次数
}

//武将品质升级
//回复 SC_CommonRet
message CS_CommanderQualityUp {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 commanderId = 4; //被操作的英雄id
}

//武将改变兵团
//回复 SC_CommonRet
message CS_CommanderSoldiersChange {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 commanderId = 4; //武将id
  optional int32 soldierId = 5; //兵团id
}

//武将装备
//回复 SC_CommonRet
message CS_CommanderEquipmentUpgrade {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 commanderId = 4; //被操作的英雄id
  optional uint32 equipmentSlotId = 5; //被操作的插槽
}

//武将装备
//回复 SC_CommonRet
message CS_CommanderFastEquipmentUpgrade {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 commanderId = 4; //被操作的英雄id
}

//武将技能解锁
//回复 SC_CommonRet
message CS_CommanderSkillSlotUnlock {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 commanderId = 4; //被操作的英雄id
  optional uint32 skillSlotId = 5; //装备槽的id
}
//武将技能升级
//回复 SC_CommonRet
message CS_CommanderSkillSlotLevelUp {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 commanderId = 4; //被操作的英雄id
  optional uint32 skillSlotId = 5; //装备槽的id
  repeated common.Item useItems = 6; //使用道具
}

//召唤武将
message CS_CallCommander {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 commanderId = 4; //被操作的英雄id
}
message SC_CallCommander {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2; //错误码
  optional RewardsResult result = 3; //数据变化
}

//--------------------------------------------------------------------------------------------------阵型
//阵型获取
message CS_FormationGet {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  repeated common.FormationType formationId = 4;
}
message SC_FormationGet {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3; //数据变化
  repeated common.Formation formation = 4;
}

//阵型保存
message CS_FormationSave {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  repeated common.Formation formation = 4;
  optional int32 battleInfoId = 5;
}
message SC_FormationSave {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  repeated common.Formation formation = 3;
  optional RewardsResult result = 4; //数据变化
}

//--------------------------------------------------------------------------------------------------聊天

// 聊天消息
message CS_ChatMessage {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional common.ChatChannel channel = 4; // 频道
  optional common.ChatCell msg = 5; // 消息
  optional uint64 recvId = 6 [jstype = JS_STRING]; // 接收者id(私聊用)
}

// 广播的聊天信息
message S_ChatMessage {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 返回结果
  optional RewardsResult result = 3; // 物品变化
  optional common.ChatChannel channel = 4; // 频道
  optional ChatMsg msg = 5; // 消息
}

// 聊天发送者信息
message ChatSender {
  optional uint64 id = 1 [jstype = JS_STRING]; // 发送者id
  optional string name = 2; // 发送者名字
  optional uint32 level = 3; // 发送者等级
  optional int32 avatar = 4; // 发送者头像
  optional int32 avatarFrame = 5; // 发送者头像框
  optional uint32 vipLevel = 6; // vip
  optional uint32 fightPower = 7; // 战斗力
  optional bool hideVip = 8; // true 隐藏vip
}

message ChatMsg {
  optional ChatSender sender = 1; // 发送者
  optional common.ChatCell msg = 2; // 消息
  optional ChatSender recver = 3; // 接收者(只在接收自己发送的私聊消息时用)
}

// 私聊消息
message PrivateMsg {
  optional ChatSender oppositePlayer = 1; // 聊天对象数据
  repeated common.ChatCell msg = 2; // 数据
  optional int64 readTime = 3 [jstype = JS_STRING]; // 读消息时间
}
message SC_ChatMessage {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  repeated PrivateMsg privateMsg = 4; // 按时间从老到新排序
  repeated cl.ChatMsg worldMsg = 5; // 世界消息
  repeated cl.ChatMsg unionMsg = 6; // 帮派消息
  repeated cl.ChatMsg systemMsg = 7; // 系统消息
  optional int64 readWorldMsgTime = 8 [jstype = JS_STRING]; // 读世界消息时间
  optional int64 readSysMsgTime = 9 [jstype = JS_STRING]; //  读系统消息时间
  optional int64 readUnionMsgTime = 10 [jstype = JS_STRING]; // 读帮派消息时间
}

message CS_ReadMessage {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional common.ChatChannel channel = 4; // 聊天频道
  optional uint64 targetID = 5 [jstype = JS_STRING]; // 私聊对方的消息
}

// 用户id
message CS_UserID {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional uint64 userID = 4 [jstype = JS_STRING]; // 用户id
}

message CS_ReadAnnounce {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional uint64 announceId = 4 [jstype = JS_STRING]; // 用户id
}

message S_ChangeAnnounce {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  repeated common.AnnounceMessage announce = 4; // 
  repeated uint64 deleteIds = 5 [jstype = JS_STRING]; // 删除公告id
}

message CS_ShareBattle {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional uint64 battleId = 4 [jstype = JS_STRING]; // 战斗唯一id
  optional int32 battleType = 5; // 战斗类型（见下面注释）

  // KBattleTypeMission int32 = 1 //任务
  // KBattleTypeDungeon int32 = 2 //副本
  // KBattleTypePeak      int32 = 35 //巅峰竞技场
  // KBattleTypeDailyBoss int32 = 36 //日常Boss
  // KBattleTypeSlay      int32 = 37 //群雄割据
  // KBattleTypeTrain     int32 = 41 //训练关卡
  // KBattleTypeSelfTrain int32 = 42 //训练关卡自己
  // KBattleTypeDailyExp  int32 = 43 //日常经验
  // KBattleTypeDailyCoin int32 = 44 //日常金币
  // KBattleTypeDrama     int32 = 46 //剧本
  // KBattleTypeArena     int32 = 50 //竞技场
}
//--------------------------------------------------------------------------------------------------排行榜

// 请求排行榜信息
message C_RankList {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional common.RankType rankType = 4;
  optional uint32 beginRank = 5; // 排行榜初始名次
}

// 返回给客户端信息
message S_RankList {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3; // 物品变化
  optional RankPlayer myRankPlayer = 4;
  repeated RankPlayer ranks = 5;
  optional uint32 totalRankNum = 6; // 总上榜人数

  optional TopPlayer topPlayer = 10; // 排行榜第一
  optional uint32 keepFirstDays = 11; // 霸榜天数
}

// 请求排行榜第一名信息
message C_RankTopPlayerInfo {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional common.RankType rankType = 4;
}

message S_RankTopPlayerInfo {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3; // 物品变化
  optional TopPlayer player = 4;
  optional uint32 keepFirstDays = 5; // 霸榜天数
}

message C_RankDetailInfo {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional uint64 id = 4 [jstype = JS_STRING]; // 唯一id
  optional common.RankType rankType = 5;
  optional int32 commanderId = 6; // 主将
  optional int32 counsellorId = 7; // 军师
}

message S_RankDetailInfo {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3; // 物品变化

  repeated common.Counsellor counsellors = 5; // 军师数据
  repeated common.StrTalent strTalents = 6; // 计谋府
  repeated common.Treasure treasures = 7; //宝物数据
  optional common.TreasureFatesInfo treasureFates = 8; //宝物缘分数据
  optional common.PokedexBattleInfo pokedexInfo = 9; //图鉴数据
  repeated common.SoldierTech soldierTech = 10; // 兵营科技
  optional common.Collect collect = 11; // 治所

  optional common.Commander commander = 15; // 主将
}

message TopPlayer {
  optional string name = 1; // 玩家名字
  optional uint32 power = 2; // 玩家战斗力
  optional int32 counsellorId = 3; // 军师id
  optional string guildName = 4; // 军师名字
}

message RankPlayer {
  optional uint64 id = 1 [jstype = JS_STRING];
  optional string name = 2;
  optional int32 avatar = 3;
  optional int32 avatarFrame = 4;
  optional uint32 level = 5;
  optional string guildName = 6;

  optional uint32 rank = 7;
  optional uint32 score = 8;

  optional int32 counsellorId = 9; // 军师id
  optional uint32 counsellorStar = 10; // 军师星级

  optional common.Commander commander = 11; // 主将
  optional int32 maxInstanceId = 12; // 最大副本

  optional int32 maxPowerTreasureID = 15; // 最大战斗力宝物id

  optional int32 dailyBossBestLevel = 16; // 日常Boss最高难度
  optional uint32 dailyBossBestTime = 17; // 日常Boss最佳用时

  repeated uint64 chibiReplayIds = 18 [jstype = JS_STRING]; // 赤壁之战 战斗回放id

  optional uint32 oldRank = 20; // 之前的排名
}

//--------------------------------------------------------------------------------------------------军师
// 军师id
message CS_CounsellorID {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 id = 4; // 军师ID
}

// 军师解锁返回结果
message SC_CounsellorUnlock {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3; // 物品变化
}

// 军师升星返回结果
message SC_CounsellorUpgradeStar {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional ret.RET code = 4;
  optional RewardsResult result = 5; // 物品变化
}

// 军师升专长等级返回结果
message SC_CounsellorUpgradeStarLevel {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional ret.RET code = 4;
  optional RewardsResult result = 5; // 物品变化
}

// 军师升级魔法
message CS_CounsellorUpgradeMagic {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 id = 4; // 军师ID
  optional int32 magicID = 5; // 法术ID
  optional uint32 count = 6; // 次数（1，10）
}

// 军师升魔法等级
message SC_CounsellorUpgradeMagic {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3; // 物品变化
  optional int32 addType = 4; // 1，正常; 2, 二倍暴击; 3, 直升
}

message CS_CounsellorQiMen {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 id = 4; // 军师ID
  optional int32 qiMenId = 5; // ID
}

message CS_CounsellorQiJi {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 id = 4; // 军师ID
}

//--------------------------------------------------------------------------------------------------玩家系统
//请求修改玩家名字
//SC_NewName
message CS_NewName {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional string name = 4;
}
message SC_NewName {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional string name = 4;
  optional uint32 renameTimes = 5; //重命名次数
}

//换头像的avatarId
//返回SC_ChangeAvatar
message CS_ChangeAvatar {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 avatar = 4;
}
message SC_ChangeAvatar {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3; //数据变化
  optional int32 avatar = 4; //回传
}

//换头像框的avatarFrameId
//返回SC_ChangeAvatarFrame
message CS_ChangeAvatarFrame {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 avatarFrame = 4;
}
message SC_ChangeAvatarFrame {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3; //数据变化
  optional int32 avatarFrame = 4; //回传
}

//开关
//返回SC_ChangeSwitch
message CS_ChangeSwitch {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional common.SwitchID switchID = 4; //类型
  optional bool switchTo = 5; //开关 非0为真，0为假
}
message SC_ChangeSwitch {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3; //数据变化
  optional common.SwitchID switchID = 4; //类型 回传
  optional bool switchTo = 5; //开关 回传 非0为真，0为假
}

//--------------------------------------------------------------------------------------------------战斗
//校验战斗，测试用
message CS_ValidateBattle {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional string type = 4; //类型
  optional string data = 5; //json
}

//校验战斗结果，测试用
message SC_ValidateBattle {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional string ret = 3; //json
  optional RewardsResult result = 4;
}

//请求战斗replay
message CS_BattleReplay {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional uint64 battleId = 4 [jstype = JS_STRING]; //战斗id
}
message SC_BattleReplay {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional common.BattleReplay battleReplay = 4;
}

//--------------------------------------------------------------------------------------------------购买相关

//请求交易
message CS_Exchange {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional common.ShopType shopType = 4; //购买类型
  optional uint32 num = 5; //购买次数或数量 (num=0 免费)
}

message SC_Exchange {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional uint32 crit = 4; //暴击值
}

message CS_MarketInfo {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  repeated int32 marketIds = 4; // 市场表id
}
//市场信息
message SC_MarketInfo {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  repeated common.ItemMarket market = 4;
}

message CS_RefreshMarket {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 marketId = 4; // 市场表id
}

//商店购买
message CS_MarketBuy {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 marketId = 4; //商店type
  optional int32 gridId = 5; //商品id
}

message SC_MarketBuy {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
}

// 任务
message Mission {
  optional common.MissionUnit mainMission = 1; // 主线任务
  repeated common.MissionUnit taleMission = 2; // 天下任务
  repeated common.MissionUnit branchMission = 3; // 支线任务
  repeated int32 finishMissions = 4; // 完成任务
  repeated common.MissionChapter mainChapter = 6; // 主线章节奖励
  repeated common.MissionTargetChapter targetChapter = 7; // 目标奖励
  optional int32 exploratory = 8; // 当前探索度
  optional int32 exploratoryRewardId = 9; // 已领取探索度奖励进度（未领过为0，领取了为最后一次领取的表格id）
}

// 世界数据
message World {
  repeated common.Fortress fortress = 1; // 据点
  repeated int32 nationList = 2; // 势力列表
  repeated common.District district = 3; // 州信息
  repeated common.WorldMap worldMap = 4; //
}

message SC_WorldData {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional World world = 4; //世界数据
}

// 任务id
message CS_MissionFight {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 missionID = 4; // 任务ID
  optional int32 fightID = 5; // 战斗ID
}

// 进入任务战斗
message CS_MissionEnterFight {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 missionID = 4; // 任务ID
  optional int32 fightID = 5; // 战斗ID
  optional string ver = 200; // 客户端战斗脚本
}
message SC_MissionEnterFight {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional common.BattleStartInfo battleInfo = 4; //战斗开始数据
}

// 结束任务战斗
message CS_MissionEndFight {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 missionID = 4; // 任务ID
  optional int32 fightID = 5; // 战斗ID
  optional common.BattleResultInfo battleResult = 6; // 战斗数据
}

// 任务战斗结果
message SC_MissionBattleResult {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional int32 star = 4; //星
  optional bool win = 5; //是否胜利
  repeated common.Item missionReward = 6; // 任务奖励
}

message SC_BattleResult {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional int32 star = 4; //星
  optional bool win = 5; //是否胜利
}

// 完成任务
message CS_Mission {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 missionID = 4; //任务id
}

// 完成任务
message CS_FinishMission {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 missionID = 4; //任务id
}

// 打开宝箱
message CS_Fortress {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 fortressID = 4; // 据点ID
  optional uint32 param = 5; // 1、据点类型为选择奖励时为索引(1,2,3...)
}

// 领取任务章节奖励
message CS_MissionChapter {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 chapterId = 4; // worldMissionChapter表id
  optional int32 index = 5; // 索引，从1开始
}
message SC_MissionChapter {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
}
// 领取探索任务章节奖励
message CS_ExploreMissionChapter {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 targetId = 4; // 目标id
}

message CS_EventMissionChapter {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 targetId = 4; // 目标id
}
message CS_TargetMissionChapter {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 targetId = 4; // 目标id
}

// 史记
message History {
  repeated HistoryChapter historyChapters = 1; // 史记章节
}

message HistoryChapter {
  optional int32 chapterID = 1; // 章节id
  repeated int32 finishMissions = 2; // 已完成的史记任务
  repeated int32 unlockMissions = 3; // 已解锁的史记任务
  repeated int32 takenAwardIds = 4; // 已领取的史记章节奖励
}

// 领取史记奖励
message CS_HistoryTakeAwards {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 historyId = 4;
  optional int32 awardIdx = 5;
}

// 解锁史记任务
message CS_HistoryUnlockMission {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 historyMissionId = 4;
}

// 副本数据
message Dungeon {
  repeated common.DungeonLevel levels = 1; //副本数据
  repeated common.DungeonChapter chapters = 2; //关卡章节
}

message CS_Instance {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 instanceId = 4; // 关卡ID
}

// 进入关卡
message CS_EnterDungeon {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 dungeonID = 4; // 关卡ID
  optional string ver = 200; // 战斗脚本版本
}
message SC_EnterDungeon {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional common.BattleStartInfo battleInfo = 4; //战斗开始数据
}

// 结束关卡
message CS_EndDungeon {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 dungeonID = 4; // 关卡ID
  optional common.BattleResultInfo battleResult = 5; // 战斗数据
}

// 扫荡
message CS_SweepDungeon {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 dungeonID = 4; // 副本ID
  optional uint32 count = 5; // 次数
  optional int32 obtainItemId = 6; // 要获得的物品id
  optional uint32 obtainItemCount = 7; // 要获得的总物品数量
}

// 扫荡
message CS_SweepSpecialty {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 specialtyId = 4; // specialty表id
  optional uint32 count = 5; // 次数
  optional int32 obtainItemId = 6; // 要获得的物品id
  optional uint32 obtainItemCount = 7; // 要获得的总物品数量
}

message SC_SweepResult {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional int32 stopReason = 4; // 0 正常；1 体力不足；2 扫荡物品够了
}

// 章节奖励
message CS_DungeonChapterReward {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 chapterID = 4; // 章节表ID
  optional uint32 rewardIndex = 5; // 奖励索引(从1开始)
}

message CS_ConnectReward {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 chapterId = 4; // 章节表ID
  optional int32 stageId = 5; // 关卡ID
}

message CS_Train {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 trainId = 4; // 表id
}

// 训练信息
message CS_TrainRecord {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
}
message SC_TrainRecord {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  repeated common.TrainItem items = 4; // 训练记录
}

message SC_TrainReplay {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  repeated common.ReplaySimple replays = 4; // 录像回放
}

// 请求布阵信息
message CS_TrainFormation {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 id = 4; // 训练场ID
}
message SC_TrainFormation {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional int32 id = 4; // 训练场ID
  optional common.Formation formation = 5; // 自己阵型
}
// 布阵信息
message TrainFormation {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 id = 4; // 训练场ID
  optional common.Formation formation = 5; // 自己阵型
  optional string ver = 200; // 客户端战斗脚本
}

// 进战斗返回
message SC_EnterTrainFight {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional common.BattleStartInfo battleInfo = 4; //战斗开始数据
}

// 训练战斗结构
message C_TrainFight {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 id = 4; // id
  optional common.BattleResultInfo battleResult = 5; // 战斗数据
}

message S_TrainBattle {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional int32 star = 4; //星
  optional bool win = 5; //是否胜利
  optional common.ReplaySimple replay = 6; // 回放
}

//--------------------------------------------------------------------------------------------------guild

//guild玩家的简单信息
message GuildPlayer {
  optional uint64 uid = 1 [jstype = JS_STRING];
  optional common.PlayerHeadPortrait icon = 2;
  optional uint32 power = 3; //战斗力
  optional int64 lastLogout = 4 [jstype = JS_STRING]; //下线时间 //-1表示当前在线
  optional int32 counsellorId = 5; //军师id
  optional uint32 counsellorStar = 6; //军师star
  optional int32 officialType = 7; // 官职类型
  optional uint64 dayContribution = 8 [jstype = JS_STRING]; //今日贡献
  optional uint64 totalContribution = 10 [jstype = JS_STRING]; //总贡献
  repeated int32 hideVipSystems = 11; //需要隐藏Vip标识的功能
  optional int32 showCommanderId = 12; //要展示的武将
}

//联盟商品
message GuildGoods{
  optional uint64 uid = 1; //商品id
  optional int32 tid = 2; //商品模板id
  optional common.PlayerHeadPortrait owner = 3; //拥有者
  optional int32 priceShift = 4;//价格变动
  optional int64 time = 5; //上架时间
  optional bool hasSold = 6; //已售出（需要卖方领取才消息）
}

message GuildBuilding {
  optional int32 buildId = 1; //hall()
  optional uint32 lv = 2;
  optional uint32 exp = 3;
}

message Guild {
  optional uint64 guildId = 1 [jstype = JS_STRING]; //id
  optional string name = 2; //名字
  optional int64 createTime = 3 [jstype = JS_STRING]; //创建时间
  optional string declaration = 4; //宣言
  optional string word = 5; //文字
  optional int32 badge = 6; //徽章
  optional int32 flagSide = 7; //旗边
  optional int32 color = 8; //颜色

  optional uint64 presidentId = 10 [jstype = JS_STRING]; //会长id
  optional common.PlayerHeadPortrait presidentIcon = 11; //会长头像
  optional uint32 presidentPower = 12; //会长战斗力

  //  optional uint32 level = 20; //等级 在联盟建筑里
  //  optional uint32 exp = 21; //经验 在联盟建筑里
  optional uint32 membersCount = 22; //成员数
  optional bool confirm = 23; //是否需要审核
  optional uint32 levelLimit = 24; //招募等级
  optional uint64 totalPower = 25 [jstype = JS_STRING]; //总战斗力

  repeated GuildPlayer members = 26; //成员
  optional uint32 rank = 27; //排名
  optional uint64 qq = 28 [jstype = JS_STRING]; //qq号/微信号
  optional uint32 leftNoticeTimes = 29; //剩余通知次数
  optional common.GuildAnnouncement Announcement = 30; //公告

  repeated GuildBuilding buildings = 32; //建筑信息
  optional uint32 todayTotalBuildPeopleCount = 33; //今日建造人数
  optional uint32 todayTotalActivity = 34; //今日活跃度
  repeated uint64 requests = 35; //未处理的申请（团长和副团长才需要处理）
}

message SimpleGuild {
  optional uint64 guildId = 1 [jstype = JS_STRING]; //id
  optional string name = 2; //名字
  optional string declaration = 3; //宣言
  optional string word = 4; //文字
  optional int32 badge = 5; //徽章
  optional int32 flagSide = 6; //旗边
  optional int32 color = 7; //颜色

  optional uint64 presidentId = 10 [jstype = JS_STRING]; //会长id
  optional common.PlayerHeadPortrait presidentIcon = 11; //会长头像
  optional uint32 presidentPower = 12; //会长战斗力

  optional uint32 level = 20; //等级
  optional uint32 exp = 21; //经验
  optional uint32 membersCount = 22; //成员数
  optional bool confirm = 23; //是否需要审核
  optional uint32 levelLimit = 24; //招募等级
  optional uint64 totalPower = 25 [jstype = JS_STRING]; //总战斗力
  optional bool hasRequest = 26; //是否申请过
  optional uint32 rank = 27; //排名
}

//拉取guild推荐列表
message CS_GetRecommendGuildList {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional uint32 page = 4; //页面
}
message SC_SimpleGuildList {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional uint32 page = 4; //页面
  repeated SimpleGuild guildList = 5;
}

//拉取guild推荐列表
//req SC_SimpleGuildList
message CS_SerachGuild {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional string str = 4; //搜索字符串
}

//创建guild
message CS_CreateGuild {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional string guildName = 4; //guild名字
  optional string declaration = 5; //宣言
  optional string word = 6; //文字
  optional int32 badge = 7; //徽章
  optional int32 flagSide = 8; //旗边
  optional int32 color = 9; //颜色
}
message SC_CreateGuild {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional Guild guild = 4;
}

//请求加入guild
//req
//rsp SC_CommonRet
message CS_RequestJoinGuild {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional uint64 guildId = 4 [jstype = JS_STRING]; //guildId
}

//取消加入guild
//req
//rsp SC_CommonRet
message CS_CancelJoinGuildRequest {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional uint64 guildId = 4 [jstype = JS_STRING]; //guildId
}

//处理加入请求guild
//req
//rsp
message CS_DealRequestJoinGuild {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional uint64 uid = 4 [jstype = JS_STRING]; //uid
  optional bool agree = 5; //是否同意加入
}

//一键同意
//req CS_EmptyRq
//rsp
message SC_FastAgreeJoinGuild {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional ret.RET extCode = 4; //部分正确，部分错误（已满 RET_GUILD_MEMBERS_FULL）
  repeated RequestGuildRequestPlayer successList = 5;//成功列表
}

//踢人
//req
//rsp SC_CommonRet
message CS_KickMember {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional uint64 uid = 4 [jstype = JS_STRING]; //uid
}

//通知离开联盟
//push S_MemberLeave
message S_MemberLeave {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional uint64 uid = 4 [jstype = JS_STRING]; //uid
  optional bool activity = 5; //是否主动离开
}


//进入Guild
//req CS_EmptyReq
//rsp
message SC_EnterGuild {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional Guild guild = 4;
  optional bool guildOfficialPositionChange = 5; //是否有职位变化（变化后只通知一次）
}

//获取guild信息
//req
//rsp
message CS_GuildInfo {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
}
message SC_GuildInfo {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional Guild guild = 4;
}

//设置guild信息
//req
//rsp SC_CommonRet
message CS_SetGuildInfo {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional string word = 4; //文字
  optional int32 badge = 5; //徽章
  optional int32 flagSide = 6; //旗边
  optional int32 color = 7; //颜色
}

//请求进入
//req CS_EmptyReq
//rsp
message RequestGuildRequestPlayer {
  optional uint64 uid = 1 [jstype = JS_STRING]; //id
  optional common.PlayerHeadPortrait icon = 2; //头像
  optional uint32 vipLevel = 3; //vip
  optional uint32 power = 4; //战斗力
  repeated int32 hideVipSystems = 5; //需要隐藏Vip标识的功能
  optional int32 showCommanderId = 6; //要展示的武将
  optional int64 reqTime = 7; //请求时间
}

//申请列表
//req CS_EmptyReq
//rsp
message SC_RequestGuildRequestList {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  repeated RequestGuildRequestPlayer players = 4;
}


//申请状态
enum JoinRequestState{
  reqJoin = 1; //发起者请求加入
  cancelJoin = 2; //发起者取消加入
  agreeJoin = 3; //管理员同意加入
  refuseJoin = 4; //管理员拒绝加入
}

//通知申请状态
message S_NotifyJoinRequest {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional uint64 uid = 4;
  optional JoinRequestState joinRequestState = 5; //状态
}

//修改名字
//req
//rsp
message CS_NewGuildName {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional string name = 4; //文字
}
message SC_NewGuildName {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional string name = 4;
}

//日志
//req CS_EmptyReq
//rsp
message SC_GuildLog {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  repeated common.GuildLog logs = 4;
}

//公告
//req
//rsp
message CS_PublishGuildAnnouncement {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional string title = 4; //标题
  optional string content = 5; //内容
  optional bool needNotice = 6; //是否通知
}
message SC_PublishGuildAnnouncement {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional uint32 leftNoticeTimes = 4;
}
//通知
//req
//rsp
message CS_PublishGuildNotice {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional string title = 4; //标题
  optional string content = 5; //内容
}
message SC_PublishGuildNotice {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional uint32 leftNoticeTimes = 4;
}

//notify
message S_PublishGuildNotice {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional common.GuildNotice notice = 4;
}

//获取通知
//req
//rsp
message CS_GetGuildNotice {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int64 noticeId = 4 [jstype = JS_STRING]; //公告id
}
message SC_GetGuildNotice {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional common.GuildNotice notices = 4;
}

//获取招募设置
//req CS_EmptyReq
//rsp
message SC_GuildRecruit {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional bool confirm = 4; //是否需要确认
  optional uint32 levelLimit = 5; //等级限制
  optional string declaration = 6; //宣言
}

//设置招募设置
//req
//rsp SC_CommonRet
message CS_GuildRecruit {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional bool confirm = 4; //是否需要确认
  optional uint32 levelLimit = 5; //等级限制
  optional string declaration = 6; //宣言
}

// 设置官职
message CS_GuildSetOfficial {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional uint64 targetId = 4 [jstype = JS_STRING];
  optional int32 officialType = 5; // 官职类型
}

//通知新人加入
//notify
message S_NotifyOtherJoinGuild {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional GuildPlayer player = 4; //
}

//建设
//CS_GuildBuildBuilding SC_GuildBuildBuilding
message CS_GuildBuildBuilding {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 buildID = 4; //建筑物的id
  optional int32 costType = 5; //建筑花费的类型
}
message SC_GuildBuildBuilding {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional int32 buildID = 4; //建筑物的id
  optional int32 costType = 5; //建筑花费的类型
  optional uint32 level = 6; //这个建筑物的等级
  optional uint32 exp = 7; //这个建筑物的经验
  optional uint32 dayBuildTimes = 8; //建筑次数
  optional uint32 todayTotalBuildPeopleCount = 9; //今日建造人数
  optional uint32 todayTotalActivity = 10; //今日总活跃度
  optional bool nextCrit = 11; //下次暴击
}

//通知建设
message S_NotifyGuildBuild {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional int32 buildID = 4; //建筑物的id
  optional uint32 level = 5; //这个建筑物的等级
  optional uint32 exp = 6; //这个建筑物的经验
  optional uint32 todayTotalBuildPeopleCount = 7; //今日建造人数
  optional uint32 todayTotalActivity = 8; //今日总活跃度
}

//联盟技能
//req
//rsp
message CS_BuildGuildSkill {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 slotId = 4; //不是技能的id，是插槽的id
  optional uint32 times = 5; //升级次数
}
message SC_BuildGuildSkill {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional uint32 level = 4; //技能等级 //升级之后的技能等级
  //  optional uint32 dayExp = 5; //当日经验
}

//拉取guild 排行榜
message CS_GetGuildRankList {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional uint32 page = 4; //页面
}

//弹劾
//CS_EmptyReq SC_CommonRet

//通知弹劾
message S_Impeach {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional GuildPlayer new = 4;
}

//QQ
//CS_ChangeQQ SC_CommonRet
message CS_ChangeQQ {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional uint64 qq = 4;
}

//获取活跃度宝箱
//CS_GetGuildActivityReward  SC_CommonRet
message CS_GetGuildActivityReward {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional uint32 activityTag = 4; //具体的多少的活跃度礼包
}

//日报
//CS_EmptyReq SC_GuildDailyPaper
message SC_GuildDailyPaper {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  repeated common.GuildLog logs = 4; //最近3条日志
  repeated common.GuildHonorPlayer yesterdayGuildHonorPlayer = 5; //昨日荣誉榜（玩家可能已经在联盟）

}

//商品列表(全部商品，个人商品)
//CS_EmptyReq SC_GuildGoods
message SC_GuildGoods {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  repeated GuildGoods goods = 4; //商品列表
}

//发布物品
//CS_PubGuildGoods SC_PubGuildGoods
message CS_PubGuildGoods {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 itemId = 4; //道具id
  optional int32 priceShift = 5; //价格波动
}
message SC_PubGuildGoods {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional GuildGoods item = 4;
}

//重新发布物品
//CS_RePubGuildGoods SC_RePubGuildGoods
message CS_RePubGuildGoods {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional uint64 itemUid = 4; //唯一id
  optional int32 priceShift = 5; //价格波动
}
message SC_RePubGuildGoods {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional GuildGoods item = 4;
}

//下架物品
//CS_TakeOffGuildGoods SC_CommonRet
message CS_TakeOffGuildGoods {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional uint64 itemUid = 4; //唯一id
}

//买物品
//CS_BuyGuildGoods SC_CommonRet
message CS_BuyGuildGoods {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional uint64 itemUid = 4; //唯一id
}


//领取物品
//CS_GetSoldGuildGoods SC_CommonRet
message CS_GetSoldGuildGoods {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional uint64 itemUid = 4; //唯一id
}
//--------------------------------------------------------------------------------------------------宝物

message Treasure {
  repeated common.Treasure treasures = 1; //宝物
  repeated common.TreasureFate treasureFates = 2; //宝物缘分
  optional common.FateSkillGroup fateSkillGroup = 3; //宝物缘分技能编组
}

//宝物打造
message CS_TreasureBuild {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 treasureId = 4;
}

message SC_TreasureBuild {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
}

//宝物进阶
message CS_TreasureAdvance {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 treasureId = 4;
}

message SC_TreasureAdvance {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
}

//宝物缘分技能升级
message CS_TreasureFateUpgrade {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 treasureFateId = 4;
}

message SC_TreasureFateUpgrade {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
}

//宝物觉醒
message CS_TreasureAwake {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 treasureId = 4;
}

message SC_TreasureAwake {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
}

//宝物研究
message CS_TreasureResearch {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 treasureId = 4;
}

message SC_TreasureResearch {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  repeated int32 randParts = 4; //随机部件
}

//宝物精炼
message CS_TreasureRefine {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 treasureId = 4;
}

message SC_TreasureRefine {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
}

//宝物图纸分解
message CS_TreasureMapDecompose {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  repeated common.Item items = 4;
}

message SC_TreasureMapDecompose {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
}

//宝物缘分技能编组解锁
message CS_UnLockFateSkillGroup {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 id = 4;
}

message SC_UnLockFateSkillGroup {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
}

//宝物缘分技能编组使用
message CS_ChangeFateSkillGroup {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 id = 4;
}

message SC_ChangeFateSkillGroup {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional common.FateSkillGroup groupData = 4; //编组数据
}

//宝物缘分技能编组保存
message CS_FateSkillGroupSave {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional common.FateSkillGroup groupData = 4;
}

message SC_FateSkillGroupSave {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
}

message SC_GetFateSkillGroupInfo {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  repeated common.FateSkillGroup groupDatas = 4;
}

//--------------------------------------------------------------------------------------soldier
// 解锁士兵
message CS_UnlockSoldier {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 soldierId = 4; //士兵id
}
message SC_UnlockSoldier {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional common.Soldier soldier = 4; //士兵
}

// 升级兵营科技
message CS_SoldierTech {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 techId = 4; // soliderTech表id
}

message SC_SoldierTech {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional SoldierTechs tech = 4;
}

// 兵营科技领奖
message CS_SoldierTechReward {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 id = 4; // soliderAward表id
}
message SC_SoldierTechReward {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional int32 id = 4;
}

//--------------------------------------------------------------------------------------arena
//
message ArenaChallengePlayer {
  optional uint64 uid = 1 [jstype = JS_STRING]; //uid
  optional string name = 2;
  optional uint32 rank = 3;
  optional common.Counsellor counsellor = 4;
  optional string msg = 5; //宣言
  optional uint32 arenaDefencePower = 6;
}

//进入竞技场
//req PlaceHolder
//rsp
message SC_EnterArena {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  repeated ArenaChallengePlayer arenaChallengeList = 4;
  optional Arena arena = 5; //竞技场数据
}

//清除cd
//req PlaceHolder
//rsp SC_CommonRet

//获取挑战列表/换一批
//req PlaceHolder
//rsp
message SC_ArenaChallengeList {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  repeated ArenaChallengePlayer arenaChallengeList = 4;
  optional int32 selfRank = 5; //
}

//扫荡
// req CS_SweepArena
// rsp SC_SweepArena
message CS_SweepArena {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional uint64 tagetUid = 4 [jstype = JS_STRING]; //挑战的目标uid
}
message SC_SweepArena {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional uint32 leftChallengeTimes = 4; //
  repeated common.Item allReward = 5; //  所有的奖励展示 第一个为给玩家的奖励
  optional common.Item fixedReward = 6; // 固定奖励
}

//兑换
//req CS_ExchangeIdx
//rsp SC_ExchangeIdx
message CS_ExchangeIdx {
  optional int32 sn = 1;
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 exchangeIdx = 4;
}
message SC_ExchangeIdx {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional int32 exchangeIdx = 4;
}

//排行
message ArenaRankPlayerInfo {
  optional uint64 uid = 1 [jstype = JS_STRING]; //uid
  optional string name = 2;
  optional uint32 level = 3;
  optional uint32 power = 4;
  optional uint32 rank = 5;
  optional string guildName = 6;
  optional int32 avatar = 7; //头像
  optional int32 avatarFrame = 8; //头像框
  optional int32 counsellorId = 9; //
  optional uint32 oldRank = 10;
}
//req PlaceHolder
//rsp
message CS_ArenaRank {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional uint32 pageIdx = 4; // 要第几页数据
}
message SC_ArenaRank {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  repeated ArenaRankPlayerInfo rankList = 4;
  optional uint32 topDays = 5; //第一名霸榜天数
  optional TopPlayer topPlayer = 6; // 排行榜第一
}

//req PlaceHolder
//rsp
message SC_ArenaBattleLog {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  repeated common.ArenaBattleLog arenaBattleLogs = 4;
}

//开始战斗
//req CS_BeginArenaBattle
//rsp SC_BeginArenaBattle
message CS_BeginArenaBattle {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional uint64 tagetUid = 4 [jstype = JS_STRING]; // 目标id
  optional uint32 tagetRank = 5; // 目标排名
  optional string ver = 200; // 客户端脚本版本
}
message SC_BeginArenaBattle {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional uint32 leftChallengeTimes = 4; // 进入战斗时候就扣次数
  optional common.BattleStartInfo battleStartInfo = 5; // 战斗开始数据
}

//战斗结果->胜利验证->同时回传需要翻牌的数据
//req
//rsp
message CS_ArenaBattleResult {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional common.BattleResultInfo battleResultInfo = 4; //  战斗结束数据
}

message SC_ArenaBattleResult {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional uint64 winUid = 4 [jstype = JS_STRING]; // 胜利者
  repeated common.Item allReward = 5; // 所有的奖励展示 第一个为给玩家的奖励
  optional common.Item fixedReward = 6; // 固定奖励
  optional uint32 maxRank = 7; // 最大排名
  optional uint32 beforeRank = 8; // 战前排名
  optional uint32 afterRank = 9; // 战后排名
  optional common.Item careerReward = 10; // 职业生涯历史最高奖励，只显示，通过邮件发送
  optional bool win = 11; // 胜利
  optional uint32 leftChallengeTimes = 12; // 进入战斗时候就扣次数
}

//购买竞技场挑战次数
//req PlaceHolder
//rsp
message SC_BuyArenaChallengeTimes {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional uint32 leftChallengeTimes = 4; // 剩余使用次数
  optional uint32 usedChallengeBuyTimes = 5; // 使用过的竞技场挑战购买次数
}

//进入实时PVP战斗
message SC_EnterPVP {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional uint64 battleID = 10 [jstype = JS_STRING]; // 战斗ID
  optional string address = 11; // 服务器地址
  optional string secret = 12; // 身份标识
  optional common.BattleStartInfo info = 20; // 战斗信息
}

// ----------------------------------------- 抽卡 -----------------------------------------

// 抽卡类型
enum DrawType {
  Normal = 1; // 普通抽卡
  Diamond = 2; // 钻石抽卡
}

message CS_DrawCard {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional DrawType drawType = 4; // 抽卡类型
  optional int32 count = 5; // 次数（1，10）
}

message CS_DrawTreasure {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 count = 4; // 次数（1，5）
  optional bool isHot = 5; // true为热点抽卡
}

message CS_DrawBuyItem {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional uint32 count = 4; // 次数
  optional bool halfPrice = 5; // 半价购买
}

message CS_TreasureDrawBuyItem {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional uint32 count = 4; // 次数
}

//-------------------------------------------------------------------------------------活动
message Activity {
  repeated ActivityOpen open = 1;

  repeated ActivityCommon common = 3; // 常规活动
  repeated uint32 levelGift = 4; // 升级有礼
  optional TotalLogin totalLogin = 5; //累计登录
  optional GoldenDragon goldenDragon = 6; // 嘉年华
  optional DailyPhysical dailyPhysical = 7; // 每日体力
}

message ActivityOpen {
  optional int32 activityId = 1;
  optional uint32 area = 2;
  optional uint32 acType = 3;
  optional int64 startTime = 4 [jstype = JS_STRING];
  optional int64 endTime = 5 [jstype = JS_STRING];
  optional int64 appearTime = 6 [jstype = JS_STRING];
  optional int64 disappearTime = 7 [jstype = JS_STRING];
  optional uint32 levelLimit = 8;
  optional uint32 vipLimit = 9;
}

// 常规活动
message ActivityCommon {
  optional int32 activityId = 1;
  repeated ActivityTask tasks = 2;
}

message ActivityTask {
  optional int32 id = 1;
  optional int32 finish = 2; // 已领奖次数（未领为0）
  optional uint32 progress = 3;
  repeated common.Item rewards = 4; // 如果不为空覆盖客户端奖励
  optional uint32 finishProgress = 5;
}

// 嘉年华
message GoldenDragon {
  optional int32 activityId = 1;
  repeated ActivityTask tasks = 2; // 任务
  repeated int32 rewardIds = 3; // 已领取奖励
  optional uint32 cloudNum = 4; // 金云的数量
}

message CS_ActivityReward {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 activityId = 4; // 活动id
  optional int32 taskId = 5; // 任务id
  repeated uint32 indexes = 6; // 奖励索引
}

message CS_ActivityId {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  repeated int32 activityIds = 4; // 活动id
}

message SC_Activity {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional Activity act = 4; // 通用活动信息
}

message SC_ActivityId {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  repeated int32 activityIds = 4; // 活动id
}

//-------------------------------------------------------------------------------------累计登录

message TotalLogin {
  optional uint32 loginDays = 1; //累计登录天数
  repeated int32 takeRewards = 2; //领奖记录（领取了哪天的奖励）
}

message CS_TotalLoginTakeReward {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 day = 4;
  repeated uint32 selectIndexes = 5; // 选择哪几个奖励
}

// 等级奖励
message CS_LevelGift {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional uint32 level = 4; // 等级
  repeated uint32 selectIndexes = 5; // 选择奖励
}

// 领取嘉年华龙气奖励
message CS_GoldenDragonFinalReward {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 id = 4; // 表格id
}

//-------------------------------------------------------------------------------------日常
message Task {
  optional int32 growScore = 1; // 成长积分
  optional int32 activeScore = 2; // 活跃积分
  repeated common.TaskCell growTask = 3; // 生涯任务
  repeated common.TaskCell dailyTask = 4; // 日常任务
  repeated int32 finishGrowTask = 5; // 已完成任务（生涯有用）
  repeated int32 finishDailyTask = 6; // 已完成任务（日常有用）
  optional int32 growReward = 7; // 当前领取的生涯奖励进度
  optional int32 weekScore = 9; // 周活跃积分
  repeated int32 weekRewardIds = 10; // 已领取周奖励id
  repeated int32 dailyReward = 11; // 领取过的每日奖励

  repeated common.TaskCell worldTask = 15; // 大世界任务
  repeated int32 finishWorldTask = 16; // 已完成任务（生涯有用）
  repeated common.MissionTargetChapter targetChapter = 17; // 大世界目标奖励
}

message CS_Task {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 taskId = 4;
}

message CS_DailyReward {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 rewardId = 4; // 配置索引
}

message CS_TaskWeekReward {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 rewardId = 4; // 配置索引
}

//-------------------------------------------------------------------------------------群雄割据

// 基础数据
message SlayBaseData {
  optional int32 leftResetTimes = 1; // 剩余重置次数
  optional int32 level = 2; // 难度等级
  optional int32 credit = 3; // 声望
  optional int32 round = 4; // 回合
  optional bool over = 5; // true结束
}

// 征兵、升级兵数量变化
message SlayCityCallArmy {
  optional int32 cityId = 1;
  optional int32 callArmyCount = 2; // 征兵数量
  optional int32 levelUpArmyCount = 3; // 升级数量
}

message SlayAction {
  optional int32 actionType = 1; // 1,攻击 2,征兵 3,结束
  optional common.SlayAttack attack = 2; // 需要执行的进攻
  repeated SlayCityCallArmy callArmyCities = 3; // 征兵城池
  optional int32 powerId = 5; // 势力
}

message Slay {
  optional SlayBaseData baseData = 1;
  repeated common.SlayCity cities = 5; // 城池
  repeated common.SlayPower powers = 6; // 势力
  optional SlayAction action = 7; // 行为
  repeated common.SlayPlayerCommander playerCommanders = 9; // 玩家武将数据
  repeated common.SlaySilkBuy selectBags = 10; // 随机选一个锦囊
  optional common.SilkBag silkBag = 11; // 锦囊
  optional common.SlayEvent event = 12; // 世界事件
  repeated int32 usedFormation = 13; // 已经行动的布阵
}

// 返回客户端群雄割据消息
message SC_ReqSlayInfo {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional Slay slay = 4;
}

// 返回客户端群雄割据基础数据
message SC_ReqSlayBaseData {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional SlayBaseData baseData = 4; // 基础数据
}

message CS_HealCommander {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 commanderId = 4; // 武将id
}

message SC_FightReport {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  repeated common.SlayRoundReport fightReport = 4; // 战报
}

message CS_SlayBeginFight {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 cityId = 4; // 城池id
  optional bool playerAttack = 5; // true 玩家进攻 false 玩家防守
  optional int32 silkItemId = 6; // 锦囊物品id
  optional common.FormationType formationType = 7; // 布阵类型
  optional string ver = 200; // 客户端战斗脚本
}
message SC_SlayBeginFight {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional common.BattleStartInfo battleInfo = 4; //战斗开始数据
}

message CS_SlayEndFight {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional common.BattleResultInfo battleResult = 4; // 战斗数据
  optional bool playerAttack = 5; // true 玩家进攻 false 玩家防守
}

message CS_SelectSlayBag {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional uint32 index = 4; // 索引（1，2，3）, 0为什么都不选
}

message CS_UseSlayBagItem {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 slayBagItemId = 4; // 锦囊id
  optional int32 cityId = 5; // 城池1
  optional int32 city2Id = 6; // 城池2
  optional int32 playerCommanderId = 7; // 复活玩家主将id
}

message CS_SlaySelectEvent {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 eventIndex = 4; // 事件索引(1,2,3)
}

message CS_SlayCity {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 cityId = 4; // 城池id
}

message SC_SlayCityFormation {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化

  optional common.Formation formation = 4;
  repeated common.SlayCommander slayCommanders = 5;
  optional common.Counsellor counsellor = 6; // 军师
  optional uint32 power = 7; // 战斗力
}

//-------------------------------------------------------------------------------------日常boss

// 难度解锁
message CS_DailyBossUnlockLevel {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 bossID = 4; // BossID
  optional int32 diffLevel = 5; // 解锁等级
}

// 进入Boss战斗
message CS_DailyBossEnterBattle {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 bossID = 4; // BossID
  optional int32 diffLevel = 5; // 难度等级
  optional int32 battleInfoID = 6; // 战斗ID
  optional string ver = 200; //客户端脚本版本
}

message SC_DailyBossEnterBattle {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional common.BattleStartInfo battleInfo = 4; // 战斗开始数据
}

// 结束Boss战斗
message CS_DailyBossEndBattle {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 bossID = 4; // BossID
  optional int32 diffLevel = 5; // 难度等级
  optional common.BattleResultInfo battleResult = 6; // 战斗结果数据
}

message SC_DailyBossBattleResult {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional bool win = 4; // 是否胜利
  optional uint32 totalTime = 5; // 战斗时间
  optional uint32 bossLossHpPercent = 6; // Boss失血百分比
}

//领取首杀奖励
message CS_TakeDailyBossFirstKillAward {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 bossID = 4; // BossID
  optional int32 takeLevel = 5; // 领取等级
}

message SC_TakeDailyBossFirstKillAward {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
}

//-------------------------------------------------------------------------------------日常经验

//领取今日累计击杀奖励
message CS_DailyExpTakeDayKillAward {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 awardId = 4; // -1  一键领取
}

message SC_DailyExpTakeDayKillAward {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional common.DailyExp dailyExpData = 4;
}

//扫荡
message SC_DailyExpSweep {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional common.DailyExp dailyExpData = 4;
}

message CS_DailyExpEnterBattle {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional string ver = 200; //客户端脚本版本
}

message SC_DailyExpEnterBattle {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional common.BattleStartInfo battleStartInfo = 4;
  optional string ver = 200; //客户端脚本版本
}

//结束战斗
message C_DailyExpEndBattle {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional common.BattleResultInfo battleResult = 4;
}

message S_DailyExpEndBattle {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional common.DailyExp dailyExpData = 4;
  optional bool win = 5;
  optional common.BattleDailyExp battleDailyExp = 6;
}

//-------------------------------------------------------------------------------------日常金币

//领取今日累计击杀奖励
message CS_DailyCoinTakeDayKillAward {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 awardId = 4; // -1  一键领取
}

message SC_DailyCoinTakeDayKillAward {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional common.DailyCoin dailyCoinData = 4;
}

//扫荡
message SC_DailyCoinSweep {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional common.DailyCoin dailyCoinData = 4;
}

message CS_DailyCoinEnterBattle {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional string ver = 200; //客户端脚本版本
}

message SC_DailyCoinEnterBattle {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional common.BattleStartInfo battleStartInfo = 4;
}

//结束战斗
message C_DailyCoinEndBattle {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional common.BattleResultInfo battleResult = 4;
}

message S_DailyCoinEndBattle {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional common.DailyCoin dailyCoinData = 4;
  optional bool win = 5;
  optional common.BattleDailyCoin battleDailyCoin = 6;
}

//-------------------------------------------------------------------------------------计谋府

message StrMansion {
  repeated common.StrTalent talents = 1;
  optional uint32 power = 2; // 太学战斗力
}

//天赋升级
message CS_StrTalentLevelUp {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 talentID = 4; // TalentID
}

message SC_StrTalentLevelUp {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
}

//天赋页重置
message CS_StrTalentTabReset {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional common.StrMansionTabType tabType = 4; // 页签类型
}

message SC_StrTalentTabReset {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
}

//---------------------------------巅峰竞技场
//req PlaceHolder
//rsp
message SC_EnterPeak {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2; //错误码
  optional RewardsResult result = 3; //数据变化
  optional int64 versionID = 4 [jstype = JS_STRING]; //版本
  optional int64 seasonEndTime = 5 [jstype = JS_STRING]; //赛季结束时间
  optional int64 versionName = 6 [jstype = JS_STRING]; //版本名字
  repeated int32 hotCommander = 7; //热点武将
  optional int32 hotCounsellor = 8; //热点军师
  optional uint32 lastAccumulatePeakCoin = 9; //之前累计的积分
  optional int64 nowAccumulatePeakCoinBeginTime = 10 [jstype = JS_STRING]; //本轮累计开始的时间
  optional int32 totalBattleWinTimes = 11; //赛季总胜利次数
  optional bool seasonFirstEnter = 12; //是否赛季第一次进入
  optional int32 selfRank = 13; //我的排名
  repeated common.Counsellor counsellors = 14; //军师列表（某些情况用于覆盖背包的军师）
}

//开始匹配
//req CS_StartMathching
//rsp SC_StartMathching
message CS_StartMathching {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional string client_battle_version = 4;
}
message SC_StartMathching {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2; //错误码
  optional RewardsResult result = 3; //数据变化
  optional uint32 power = 4; // 战斗力
}

//notify
message SC_NotifyMatchResult {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2; //错误码
  optional RewardsResult result = 3; //数据变化
  optional int32 totalBattleTimes = 4; //赛季总战斗次数
  optional uint32 leftChallengeTimes = 5; //进入战斗时候就扣次数
  optional int64 mathTime = 6 [jstype = JS_STRING]; //匹配完成的时间
  repeated common.PeakMatchPlayer peakMatchPlayer = 7; //匹配到的数据
}

//ready
//req
//rsp
message CS_Ready {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional bool ready = 4; //true准备，false取消准备
}
message SC_Ready {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional bool ready = 4; //回传的状态
}

//notify 准备
message SC_NotifyReady {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional uint64 uid = 4 [jstype = JS_STRING]; //目标（2边都超时，会强制通知都准备好，此时uid为0）
  optional bool ready = 5; //状态
}

//notify 开始游戏
message SC_NotifyStart {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional string address = 4;
  optional string secret = 5;
  optional common.BattleStartInfo info = 6; // 战斗开始数据
}

//战斗结果->胜利验证->同时回传需要翻牌的数据
//req
//rsp
// message CS_PeakBattleResult {
//   optional int32 sn                       = 1;  // 消息序列id
//   optional int32 guide                          = 2;
//   optional string trigger                       = 3;
//   optional common.BattleResultInfo battleResultInfo  = 4;  //  战斗结束数据
// }
message SC_PeakBattleResult {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional common.PeakBattleResult peakBattleResult = 4; //最新结算数据
}

message CS_PeakRank {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional uint32 pageIdx = 4; // 要第几页数据
}
message PeakRankPlayerInfo {
  optional uint64 uid = 1 [jstype = JS_STRING]; //uid
  optional string name = 2;
  optional uint32 level = 3;
  optional uint32 power = 4;
  // optional int32 rank                     = 5; 客户端自己算
  optional string guildName = 5;
  optional int32 avatar = 6; //头像
  optional int32 avatarFrame = 7; //头像框
  optional int32 counsellorId = 8; //
  optional uint32 score = 9; //天梯积分
}
message SC_PeakRank {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional int32 selfRank = 4; // 我的排名
  repeated PeakRankPlayerInfo rankList = 5; // 其他排名
}

//req PlaceHolder
//rsp
message SC_PeakBattleLog {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  repeated common.PeakBattleLog battleLogs = 4;
}

//购买挑战次数
//req PlaceHolder
//rsp
message SC_BuyPeakChallengeTimes {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional uint32 leftChallengeTimes = 4; // 剩余使用次数
  optional uint32 usedChallengeBuyTimes = 5; // 使用过的竞技场挑战购买次数
}

//兑换
//req CS_Exchange
//rsp SC_CommonRet

//领取
//req PlaceHolder
//rsp
message SC_PeakCoin {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional uint32 lastAccumulatePeakCoin = 4; // 之前累计的积分
  optional int64 nowAccumulatePeakCoinBeginTime = 5 [jstype = JS_STRING]; // 从什么时候开始累计
}

//阵容喊话
//req
//rsp
message CS_FormationAction {
  optional int32 sn = 1;
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 actionId = 4;
}
message SC_FormationAction {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional uint64 uid = 4 [jstype = JS_STRING]; // who
  optional int32 actionId = 5; // 动作id
}

//巅峰竞技场
//CS_PeakLastBattleResult
//SC_PeakLastBattleResult
message CS_PeakLastBattleResult {
  optional int32 sn = 1;
  optional int32 guide = 2;
  optional string trigger = 3;
  optional uint64 battleID = 4 [jstype = JS_STRING];
}
//巅峰竞技场最后一场结算结果
message SC_PeakLastBattleResult {
  enum State {
    None = 1; //没在战斗中
    InBattle = 2; //正在战斗中,未结束
    ResultOK = 3; //正常获得战役结果
  }
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional State state = 4; //状态
}

//-------------------------------------------------------------------------------------特权

//进阶
message CS_PrivilegeUpAbility {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 abilityId = 4; // 能力id
}

message SC_PrivilegeUpAbility {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
}

//领取俸禄
message SC_PrivilegeGetWages {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional bool isPrivilegeWagesGet = 4;
}

//获取特权信息
message SC_GetPrivilegeInfo {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional common.PrivilegeData privilegeData = 4; // 特权数据
}

//获取特权商店信息
message SC_GetPrivilegeShopInfo {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  repeated common.PrivilegeShopItem shop = 4;
}

//购买特权buff
message CS_PrivilegeBuyBuff {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 buffId = 4; // buff id
}

message SC_PrivilegeBuyBuff {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
}

//-------------------------------------------------------------------------------------Vip

message SC_GetVipInfo {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional common.VipData vipData = 4;
}

//购买特权礼包
message CS_BuyPrivilageGift {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 giftId = 4;
}

message SC_BuyPrivilageGift {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  repeated int32 giftBuyRecord = 4;
}

//隐藏vip标识
message CS_HideVip {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  repeated int32 systemIds = 4;
}

message SC_HideVip {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  repeated int32 hideVipSystems = 4;
}

//-------------------------------------------------------------------------------------充值

message Recharge {
  repeated int32 firstRecharges = 1; // 档位首充记录
  optional bool isWelcomeGiftTaken = 2; // 是否领取了欢迎奖励
  optional uint32 monthRecharge = 3; // 每月充值
  optional bool isFirstRechargeFinished = 4; // 是否完成首充
  optional bool isFirstRechargeGiftTaken = 5; // 是否领取了首充奖励
  optional MonthCards monthCards = 6; // 月卡
}

message MonthCard {
  optional int32 id = 1; // 月卡id
  optional int64 dueTime = 2; // 到期时间戳
  optional int64 lastTakePrizeTime = 3; // 上次领取钻石时间戳
  optional int64 lastTakePhysicalTime = 4; // 上次领取体力时间戳
}

message MonthCards {
  repeated MonthCard cards = 1;
}

message SC_GetRechargeInfo {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional Recharge recharge = 4;
}

// 通知充值结果
message S_NotifyRechargeResult {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional Recharge recharge = 4;
}

// 月卡每日领奖
message CS_MonthCardTakePrize {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 monthCardId = 4;
}

//-------------------------------------------------------------------------------------领主手册

message SC_GetHandBookInfo {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional common.HandBook handbook = 4;
}

message CS_GetHandBookAward {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 pageId = 4;
}

message SC_GetHandBookAward {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
}

//-------------------------------------------------------------------------------------每日体力

message DailyPhysical {
  repeated int32 takeRecords = 1; // 领取记录
  repeated common.Item fullAttendGifts = 2; // 全勤奖励
  optional int32 fullAttendGiftId = 3; // 全勤奖励的配置id
}

message CS_TakeDailyPhysical {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 id = 4; //领取id
}

message SC_TakeDailyPhysical {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional DailyPhysical dailyPhysical = 4;
}

message CS_DailyPhysicalTakeGifts {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
}

//--------------------------------------------------------------------------------------web
//通知有新问卷
message SC_GetQuestionnaireInfo {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional common.QuestionnaireInfo qinfo = 4; //问卷
  optional uint64 deletes = 5 [jstype = JS_STRING]; //被删除的问卷
}
//通知完成问卷
message S_QuestionnaireInfoComplete {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional uint64 id = 4 [jstype = JS_STRING]; //完成的问卷
}

//使用礼包码
//req CS_UseGiftCode
//rsp SC_UseGiftCode
message CS_UseGiftCode {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional string giftCode = 4;
  optional uint64 op_id = 5 [jstype = JS_STRING]; //运营商id，不是运营平台
}
message SC_UseGiftCode {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional string des = 4; //错误原因
}

//--------------------------------------------------------------------------------------剧本
message Drama {
  repeated common.DramaStage stages = 1;
  optional int32 leftTimes = 2; // 剩余重置次数
  repeated common.Skill ownSkills = 3; // 已经拥有的技能
  repeated int32 dieCommanders = 4; // 死亡主将列表
  optional uint32 maxSweepLevel = 5; // 重置最大关
  optional int32 needPieceNum = 6; // 需要碎片数
  optional int32 treasurePieceCount = 7; // 藏宝图碎片数量
  optional int32 treasurePos = 8; // 宝物位置
  optional bool haveOpenBox = 9; // 是否开启宝箱（开过宝箱为true否则为nil）
}

// 进入关卡
message CS_DramaBeginBattle {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 stageId = 4; // 关卡ID
  optional string ver = 200; // 战斗脚本版本
}
message SC_DramaBeginBattle {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional common.BattleStartInfo battleInfo = 4; //战斗开始数据
}

// 结束关卡
message CS_DramaEndBattle {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional common.BattleResultInfo battleResult = 5; // 战斗数据
  optional int32 stageId = 6; // 关卡ID
  optional bool manualExit = 7; // 手动退出
}

message CS_DramaReset {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
}

message SC_DramaReset {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional Drama drama = 4;
}

message CS_DramaBattleTarget {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 stageId = 4; // 关卡ID
}

message SC_DramaBattleTarget {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional common.BattlePlayerInfo target = 4;
  repeated common.BattleCommander dieCommanders = 5; // 死亡主将
}

message CS_DramaInfo {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
}

message SC_DramaInfo {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional Drama drama = 4;
}

message CS_DramaSweep {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 stageId = 4;
}

message SC_DramaSweep {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
}

message CS_DramaSelectBuff {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 stageId = 4;
  optional int32 buffIndex = 5; // buff索引
  optional int32 commanderId = 6; // 复活主将需要主将id
}

message SC_DramaSelectBuff {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
}

message CS_DramaOpenBox {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 stageId = 4;
}

message SC_DramaOpenBox {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
}

message CS_DramaShopBuy {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 stageId = 4;
}

message CS_DramaCloseShop {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 stageId = 4;
}

message SC_DramaShopBuy {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
}

message CS_DramaTreasure {
  optional int32 sn = 1; //消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
}

message SC_DramaTreasure {
  optional int32 sn = 1; //消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
}

//-------------------------------------------------------------------------------------赤壁之战

message Chibi {
  optional int32 curStageID = 1; // 当前关卡id
  optional int64 curStageStartTime = 2 [jstype = JS_STRING]; // 当前关卡开始时间戳 用于记录当前关卡驻留时间
  optional uint32 challengedTimes = 3; // 今日已挑战次数
  optional uint32 buyChallengeTimes = 4; // 今日已购买挑战次数
  repeated int32 targetAwardTakenIds = 5; // 目标奖励领取记录
  repeated ChibiStageInfo stageInfos = 6; // 各个关卡数据
}

message ChibiStageInfo {
  optional int32 stageID = 1; // 关卡id
  optional string firstName = 2; // 第一个通关玩家名字
  optional uint32 finishNum = 3; // 通关玩家数量
}

// 赤壁之战 开战
message CS_ChibiStartStage {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 stageId = 4;
}

message SC_ChibiStartStage {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
}

// 赤壁之战 进入战斗
message CS_ChibiEnterFight {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 stageId = 4;
  optional int32 fightIndex = 5;
  optional string ver = 200; // 客户端脚本版本
}

message SC_ChibiEnterFight {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional common.BattleStartInfo battleStartInfo = 4;
}

// 赤壁之战 结束战斗
message C_ChibiEndFight {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 stageId = 4;
  optional int32 fightIndex = 5;
  optional common.BattleResultInfo battleResult = 6;
  optional bool manualExit = 7; // 手动退出
}

message S_ChibiEndFight {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  optional bool win = 4; // 是否胜利
  optional uint32 totalTime = 5; // 战斗时间
}

// 赤壁之战 扫荡
message CS_ChibiSweep {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 stageId = 4;
}

message SC_ChibiSweep {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
}

// 赤壁之战 购买挑战次数
message CS_ChibiBuyChallengeTime {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
}

message SC_ChibiBuyChallengeTime {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
}

// 赤壁之战 领取目标奖励
message CS_ChibiTakeTargetAwards {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 takeId = 4;
}

message SC_ChibiTakeTargetAwards {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
}

// 赤壁之战 请求排行榜数据
message C_ChibiRankList {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional common.ChibiRankType rankType = 4; // 排行榜类型
  optional int32 stageId = 5; // 关卡id
}

message S_ChibiRankList {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2;
  optional RewardsResult result = 3;
  optional RankPlayer myRankPlayer = 4;
  repeated RankPlayer ranks = 5;
  optional TopPlayer topPlayer = 6; // 第一名
}

// 赤壁之战 请求关卡数据
message CS_ChibiReqStageInfo {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 stageId = 4; // 关卡id 发送0 请求全量
}

message SC_ChibiReqStageInfo {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
  repeated ChibiStageInfo stageInfos = 4; // 关卡数据
}

//--------------------------------------------------------------------------------------------------治所

// 治所升级
message CS_CollectLevelUp {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 collectId = 4;
}

message SC_CollectLevelUp {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
}

// 治所上阵
message CS_CollectPutOn {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 collectId = 4;
  repeated common.CollectPos posList = 5;
}

message SC_CollectPutOn {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
}

// 治所下阵
message CS_CollectPutOff {
  optional int32 sn = 1; // 消息序列id
  optional int32 guide = 2;
  optional string trigger = 3;
  optional int32 collectId = 4;
  repeated int32 posIds = 5;
}

message SC_CollectPutOff {
  optional int32 sn = 1; // 消息序列id
  optional ret.RET code = 2; // 错误码
  optional RewardsResult result = 3; // 数据变化
}
