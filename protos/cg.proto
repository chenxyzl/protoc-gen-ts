syntax = "proto2";

package cg;

enum RET {
  RET_ERROR = 0; //错误 提示文字：错误
  RET_OK = 1; //OK 提示文字：成功
  RET_SERVER_MAINTAIN = 2; //服务器没有开启(服务器进程没有开启) 提示文字：服务器暂未开放
  RET_USER_NOT_EXIST = 3; //用户不存在 提示文字：用户不存在
  RET_USER_NAME_REPEAT = 4; //重名 提示文字：该昵称已经存在
  RET_LOGIN_REPEAT = 5; //重复登陆 提示文字：本账号被其他人登陆
  RET_LOGIC_NOT_OPEN = 6; //服务器处于维护状态 提示文字：服务器正在维护中，请耐心等待
  RET_ACCOUNT_EXIST = 7; //uuid重了(本服已经有号了，又要创建) 提示文字：该账号已经创建角色
  RET_ACCOUNT_BAN = 8; //账号被禁了 提示文字：该账号已经封禁
  RET_VERSION_ERROR = 9; //客户端版本号落后了 提示文字：客户端版本不匹配，需要重启
  RET_TIME_ERROR = 10; //登陆时间戳错误(需要客户端返回sdk登陆界面重新登陆) 提示文字：长时间未操作，请重新登陆
  RET_TOKEN_ERROR = 11; //Token验证(需要客户端返回sdk登陆界面重新登陆) 提示文字：验证失败，请重新登陆
  RET_IP_BAN = 12; //被封ip了 提示文字：IP已被封禁
  RET_SERVER_BUSY = 13; //在线人数到达上限 提示文字：服务器已达到最大承载人数，请前往其他服务器
  RET_USER_DEVICE_LIMIT = 14; //账号的设备登陆限制（该账号不能在其他设备登陆）提示文字：该账号不能在其他设备登陆
  RET_USER_DATA_ERROR = 15; //用戶数据出现严重错误 提示文字：用戶数据出现严重错误，请联系GM
  RET_EXEC_DB_CMD_ERROR = 16; //执行数据指令错误 提示文字：执行数据指令错误，请联系GM
  RET_STOP_REGIST = 17; //服务器停止注册 提示文字：本服务器已停止创建角色，请前往其他服务器
  RET_ENTER_QUEUE = 18; //进入排队队列 提示文字：已进入排队中，请耐心等候
  RET_DEVICE_INFO_ERROR = 19; //设备信息错误 提示文字：设备信息错误
  RET_DATA_ERROR = 20; //数据错误 提示文字：数据错误，请联系GM
}

enum ID {
  MSG_NONE = 0;
  MSG_LOGIC_MIN = 10000;
  MSG_LOGIC_MAX = 30000;
  MSG_BEGIN = 10001;
  MSG_END = 10999;

  MSG_C2G_Login = 10002;
  MSG_G2C_Login = 10003;
  MSG_C2G_Create = 10004;
  MSG_G2C_Create = 10005;
  MSG_C2G_Offline = 10006;
  MSG_C2G_KeepAlive = 10007; // Client->Gateway保持连接
  MSG_G2C_KeepAlive = 10008; // Logic->Gateway保持连接
  MSG_C2G_SayHi = 10009; // Gateway->Logic 告诉Logic自己的GatewayID
  MSG_G2C_SayHi = 10010; // Logic->Gateway 向Gateway返回Logic注册服务器ID(可多个)
  MSG_G2C_Broadcast = 10011;
  MSG_G2C_Offline = 10012;
}

// C2G  Client->Gateway
// G2C  Gateway->Client

// 客户端登陆消息
message C2G_Login {
  required string token = 1; // 令牌包含登陆账号等信息的加密串
  required uint64 server_id = 2 [jstype = JS_STRING]; // 服务器id
  optional uint32 version = 3; // 客户端版本
  optional bool login = 5; // 是：登陆，否：断线重连

  optional bytes extend = 20; // 扩展信息
}

// 返回客户端登陆消息
message G2C_Login {
  required uint32 ret = 1; // 返回码
  optional uint64 uid = 2 [jstype = JS_STRING]; // user的id
  optional bool new = 3; // 是否新创建的角色
  optional bytes data = 4; // 返回数据

  optional int32 loginRank = 10; // 登陆排名(当ret错误码是RET_ENTER_QUEUE时)
}

// 创建角色消息
message C2G_Create {
  required string name = 1;
  optional uint32 type = 2;
  optional uint64 server_id = 3 [jstype = JS_STRING];
}

// 返回创建角色消息
message G2C_Create {
  required uint32 ret = 1;
  optional uint64 uid = 2 [jstype = JS_STRING];
  optional uint64 sid = 3 [jstype = JS_STRING];
}

// 下线消息
message C2G_Offline {
}

// gateway向server发送连接成功消息
message C2G_SayHi {
}

// server向gateway发送server的id信息
message G2C_SayHi {
  required uint64 id = 1 [jstype = JS_STRING]; //current已经包含了这个id，在go的实现中不要这个了
  repeated uint64 current = 2 [jstype = JS_STRING];
  repeated uint64 del = 3 [jstype = JS_STRING];
}

// 客户端发送心跳消息
message C2G_KeepAlive {
}

// 返回客户端发送心跳消息
message G2C_KeepAlive {
}

//广播消息 ids是要广播的人的集合，如果集合为空表示向全部在线的人发送
message G2C_Broadcast {
  repeated uint64 ids = 1 [jstype = JS_STRING];
  required uint32 cmd = 2;
  optional bytes info = 3;
}

// 
message G2C_Offline {
}
