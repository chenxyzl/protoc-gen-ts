import * as pb_1 from "google-protobuf";
export namespace cl {
    export class PlaceHolder extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get param(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set param(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 5) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                param: this.param,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.param)
                writer.writeInt32(4, this.param);
            if (this.result)
                writer.writeMessage(5, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlaceHolder {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new PlaceHolder();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.param = reader.readInt32();
                        break;
                    case 5:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_EmptyReq extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_EmptyReq {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_EmptyReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_CommonRet extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_CommonRet {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_CommonRet();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_CommonError extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get msgID(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as number | undefined;
        }
        set msgID(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 4) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                msgID: this.msgID,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.msgID)
                writer.writeInt32(3, this.msgID);
            if (this.result)
                writer.writeMessage(4, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_CommonError {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_CommonError();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        message.msgID = reader.readInt32();
                        break;
                    case 4:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_StringReq extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get str(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set str(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                str: this.str
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.str)
                writer.writeString(4, this.str);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_StringReq {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_StringReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.str = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_StringResp extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get msgID(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as number | undefined;
        }
        set msgID(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 4) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get str(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as string | undefined;
        }
        set str(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                msgID: this.msgID,
                result: this.result,
                str: this.str
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.msgID)
                writer.writeInt32(3, this.msgID);
            if (this.result)
                writer.writeMessage(4, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.str)
                writer.writeString(5, this.str);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_StringResp {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_StringResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        message.msgID = reader.readInt32();
                        break;
                    case 4:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 5:
                        message.str = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class PlayerProperty extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get type(): common.PlayerPropertyType | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as common.PlayerPropertyType | undefined;
        }
        set type(value: common.PlayerPropertyType) {
            pb_1.Message.setField(this, 1, value);
        }
        get value(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as string | undefined;
        }
        set value(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        toObject() {
            return {
                type: this.type,
                value: this.value
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type)
                writer.writeEnum(1, this.type);
            if (this.value)
                writer.writeInt64String(2, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerProperty {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new PlayerProperty();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 2:
                        message.value = reader.readInt64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CommanderProperty extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get type(): CommanderProperty.CommanderPropertyType | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as CommanderProperty.CommanderPropertyType | undefined;
        }
        set type(value: CommanderProperty.CommanderPropertyType) {
            pb_1.Message.setField(this, 1, value);
        }
        get value(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set value(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        toObject() {
            return {
                type: this.type,
                value: this.value
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type)
                writer.writeEnum(1, this.type);
            if (this.value)
                writer.writeInt32(2, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommanderProperty {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CommanderProperty();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 2:
                        message.value = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CommandersProperty extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [2, 3, 4], null);
        }
        get id(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get commanderChangedProperties(): CommanderProperty[] {
            return pb_1.Message.getRepeatedWrapperField(this, CommanderProperty, 2) as CommanderProperty[];
        }
        set commanderChangedProperties(value: CommanderProperty[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get skills(): common.CommanderSkill[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.CommanderSkill, 3) as common.CommanderSkill[];
        }
        set skills(value: common.CommanderSkill[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get equips(): common.CommanderEquip[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.CommanderEquip, 4) as common.CommanderEquip[];
        }
        set equips(value: common.CommanderEquip[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        toObject() {
            return {
                id: this.id,
                commanderChangedProperties: this.commanderChangedProperties,
                skills: this.skills,
                equips: this.equips
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id)
                writer.writeInt32(1, this.id);
            if (this.commanderChangedProperties)
                writer.writeRepeatedMessage(2, this.commanderChangedProperties, (item: CommanderProperty) => item.serialize(writer));
            if (this.skills)
                writer.writeRepeatedMessage(3, this.skills, (item: common.CommanderSkill) => item.serialize(writer));
            if (this.equips)
                writer.writeRepeatedMessage(4, this.equips, (item: common.CommanderEquip) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommandersProperty {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CommandersProperty();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        reader.readMessage(message.commanderChangedProperties, () => pb_1.Message.addToRepeatedWrapperField(message, 2, CommanderProperty.deserialize(reader), CommanderProperty));
                        break;
                    case 3:
                        reader.readMessage(message.skills, () => pb_1.Message.addToRepeatedWrapperField(message, 3, common.CommanderSkill.deserialize(reader), common.CommanderSkill));
                        break;
                    case 4:
                        reader.readMessage(message.equips, () => pb_1.Message.addToRepeatedWrapperField(message, 4, common.CommanderEquip.deserialize(reader), common.CommanderEquip));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class RewardData extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [1, 2, 3, 5, 7, 9, 10, 12, 20, 22, 31], null);
        }
        get playerProperties(): PlayerProperty[] {
            return pb_1.Message.getRepeatedWrapperField(this, PlayerProperty, 1) as PlayerProperty[];
        }
        set playerProperties(value: PlayerProperty[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get bagItems(): common.Item[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Item, 2) as common.Item[];
        }
        set bagItems(value: common.Item[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get commandersProperty(): CommandersProperty[] {
            return pb_1.Message.getRepeatedWrapperField(this, CommandersProperty, 3) as CommandersProperty[];
        }
        set commandersProperty(value: CommandersProperty[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get missionChange(): Mission | undefined {
            return pb_1.Message.getWrapperField(this, Mission, 4) as Mission | undefined;
        }
        set missionChange(value: Mission) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get commanders(): common.Commander[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Commander, 5) as common.Commander[];
        }
        set commanders(value: common.Commander[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get dungeon(): Dungeon | undefined {
            return pb_1.Message.getWrapperField(this, Dungeon, 6) as Dungeon | undefined;
        }
        set dungeon(value: Dungeon) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get counsellorChange(): common.Counsellor[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Counsellor, 7) as common.Counsellor[];
        }
        set counsellorChange(value: common.Counsellor[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        get activity(): Activity | undefined {
            return pb_1.Message.getWrapperField(this, Activity, 8) as Activity | undefined;
        }
        set activity(value: Activity) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get treasures(): common.Treasure[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Treasure, 9) as common.Treasure[];
        }
        set treasures(value: common.Treasure[]) {
            pb_1.Message.setRepeatedWrapperField(this, 9, value);
        }
        get treasureFates(): common.TreasureFate[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.TreasureFate, 10) as common.TreasureFate[];
        }
        set treasureFates(value: common.TreasureFate[]) {
            pb_1.Message.setRepeatedWrapperField(this, 10, value);
        }
        get worldChange(): World | undefined {
            return pb_1.Message.getWrapperField(this, World, 11) as World | undefined;
        }
        set worldChange(value: World) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get counsellors(): common.Counsellor[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Counsellor, 12) as common.Counsellor[];
        }
        set counsellors(value: common.Counsellor[]) {
            pb_1.Message.setRepeatedWrapperField(this, 12, value);
        }
        get dailyRefresh(): DailyRefresh | undefined {
            return pb_1.Message.getWrapperField(this, DailyRefresh, 13) as DailyRefresh | undefined;
        }
        set dailyRefresh(value: DailyRefresh) {
            pb_1.Message.setWrapperField(this, 13, value);
        }
        get slay(): Slay | undefined {
            return pb_1.Message.getWrapperField(this, Slay, 14) as Slay | undefined;
        }
        set slay(value: Slay) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get task(): Task | undefined {
            return pb_1.Message.getWrapperField(this, Task, 15) as Task | undefined;
        }
        set task(value: Task) {
            pb_1.Message.setWrapperField(this, 15, value);
        }
        get privilege(): common.PrivilegeData | undefined {
            return pb_1.Message.getWrapperField(this, common.PrivilegeData, 16) as common.PrivilegeData | undefined;
        }
        set privilege(value: common.PrivilegeData) {
            pb_1.Message.setWrapperField(this, 16, value);
        }
        get handbook(): common.HandBook | undefined {
            return pb_1.Message.getWrapperField(this, common.HandBook, 17) as common.HandBook | undefined;
        }
        set handbook(value: common.HandBook) {
            pb_1.Message.setWrapperField(this, 17, value);
        }
        get checkinReplenish(): CheckinReplenish | undefined {
            return pb_1.Message.getWrapperField(this, CheckinReplenish, 18) as CheckinReplenish | undefined;
        }
        set checkinReplenish(value: CheckinReplenish) {
            pb_1.Message.setWrapperField(this, 18, value);
        }
        get strMansion(): StrMansion | undefined {
            return pb_1.Message.getWrapperField(this, StrMansion, 19) as StrMansion | undefined;
        }
        set strMansion(value: StrMansion) {
            pb_1.Message.setWrapperField(this, 19, value);
        }
        get formations(): common.Formation[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Formation, 20) as common.Formation[];
        }
        set formations(value: common.Formation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 20, value);
        }
        get useLevelDraw(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 21, undefined) as boolean | undefined;
        }
        set useLevelDraw(value: boolean) {
            pb_1.Message.setField(this, 21, value);
        }
        get pokedexFmtPowers(): common.PokedexFmtPower[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.PokedexFmtPower, 22) as common.PokedexFmtPower[];
        }
        set pokedexFmtPowers(value: common.PokedexFmtPower[]) {
            pb_1.Message.setRepeatedWrapperField(this, 22, value);
        }
        get unlock3Magic(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 23, undefined) as number | undefined;
        }
        set unlock3Magic(value: number) {
            pb_1.Message.setField(this, 23, value);
        }
        get unlock4Magic(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 24, undefined) as number | undefined;
        }
        set unlock4Magic(value: number) {
            pb_1.Message.setField(this, 24, value);
        }
        get treasureDraw(): TreasureDraw | undefined {
            return pb_1.Message.getWrapperField(this, TreasureDraw, 25) as TreasureDraw | undefined;
        }
        set treasureDraw(value: TreasureDraw) {
            pb_1.Message.setWrapperField(this, 25, value);
        }
        get drama(): Drama | undefined {
            return pb_1.Message.getWrapperField(this, Drama, 26) as Drama | undefined;
        }
        set drama(value: Drama) {
            pb_1.Message.setWrapperField(this, 26, value);
        }
        get history(): History | undefined {
            return pb_1.Message.getWrapperField(this, History, 27) as History | undefined;
        }
        set history(value: History) {
            pb_1.Message.setWrapperField(this, 27, value);
        }
        get recharge(): Recharge | undefined {
            return pb_1.Message.getWrapperField(this, Recharge, 28) as Recharge | undefined;
        }
        set recharge(value: Recharge) {
            pb_1.Message.setWrapperField(this, 28, value);
        }
        get lastPhyscalRecoveryTime(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 29, undefined) as string | undefined;
        }
        set lastPhyscalRecoveryTime(value: string) {
            pb_1.Message.setField(this, 29, value);
        }
        get chibi(): Chibi | undefined {
            return pb_1.Message.getWrapperField(this, Chibi, 30) as Chibi | undefined;
        }
        set chibi(value: Chibi) {
            pb_1.Message.setWrapperField(this, 30, value);
        }
        get usedFunction(): common.UsedFunction[] {
            return pb_1.Message.getField(this, 31) as common.UsedFunction[];
        }
        set usedFunction(value: common.UsedFunction[]) {
            pb_1.Message.setField(this, 31, value);
        }
        get collect(): common.Collect | undefined {
            return pb_1.Message.getWrapperField(this, common.Collect, 32) as common.Collect | undefined;
        }
        set collect(value: common.Collect) {
            pb_1.Message.setWrapperField(this, 32, value);
        }
        toObject() {
            return {
                playerProperties: this.playerProperties,
                bagItems: this.bagItems,
                commandersProperty: this.commandersProperty,
                missionChange: this.missionChange,
                commanders: this.commanders,
                dungeon: this.dungeon,
                counsellorChange: this.counsellorChange,
                activity: this.activity,
                treasures: this.treasures,
                treasureFates: this.treasureFates,
                worldChange: this.worldChange,
                counsellors: this.counsellors,
                dailyRefresh: this.dailyRefresh,
                slay: this.slay,
                task: this.task,
                privilege: this.privilege,
                handbook: this.handbook,
                checkinReplenish: this.checkinReplenish,
                strMansion: this.strMansion,
                formations: this.formations,
                useLevelDraw: this.useLevelDraw,
                pokedexFmtPowers: this.pokedexFmtPowers,
                unlock3Magic: this.unlock3Magic,
                unlock4Magic: this.unlock4Magic,
                treasureDraw: this.treasureDraw,
                drama: this.drama,
                history: this.history,
                recharge: this.recharge,
                lastPhyscalRecoveryTime: this.lastPhyscalRecoveryTime,
                chibi: this.chibi,
                usedFunction: this.usedFunction,
                collect: this.collect
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.playerProperties)
                writer.writeRepeatedMessage(1, this.playerProperties, (item: PlayerProperty) => item.serialize(writer));
            if (this.bagItems)
                writer.writeRepeatedMessage(2, this.bagItems, (item: common.Item) => item.serialize(writer));
            if (this.commandersProperty)
                writer.writeRepeatedMessage(3, this.commandersProperty, (item: CommandersProperty) => item.serialize(writer));
            if (this.missionChange)
                writer.writeMessage(4, this.missionChange, (item: Mission) => item.serialize(writer));
            if (this.commanders)
                writer.writeRepeatedMessage(5, this.commanders, (item: common.Commander) => item.serialize(writer));
            if (this.dungeon)
                writer.writeMessage(6, this.dungeon, (item: Dungeon) => item.serialize(writer));
            if (this.counsellorChange)
                writer.writeRepeatedMessage(7, this.counsellorChange, (item: common.Counsellor) => item.serialize(writer));
            if (this.activity)
                writer.writeMessage(8, this.activity, (item: Activity) => item.serialize(writer));
            if (this.treasures)
                writer.writeRepeatedMessage(9, this.treasures, (item: common.Treasure) => item.serialize(writer));
            if (this.treasureFates)
                writer.writeRepeatedMessage(10, this.treasureFates, (item: common.TreasureFate) => item.serialize(writer));
            if (this.worldChange)
                writer.writeMessage(11, this.worldChange, (item: World) => item.serialize(writer));
            if (this.counsellors)
                writer.writeRepeatedMessage(12, this.counsellors, (item: common.Counsellor) => item.serialize(writer));
            if (this.dailyRefresh)
                writer.writeMessage(13, this.dailyRefresh, (item: DailyRefresh) => item.serialize(writer));
            if (this.slay)
                writer.writeMessage(14, this.slay, (item: Slay) => item.serialize(writer));
            if (this.task)
                writer.writeMessage(15, this.task, (item: Task) => item.serialize(writer));
            if (this.privilege)
                writer.writeMessage(16, this.privilege, (item: common.PrivilegeData) => item.serialize(writer));
            if (this.handbook)
                writer.writeMessage(17, this.handbook, (item: common.HandBook) => item.serialize(writer));
            if (this.checkinReplenish)
                writer.writeMessage(18, this.checkinReplenish, (item: CheckinReplenish) => item.serialize(writer));
            if (this.strMansion)
                writer.writeMessage(19, this.strMansion, (item: StrMansion) => item.serialize(writer));
            if (this.formations)
                writer.writeRepeatedMessage(20, this.formations, (item: common.Formation) => item.serialize(writer));
            if (this.useLevelDraw)
                writer.writeBool(21, this.useLevelDraw);
            if (this.pokedexFmtPowers)
                writer.writeRepeatedMessage(22, this.pokedexFmtPowers, (item: common.PokedexFmtPower) => item.serialize(writer));
            if (this.unlock3Magic)
                writer.writeInt32(23, this.unlock3Magic);
            if (this.unlock4Magic)
                writer.writeInt32(24, this.unlock4Magic);
            if (this.treasureDraw)
                writer.writeMessage(25, this.treasureDraw, (item: TreasureDraw) => item.serialize(writer));
            if (this.drama)
                writer.writeMessage(26, this.drama, (item: Drama) => item.serialize(writer));
            if (this.history)
                writer.writeMessage(27, this.history, (item: History) => item.serialize(writer));
            if (this.recharge)
                writer.writeMessage(28, this.recharge, (item: Recharge) => item.serialize(writer));
            if (this.lastPhyscalRecoveryTime)
                writer.writeInt64String(29, this.lastPhyscalRecoveryTime);
            if (this.chibi)
                writer.writeMessage(30, this.chibi, (item: Chibi) => item.serialize(writer));
            if (this.usedFunction)
                writer.writeRepeatedEnum(31, this.usedFunction);
            if (this.collect)
                writer.writeMessage(32, this.collect, (item: common.Collect) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RewardData {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new RewardData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.playerProperties, () => pb_1.Message.addToRepeatedWrapperField(message, 1, PlayerProperty.deserialize(reader), PlayerProperty));
                        break;
                    case 2:
                        reader.readMessage(message.bagItems, () => pb_1.Message.addToRepeatedWrapperField(message, 2, common.Item.deserialize(reader), common.Item));
                        break;
                    case 3:
                        reader.readMessage(message.commandersProperty, () => pb_1.Message.addToRepeatedWrapperField(message, 3, CommandersProperty.deserialize(reader), CommandersProperty));
                        break;
                    case 4:
                        reader.readMessage(message.missionChange, () => message.missionChange = Mission.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.commanders, () => pb_1.Message.addToRepeatedWrapperField(message, 5, common.Commander.deserialize(reader), common.Commander));
                        break;
                    case 6:
                        reader.readMessage(message.dungeon, () => message.dungeon = Dungeon.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.counsellorChange, () => pb_1.Message.addToRepeatedWrapperField(message, 7, common.Counsellor.deserialize(reader), common.Counsellor));
                        break;
                    case 8:
                        reader.readMessage(message.activity, () => message.activity = Activity.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.treasures, () => pb_1.Message.addToRepeatedWrapperField(message, 9, common.Treasure.deserialize(reader), common.Treasure));
                        break;
                    case 10:
                        reader.readMessage(message.treasureFates, () => pb_1.Message.addToRepeatedWrapperField(message, 10, common.TreasureFate.deserialize(reader), common.TreasureFate));
                        break;
                    case 11:
                        reader.readMessage(message.worldChange, () => message.worldChange = World.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.counsellors, () => pb_1.Message.addToRepeatedWrapperField(message, 12, common.Counsellor.deserialize(reader), common.Counsellor));
                        break;
                    case 13:
                        reader.readMessage(message.dailyRefresh, () => message.dailyRefresh = DailyRefresh.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.slay, () => message.slay = Slay.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.task, () => message.task = Task.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.privilege, () => message.privilege = common.PrivilegeData.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.handbook, () => message.handbook = common.HandBook.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.checkinReplenish, () => message.checkinReplenish = CheckinReplenish.deserialize(reader));
                        break;
                    case 19:
                        reader.readMessage(message.strMansion, () => message.strMansion = StrMansion.deserialize(reader));
                        break;
                    case 20:
                        reader.readMessage(message.formations, () => pb_1.Message.addToRepeatedWrapperField(message, 20, common.Formation.deserialize(reader), common.Formation));
                        break;
                    case 21:
                        message.useLevelDraw = reader.readBool();
                        break;
                    case 22:
                        reader.readMessage(message.pokedexFmtPowers, () => pb_1.Message.addToRepeatedWrapperField(message, 22, common.PokedexFmtPower.deserialize(reader), common.PokedexFmtPower));
                        break;
                    case 23:
                        message.unlock3Magic = reader.readInt32();
                        break;
                    case 24:
                        message.unlock4Magic = reader.readInt32();
                        break;
                    case 25:
                        reader.readMessage(message.treasureDraw, () => message.treasureDraw = TreasureDraw.deserialize(reader));
                        break;
                    case 26:
                        reader.readMessage(message.drama, () => message.drama = Drama.deserialize(reader));
                        break;
                    case 27:
                        reader.readMessage(message.history, () => message.history = History.deserialize(reader));
                        break;
                    case 28:
                        reader.readMessage(message.recharge, () => message.recharge = Recharge.deserialize(reader));
                        break;
                    case 29:
                        message.lastPhyscalRecoveryTime = reader.readInt64String();
                        break;
                    case 30:
                        reader.readMessage(message.chibi, () => message.chibi = Chibi.deserialize(reader));
                        break;
                    case 31:
                        message.usedFunction.push(reader.readEnum());
                        break;
                    case 32:
                        reader.readMessage(message.collect, () => message.collect = common.Collect.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class RewardsResult extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [2, 3], null);
        }
        get rewardData(): RewardData | undefined {
            return pb_1.Message.getWrapperField(this, RewardData, 1) as RewardData | undefined;
        }
        set rewardData(value: RewardData) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get rewardShow(): common.Item[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Item, 2) as common.Item[];
        }
        set rewardShow(value: common.Item[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get itemLists(): ItemList[] {
            return pb_1.Message.getRepeatedWrapperField(this, ItemList, 3) as ItemList[];
        }
        set itemLists(value: ItemList[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        toObject() {
            return {
                rewardData: this.rewardData,
                rewardShow: this.rewardShow,
                itemLists: this.itemLists
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.rewardData)
                writer.writeMessage(1, this.rewardData, (item: RewardData) => item.serialize(writer));
            if (this.rewardShow)
                writer.writeRepeatedMessage(2, this.rewardShow, (item: common.Item) => item.serialize(writer));
            if (this.itemLists)
                writer.writeRepeatedMessage(3, this.itemLists, (item: ItemList) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RewardsResult {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new RewardsResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.rewardData, () => message.rewardData = RewardData.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.rewardShow, () => pb_1.Message.addToRepeatedWrapperField(message, 2, common.Item.deserialize(reader), common.Item));
                        break;
                    case 3:
                        reader.readMessage(message.itemLists, () => pb_1.Message.addToRepeatedWrapperField(message, 3, ItemList.deserialize(reader), ItemList));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class ItemList extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [1], null);
        }
        get items(): common.Item[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Item, 1) as common.Item[];
        }
        set items(value: common.Item[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        toObject() {
            return {
                items: this.items
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.items)
                writer.writeRepeatedMessage(1, this.items, (item: common.Item) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ItemList {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new ItemList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, common.Item.deserialize(reader), common.Item));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class UnixTimeStamp extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get unixTimeStamp(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set unixTimeStamp(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 5) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                unixTimeStamp: this.unixTimeStamp,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.unixTimeStamp)
                writer.writeInt64String(4, this.unixTimeStamp);
            if (this.result)
                writer.writeMessage(5, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UnixTimeStamp {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new UnixTimeStamp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.unixTimeStamp = reader.readInt64String();
                        break;
                    case 5:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_UserData extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get total(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as boolean | undefined;
        }
        set total(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                total: this.total
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.total)
                writer.writeBool(4, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_UserData {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_UserData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.total = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class ServerInfo extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get timeZone(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set timeZone(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get timeStamp(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as string | undefined;
        }
        set timeStamp(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get serverID(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as number | undefined;
        }
        set serverID(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get serverName(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set serverName(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get openServerTime(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as string | undefined;
        }
        set openServerTime(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                timeZone: this.timeZone,
                timeStamp: this.timeStamp,
                serverID: this.serverID,
                serverName: this.serverName,
                openServerTime: this.openServerTime
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.timeZone)
                writer.writeInt32(1, this.timeZone);
            if (this.timeStamp)
                writer.writeInt64String(2, this.timeStamp);
            if (this.serverID)
                writer.writeInt32(3, this.serverID);
            if (this.serverName)
                writer.writeString(4, this.serverName);
            if (this.openServerTime)
                writer.writeInt64String(5, this.openServerTime);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServerInfo {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new ServerInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.timeZone = reader.readInt32();
                        break;
                    case 2:
                        message.timeStamp = reader.readInt64String();
                        break;
                    case 3:
                        message.serverID = reader.readInt32();
                        break;
                    case 4:
                        message.serverName = reader.readString();
                        break;
                    case 5:
                        message.openServerTime = reader.readInt64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_UserData extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get user(): User | undefined {
            return pb_1.Message.getWrapperField(this, User, 4) as User | undefined;
        }
        set user(value: User) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get serverInfo(): ServerInfo | undefined {
            return pb_1.Message.getWrapperField(this, ServerInfo, 5) as ServerInfo | undefined;
        }
        set serverInfo(value: ServerInfo) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                user: this.user,
                serverInfo: this.serverInfo
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.user)
                writer.writeMessage(4, this.user, (item: User) => item.serialize(writer));
            if (this.serverInfo)
                writer.writeMessage(5, this.serverInfo, (item: ServerInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_UserData {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_UserData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.serverInfo, () => message.serverInfo = ServerInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class Arena extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [6], null);
        }
        get leftChallengeTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as number | undefined;
        }
        set leftChallengeTimes(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get usedChallengeBuyTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set usedChallengeBuyTimes(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get maxRank(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set maxRank(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get exchangeIds(): number[] {
            return pb_1.Message.getField(this, 6) as number[];
        }
        set exchangeIds(value: number[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get selfRank(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 7, undefined) as number | undefined;
        }
        set selfRank(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get arenaDefencePower(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 8, undefined) as number | undefined;
        }
        set arenaDefencePower(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        toObject() {
            return {
                leftChallengeTimes: this.leftChallengeTimes,
                usedChallengeBuyTimes: this.usedChallengeBuyTimes,
                maxRank: this.maxRank,
                exchangeIds: this.exchangeIds,
                selfRank: this.selfRank,
                arenaDefencePower: this.arenaDefencePower
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.leftChallengeTimes)
                writer.writeUint32(3, this.leftChallengeTimes);
            if (this.usedChallengeBuyTimes)
                writer.writeUint32(4, this.usedChallengeBuyTimes);
            if (this.maxRank)
                writer.writeUint32(5, this.maxRank);
            if (this.exchangeIds)
                writer.writeRepeatedInt32(6, this.exchangeIds);
            if (this.selfRank)
                writer.writeUint32(7, this.selfRank);
            if (this.arenaDefencePower)
                writer.writeUint32(8, this.arenaDefencePower);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Arena {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new Arena();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 3:
                        message.leftChallengeTimes = reader.readUint32();
                        break;
                    case 4:
                        message.usedChallengeBuyTimes = reader.readUint32();
                        break;
                    case 5:
                        message.maxRank = reader.readUint32();
                        break;
                    case 6:
                        message.exchangeIds.push(reader.readInt32());
                        break;
                    case 7:
                        message.selfRank = reader.readUint32();
                        break;
                    case 8:
                        message.arenaDefencePower = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class Peak extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [7], null);
        }
        get firstSeaonBeginTime(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set firstSeaonBeginTime(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get totalBattleTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set totalBattleTimes(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get leftChallengeTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set leftChallengeTimes(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get usedChallengeBuyTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as number | undefined;
        }
        set usedChallengeBuyTimes(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get exchangeIds(): number[] {
            return pb_1.Message.getField(this, 7) as number[];
        }
        set exchangeIds(value: number[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get score(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 8, undefined) as number | undefined;
        }
        set score(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get maxScore(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 9, undefined) as number | undefined;
        }
        set maxScore(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get hotCounsellor(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 10, undefined) as number | undefined;
        }
        set hotCounsellor(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        toObject() {
            return {
                firstSeaonBeginTime: this.firstSeaonBeginTime,
                totalBattleTimes: this.totalBattleTimes,
                leftChallengeTimes: this.leftChallengeTimes,
                usedChallengeBuyTimes: this.usedChallengeBuyTimes,
                exchangeIds: this.exchangeIds,
                score: this.score,
                maxScore: this.maxScore,
                hotCounsellor: this.hotCounsellor
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.firstSeaonBeginTime)
                writer.writeInt64String(3, this.firstSeaonBeginTime);
            if (this.totalBattleTimes)
                writer.writeInt32(4, this.totalBattleTimes);
            if (this.leftChallengeTimes)
                writer.writeUint32(5, this.leftChallengeTimes);
            if (this.usedChallengeBuyTimes)
                writer.writeUint32(6, this.usedChallengeBuyTimes);
            if (this.exchangeIds)
                writer.writeRepeatedInt32(7, this.exchangeIds);
            if (this.score)
                writer.writeUint32(8, this.score);
            if (this.maxScore)
                writer.writeUint32(9, this.maxScore);
            if (this.hotCounsellor)
                writer.writeInt32(10, this.hotCounsellor);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Peak {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new Peak();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 3:
                        message.firstSeaonBeginTime = reader.readInt64String();
                        break;
                    case 4:
                        message.totalBattleTimes = reader.readInt32();
                        break;
                    case 5:
                        message.leftChallengeTimes = reader.readUint32();
                        break;
                    case 6:
                        message.usedChallengeBuyTimes = reader.readUint32();
                        break;
                    case 7:
                        message.exchangeIds.push(reader.readInt32());
                        break;
                    case 8:
                        message.score = reader.readUint32();
                        break;
                    case 9:
                        message.maxScore = reader.readUint32();
                        break;
                    case 10:
                        message.hotCounsellor = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class GuildLoginInfo extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [3, 5, 6, 9], null);
        }
        get guildId(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as string | undefined;
        }
        set guildId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get guildName(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as string | undefined;
        }
        set guildName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get skills(): common.PlayerGuildSkill[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.PlayerGuildSkill, 3) as common.PlayerGuildSkill[];
        }
        set skills(value: common.PlayerGuildSkill[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get dayBuildTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set dayBuildTimes(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get receivedActivityTag(): number[] {
            return pb_1.Message.getField(this, 5) as number[];
        }
        set receivedActivityTag(value: number[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get notices(): common.GuildNotice[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.GuildNotice, 6) as common.GuildNotice[];
        }
        set notices(value: common.GuildNotice[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get todayTotalActivity(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 7, undefined) as number | undefined;
        }
        set todayTotalActivity(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get nextCrit(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 8, undefined) as boolean | undefined;
        }
        set nextCrit(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get buildings(): GuildBuilding[] {
            return pb_1.Message.getRepeatedWrapperField(this, GuildBuilding, 9) as GuildBuilding[];
        }
        set buildings(value: GuildBuilding[]) {
            pb_1.Message.setRepeatedWrapperField(this, 9, value);
        }
        get lastGetSalaryTime(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 10, undefined) as number | undefined;
        }
        set lastGetSalaryTime(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get todayLeftPubExchangeBaseTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 11, undefined) as number | undefined;
        }
        set todayLeftPubExchangeBaseTimes(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        toObject() {
            return {
                guildId: this.guildId,
                guildName: this.guildName,
                skills: this.skills,
                dayBuildTimes: this.dayBuildTimes,
                receivedActivityTag: this.receivedActivityTag,
                notices: this.notices,
                todayTotalActivity: this.todayTotalActivity,
                nextCrit: this.nextCrit,
                buildings: this.buildings,
                lastGetSalaryTime: this.lastGetSalaryTime,
                todayLeftPubExchangeBaseTimes: this.todayLeftPubExchangeBaseTimes
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.guildId)
                writer.writeUint64String(1, this.guildId);
            if (this.guildName)
                writer.writeString(2, this.guildName);
            if (this.skills)
                writer.writeRepeatedMessage(3, this.skills, (item: common.PlayerGuildSkill) => item.serialize(writer));
            if (this.dayBuildTimes)
                writer.writeUint32(4, this.dayBuildTimes);
            if (this.receivedActivityTag)
                writer.writeRepeatedUint32(5, this.receivedActivityTag);
            if (this.notices)
                writer.writeRepeatedMessage(6, this.notices, (item: common.GuildNotice) => item.serialize(writer));
            if (this.todayTotalActivity)
                writer.writeUint32(7, this.todayTotalActivity);
            if (this.nextCrit)
                writer.writeBool(8, this.nextCrit);
            if (this.buildings)
                writer.writeRepeatedMessage(9, this.buildings, (item: GuildBuilding) => item.serialize(writer));
            if (this.lastGetSalaryTime)
                writer.writeInt64(10, this.lastGetSalaryTime);
            if (this.todayLeftPubExchangeBaseTimes)
                writer.writeUint32(11, this.todayLeftPubExchangeBaseTimes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GuildLoginInfo {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new GuildLoginInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.guildId = reader.readUint64String();
                        break;
                    case 2:
                        message.guildName = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.skills, () => pb_1.Message.addToRepeatedWrapperField(message, 3, common.PlayerGuildSkill.deserialize(reader), common.PlayerGuildSkill));
                        break;
                    case 4:
                        message.dayBuildTimes = reader.readUint32();
                        break;
                    case 5:
                        message.receivedActivityTag.push(reader.readUint32());
                        break;
                    case 6:
                        reader.readMessage(message.notices, () => pb_1.Message.addToRepeatedWrapperField(message, 6, common.GuildNotice.deserialize(reader), common.GuildNotice));
                        break;
                    case 7:
                        message.todayTotalActivity = reader.readUint32();
                        break;
                    case 8:
                        message.nextCrit = reader.readBool();
                        break;
                    case 9:
                        reader.readMessage(message.buildings, () => pb_1.Message.addToRepeatedWrapperField(message, 9, GuildBuilding.deserialize(reader), GuildBuilding));
                        break;
                    case 10:
                        message.lastGetSalaryTime = reader.readInt64();
                        break;
                    case 11:
                        message.todayLeftPubExchangeBaseTimes = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class User extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [45, 59, 60, 61, 63, 64, 66, 67, 68, 94, 102, 104], null);
        }
        get id(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as string | undefined;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get serverId(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as string | undefined;
        }
        set serverId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get career(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set career(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get level(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set level(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get vipLevel(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as number | undefined;
        }
        set vipLevel(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get exp(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 7, undefined) as number | undefined;
        }
        set exp(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get diamond(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 8, undefined) as number | undefined;
        }
        set diamond(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get gold(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 9, undefined) as number | undefined;
        }
        set gold(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get physcal(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 10, undefined) as number | undefined;
        }
        set physcal(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get activity(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 11, undefined) as number | undefined;
        }
        set activity(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get commanderExpPool(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 12, undefined) as number | undefined;
        }
        set commanderExpPool(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get vipExp(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 13, undefined) as number | undefined;
        }
        set vipExp(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get skillExp(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 14, undefined) as number | undefined;
        }
        set skillExp(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get lastPhyscalRecoveryTime(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 15, undefined) as string | undefined;
        }
        set lastPhyscalRecoveryTime(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get power(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 16, undefined) as number | undefined;
        }
        set power(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        get treasureCoin(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 17, undefined) as number | undefined;
        }
        set treasureCoin(value: number) {
            pb_1.Message.setField(this, 17, value);
        }
        get dramaCoin(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 18, undefined) as number | undefined;
        }
        set dramaCoin(value: number) {
            pb_1.Message.setField(this, 18, value);
        }
        get goldenDragon(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 22, undefined) as number | undefined;
        }
        set goldenDragon(value: number) {
            pb_1.Message.setField(this, 22, value);
        }
        get physicalCollectNum(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 23, undefined) as number | undefined;
        }
        set physicalCollectNum(value: number) {
            pb_1.Message.setField(this, 23, value);
        }
        get arenaCoin(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 24, undefined) as number | undefined;
        }
        set arenaCoin(value: number) {
            pb_1.Message.setField(this, 24, value);
        }
        get gameCoin(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 25, undefined) as number | undefined;
        }
        set gameCoin(value: number) {
            pb_1.Message.setField(this, 25, value);
        }
        get privilegeCoin(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 26, undefined) as number | undefined;
        }
        set privilegeCoin(value: number) {
            pb_1.Message.setField(this, 26, value);
        }
        get guildContributionCoin(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 27, undefined) as number | undefined;
        }
        set guildContributionCoin(value: number) {
            pb_1.Message.setField(this, 27, value);
        }
        get msg(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 28, undefined) as string | undefined;
        }
        set msg(value: string) {
            pb_1.Message.setField(this, 28, value);
        }
        get rolePaid(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 29, undefined) as number | undefined;
        }
        set rolePaid(value: number) {
            pb_1.Message.setField(this, 29, value);
        }
        get serverType(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 30, undefined) as number | undefined;
        }
        set serverType(value: number) {
            pb_1.Message.setField(this, 30, value);
        }
        get roleType(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 31, undefined) as number | undefined;
        }
        set roleType(value: number) {
            pb_1.Message.setField(this, 31, value);
        }
        get lastLogout(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 32, undefined) as string | undefined;
        }
        set lastLogout(value: string) {
            pb_1.Message.setField(this, 32, value);
        }
        get peakCoin(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 33, undefined) as number | undefined;
        }
        set peakCoin(value: number) {
            pb_1.Message.setField(this, 33, value);
        }
        get treasureBaseCoin(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 34, undefined) as number | undefined;
        }
        set treasureBaseCoin(value: number) {
            pb_1.Message.setField(this, 34, value);
        }
        get treasureScore(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 35, undefined) as number | undefined;
        }
        set treasureScore(value: number) {
            pb_1.Message.setField(this, 35, value);
        }
        get createTime(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 40, undefined) as string | undefined;
        }
        set createTime(value: string) {
            pb_1.Message.setField(this, 40, value);
        }
        get renameTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 41, undefined) as number | undefined;
        }
        set renameTimes(value: number) {
            pb_1.Message.setField(this, 41, value);
        }
        get avatar(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 42, undefined) as number | undefined;
        }
        set avatar(value: number) {
            pb_1.Message.setField(this, 42, value);
        }
        get avatarFrame(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 43, undefined) as number | undefined;
        }
        set avatarFrame(value: number) {
            pb_1.Message.setField(this, 43, value);
        }
        get guildLoginInfo(): GuildLoginInfo | undefined {
            return pb_1.Message.getWrapperField(this, GuildLoginInfo, 44) as GuildLoginInfo | undefined;
        }
        set guildLoginInfo(value: GuildLoginInfo) {
            pb_1.Message.setWrapperField(this, 44, value);
        }
        get usedFunction(): common.UsedFunction[] {
            return pb_1.Message.getField(this, 45) as common.UsedFunction[];
        }
        set usedFunction(value: common.UsedFunction[]) {
            pb_1.Message.setField(this, 45, value);
        }
        get mails(): common.Mail[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Mail, 59) as common.Mail[];
        }
        set mails(value: common.Mail[]) {
            pb_1.Message.setRepeatedWrapperField(this, 59, value);
        }
        get bagItems(): common.Item[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Item, 60) as common.Item[];
        }
        set bagItems(value: common.Item[]) {
            pb_1.Message.setRepeatedWrapperField(this, 60, value);
        }
        get counsellors(): common.Counsellor[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Counsellor, 61) as common.Counsellor[];
        }
        set counsellors(value: common.Counsellor[]) {
            pb_1.Message.setRepeatedWrapperField(this, 61, value);
        }
        get mission(): Mission | undefined {
            return pb_1.Message.getWrapperField(this, Mission, 62) as Mission | undefined;
        }
        set mission(value: Mission) {
            pb_1.Message.setWrapperField(this, 62, value);
        }
        get avatars(): number[] {
            return pb_1.Message.getField(this, 63) as number[];
        }
        set avatars(value: number[]) {
            pb_1.Message.setField(this, 63, value);
        }
        get avatarFrames(): number[] {
            return pb_1.Message.getField(this, 64) as number[];
        }
        set avatarFrames(value: number[]) {
            pb_1.Message.setField(this, 64, value);
        }
        get checkin(): CheckinInfo | undefined {
            return pb_1.Message.getWrapperField(this, CheckinInfo, 65) as CheckinInfo | undefined;
        }
        set checkin(value: CheckinInfo) {
            pb_1.Message.setWrapperField(this, 65, value);
        }
        get commanders(): common.Commander[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Commander, 66) as common.Commander[];
        }
        set commanders(value: common.Commander[]) {
            pb_1.Message.setRepeatedWrapperField(this, 66, value);
        }
        get formations(): common.Formation[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Formation, 67) as common.Formation[];
        }
        set formations(value: common.Formation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 67, value);
        }
        get soldiers(): common.Soldier[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Soldier, 68) as common.Soldier[];
        }
        set soldiers(value: common.Soldier[]) {
            pb_1.Message.setRepeatedWrapperField(this, 68, value);
        }
        get shopDailyRecord(): common.ShopDailyRecord | undefined {
            return pb_1.Message.getWrapperField(this, common.ShopDailyRecord, 69) as common.ShopDailyRecord | undefined;
        }
        set shopDailyRecord(value: common.ShopDailyRecord) {
            pb_1.Message.setWrapperField(this, 69, value);
        }
        get dungeon(): Dungeon | undefined {
            return pb_1.Message.getWrapperField(this, Dungeon, 70) as Dungeon | undefined;
        }
        set dungeon(value: Dungeon) {
            pb_1.Message.setWrapperField(this, 70, value);
        }
        get soldierTechs(): SoldierTechs | undefined {
            return pb_1.Message.getWrapperField(this, SoldierTechs, 71) as SoldierTechs | undefined;
        }
        set soldierTechs(value: SoldierTechs) {
            pb_1.Message.setWrapperField(this, 71, value);
        }
        get world(): World | undefined {
            return pb_1.Message.getWrapperField(this, World, 72) as World | undefined;
        }
        set world(value: World) {
            pb_1.Message.setWrapperField(this, 72, value);
        }
        get treasureDraw(): TreasureDraw | undefined {
            return pb_1.Message.getWrapperField(this, TreasureDraw, 73) as TreasureDraw | undefined;
        }
        set treasureDraw(value: TreasureDraw) {
            pb_1.Message.setWrapperField(this, 73, value);
        }
        get arena(): Arena | undefined {
            return pb_1.Message.getWrapperField(this, Arena, 77) as Arena | undefined;
        }
        set arena(value: Arena) {
            pb_1.Message.setWrapperField(this, 77, value);
        }
        get dailyBoss(): common.DailyBoss | undefined {
            return pb_1.Message.getWrapperField(this, common.DailyBoss, 79) as common.DailyBoss | undefined;
        }
        set dailyBoss(value: common.DailyBoss) {
            pb_1.Message.setWrapperField(this, 79, value);
        }
        get strMansion(): common.StrMansion | undefined {
            return pb_1.Message.getWrapperField(this, common.StrMansion, 80) as common.StrMansion | undefined;
        }
        set strMansion(value: common.StrMansion) {
            pb_1.Message.setWrapperField(this, 80, value);
        }
        get peak(): Peak | undefined {
            return pb_1.Message.getWrapperField(this, Peak, 81) as Peak | undefined;
        }
        set peak(value: Peak) {
            pb_1.Message.setWrapperField(this, 81, value);
        }
        get slay(): SlayBaseData | undefined {
            return pb_1.Message.getWrapperField(this, SlayBaseData, 82) as SlayBaseData | undefined;
        }
        set slay(value: SlayBaseData) {
            pb_1.Message.setWrapperField(this, 82, value);
        }
        get task(): Task | undefined {
            return pb_1.Message.getWrapperField(this, Task, 85) as Task | undefined;
        }
        set task(value: Task) {
            pb_1.Message.setWrapperField(this, 85, value);
        }
        get dailyExp(): common.DailyExp | undefined {
            return pb_1.Message.getWrapperField(this, common.DailyExp, 86) as common.DailyExp | undefined;
        }
        set dailyExp(value: common.DailyExp) {
            pb_1.Message.setWrapperField(this, 86, value);
        }
        get dailyCoin(): common.DailyCoin | undefined {
            return pb_1.Message.getWrapperField(this, common.DailyCoin, 87) as common.DailyCoin | undefined;
        }
        set dailyCoin(value: common.DailyCoin) {
            pb_1.Message.setWrapperField(this, 87, value);
        }
        get recharge(): Recharge | undefined {
            return pb_1.Message.getWrapperField(this, Recharge, 88) as Recharge | undefined;
        }
        set recharge(value: Recharge) {
            pb_1.Message.setWrapperField(this, 88, value);
        }
        get announce(): common.Announce | undefined {
            return pb_1.Message.getWrapperField(this, common.Announce, 89) as common.Announce | undefined;
        }
        set announce(value: common.Announce) {
            pb_1.Message.setWrapperField(this, 89, value);
        }
        get musicSwitch(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 90, undefined) as boolean | undefined;
        }
        set musicSwitch(value: boolean) {
            pb_1.Message.setField(this, 90, value);
        }
        get soundcSwitch(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 91, undefined) as boolean | undefined;
        }
        set soundcSwitch(value: boolean) {
            pb_1.Message.setField(this, 91, value);
        }
        get pushSwitch(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 92, undefined) as boolean | undefined;
        }
        set pushSwitch(value: boolean) {
            pb_1.Message.setField(this, 92, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 93, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 93, value);
        }
        get hideVipSystems(): number[] {
            return pb_1.Message.getField(this, 94) as number[];
        }
        set hideVipSystems(value: number[]) {
            pb_1.Message.setField(this, 94, value);
        }
        get peakStateData(): common.PeakStateData | undefined {
            return pb_1.Message.getWrapperField(this, common.PeakStateData, 95) as common.PeakStateData | undefined;
        }
        set peakStateData(value: common.PeakStateData) {
            pb_1.Message.setWrapperField(this, 95, value);
        }
        get useLevelDraw(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 96, undefined) as boolean | undefined;
        }
        set useLevelDraw(value: boolean) {
            pb_1.Message.setField(this, 96, value);
        }
        get drama(): Drama | undefined {
            return pb_1.Message.getWrapperField(this, Drama, 97) as Drama | undefined;
        }
        set drama(value: Drama) {
            pb_1.Message.setWrapperField(this, 97, value);
        }
        get history(): History | undefined {
            return pb_1.Message.getWrapperField(this, History, 98) as History | undefined;
        }
        set history(value: History) {
            pb_1.Message.setWrapperField(this, 98, value);
        }
        get chibi(): Chibi | undefined {
            return pb_1.Message.getWrapperField(this, Chibi, 99) as Chibi | undefined;
        }
        set chibi(value: Chibi) {
            pb_1.Message.setWrapperField(this, 99, value);
        }
        get dailyRefresh(): DailyRefresh | undefined {
            return pb_1.Message.getWrapperField(this, DailyRefresh, 100) as DailyRefresh | undefined;
        }
        set dailyRefresh(value: DailyRefresh) {
            pb_1.Message.setWrapperField(this, 100, value);
        }
        get activities(): Activity | undefined {
            return pb_1.Message.getWrapperField(this, Activity, 101) as Activity | undefined;
        }
        set activities(value: Activity) {
            pb_1.Message.setWrapperField(this, 101, value);
        }
        get qInfos(): common.QuestionnaireInfo[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.QuestionnaireInfo, 102) as common.QuestionnaireInfo[];
        }
        set qInfos(value: common.QuestionnaireInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 102, value);
        }
        get collect(): common.Collect | undefined {
            return pb_1.Message.getWrapperField(this, common.Collect, 103) as common.Collect | undefined;
        }
        set collect(value: common.Collect) {
            pb_1.Message.setWrapperField(this, 103, value);
        }
        get guideTrigger(): string[] {
            return pb_1.Message.getField(this, 104) as string[];
        }
        set guideTrigger(value: string[]) {
            pb_1.Message.setField(this, 104, value);
        }
        get handbook(): common.HandBook | undefined {
            return pb_1.Message.getWrapperField(this, common.HandBook, 110) as common.HandBook | undefined;
        }
        set handbook(value: common.HandBook) {
            pb_1.Message.setWrapperField(this, 110, value);
        }
        get privilege(): common.PrivilegeData | undefined {
            return pb_1.Message.getWrapperField(this, common.PrivilegeData, 111) as common.PrivilegeData | undefined;
        }
        set privilege(value: common.PrivilegeData) {
            pb_1.Message.setWrapperField(this, 111, value);
        }
        get pokedex(): common.Pokedex | undefined {
            return pb_1.Message.getWrapperField(this, common.Pokedex, 112) as common.Pokedex | undefined;
        }
        set pokedex(value: common.Pokedex) {
            pb_1.Message.setWrapperField(this, 112, value);
        }
        get treasure(): Treasure | undefined {
            return pb_1.Message.getWrapperField(this, Treasure, 113) as Treasure | undefined;
        }
        set treasure(value: Treasure) {
            pb_1.Message.setWrapperField(this, 113, value);
        }
        get unlock3Magic(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 114, undefined) as number | undefined;
        }
        set unlock3Magic(value: number) {
            pb_1.Message.setField(this, 114, value);
        }
        get unlock4Magic(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 115, undefined) as number | undefined;
        }
        set unlock4Magic(value: number) {
            pb_1.Message.setField(this, 115, value);
        }
        toObject() {
            return {
                id: this.id,
                serverId: this.serverId,
                name: this.name,
                career: this.career,
                level: this.level,
                vipLevel: this.vipLevel,
                exp: this.exp,
                diamond: this.diamond,
                gold: this.gold,
                physcal: this.physcal,
                activity: this.activity,
                commanderExpPool: this.commanderExpPool,
                vipExp: this.vipExp,
                skillExp: this.skillExp,
                lastPhyscalRecoveryTime: this.lastPhyscalRecoveryTime,
                power: this.power,
                treasureCoin: this.treasureCoin,
                dramaCoin: this.dramaCoin,
                goldenDragon: this.goldenDragon,
                physicalCollectNum: this.physicalCollectNum,
                arenaCoin: this.arenaCoin,
                gameCoin: this.gameCoin,
                privilegeCoin: this.privilegeCoin,
                guildContributionCoin: this.guildContributionCoin,
                msg: this.msg,
                rolePaid: this.rolePaid,
                serverType: this.serverType,
                roleType: this.roleType,
                lastLogout: this.lastLogout,
                peakCoin: this.peakCoin,
                treasureBaseCoin: this.treasureBaseCoin,
                treasureScore: this.treasureScore,
                createTime: this.createTime,
                renameTimes: this.renameTimes,
                avatar: this.avatar,
                avatarFrame: this.avatarFrame,
                guildLoginInfo: this.guildLoginInfo,
                usedFunction: this.usedFunction,
                mails: this.mails,
                bagItems: this.bagItems,
                counsellors: this.counsellors,
                mission: this.mission,
                avatars: this.avatars,
                avatarFrames: this.avatarFrames,
                checkin: this.checkin,
                commanders: this.commanders,
                formations: this.formations,
                soldiers: this.soldiers,
                shopDailyRecord: this.shopDailyRecord,
                dungeon: this.dungeon,
                soldierTechs: this.soldierTechs,
                world: this.world,
                treasureDraw: this.treasureDraw,
                arena: this.arena,
                dailyBoss: this.dailyBoss,
                strMansion: this.strMansion,
                peak: this.peak,
                slay: this.slay,
                task: this.task,
                dailyExp: this.dailyExp,
                dailyCoin: this.dailyCoin,
                recharge: this.recharge,
                announce: this.announce,
                musicSwitch: this.musicSwitch,
                soundcSwitch: this.soundcSwitch,
                pushSwitch: this.pushSwitch,
                guide: this.guide,
                hideVipSystems: this.hideVipSystems,
                peakStateData: this.peakStateData,
                useLevelDraw: this.useLevelDraw,
                drama: this.drama,
                history: this.history,
                chibi: this.chibi,
                dailyRefresh: this.dailyRefresh,
                activities: this.activities,
                qInfos: this.qInfos,
                collect: this.collect,
                guideTrigger: this.guideTrigger,
                handbook: this.handbook,
                privilege: this.privilege,
                pokedex: this.pokedex,
                treasure: this.treasure,
                unlock3Magic: this.unlock3Magic,
                unlock4Magic: this.unlock4Magic
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id)
                writer.writeUint64String(1, this.id);
            if (this.serverId)
                writer.writeUint64String(2, this.serverId);
            if (this.name)
                writer.writeString(3, this.name);
            if (this.career)
                writer.writeUint32(4, this.career);
            if (this.level)
                writer.writeUint32(5, this.level);
            if (this.vipLevel)
                writer.writeUint32(6, this.vipLevel);
            if (this.exp)
                writer.writeUint32(7, this.exp);
            if (this.diamond)
                writer.writeUint32(8, this.diamond);
            if (this.gold)
                writer.writeUint32(9, this.gold);
            if (this.physcal)
                writer.writeUint32(10, this.physcal);
            if (this.activity)
                writer.writeUint32(11, this.activity);
            if (this.commanderExpPool)
                writer.writeUint32(12, this.commanderExpPool);
            if (this.vipExp)
                writer.writeUint32(13, this.vipExp);
            if (this.skillExp)
                writer.writeUint32(14, this.skillExp);
            if (this.lastPhyscalRecoveryTime)
                writer.writeInt64String(15, this.lastPhyscalRecoveryTime);
            if (this.power)
                writer.writeUint32(16, this.power);
            if (this.treasureCoin)
                writer.writeUint32(17, this.treasureCoin);
            if (this.dramaCoin)
                writer.writeUint32(18, this.dramaCoin);
            if (this.goldenDragon)
                writer.writeUint32(22, this.goldenDragon);
            if (this.physicalCollectNum)
                writer.writeUint32(23, this.physicalCollectNum);
            if (this.arenaCoin)
                writer.writeUint32(24, this.arenaCoin);
            if (this.gameCoin)
                writer.writeUint32(25, this.gameCoin);
            if (this.privilegeCoin)
                writer.writeUint32(26, this.privilegeCoin);
            if (this.guildContributionCoin)
                writer.writeUint32(27, this.guildContributionCoin);
            if (this.msg)
                writer.writeString(28, this.msg);
            if (this.rolePaid)
                writer.writeUint32(29, this.rolePaid);
            if (this.serverType)
                writer.writeUint32(30, this.serverType);
            if (this.roleType)
                writer.writeUint32(31, this.roleType);
            if (this.lastLogout)
                writer.writeInt64String(32, this.lastLogout);
            if (this.peakCoin)
                writer.writeUint32(33, this.peakCoin);
            if (this.treasureBaseCoin)
                writer.writeUint32(34, this.treasureBaseCoin);
            if (this.treasureScore)
                writer.writeUint32(35, this.treasureScore);
            if (this.createTime)
                writer.writeInt64String(40, this.createTime);
            if (this.renameTimes)
                writer.writeUint32(41, this.renameTimes);
            if (this.avatar)
                writer.writeInt32(42, this.avatar);
            if (this.avatarFrame)
                writer.writeInt32(43, this.avatarFrame);
            if (this.guildLoginInfo)
                writer.writeMessage(44, this.guildLoginInfo, (item: GuildLoginInfo) => item.serialize(writer));
            if (this.usedFunction)
                writer.writeRepeatedEnum(45, this.usedFunction);
            if (this.mails)
                writer.writeRepeatedMessage(59, this.mails, (item: common.Mail) => item.serialize(writer));
            if (this.bagItems)
                writer.writeRepeatedMessage(60, this.bagItems, (item: common.Item) => item.serialize(writer));
            if (this.counsellors)
                writer.writeRepeatedMessage(61, this.counsellors, (item: common.Counsellor) => item.serialize(writer));
            if (this.mission)
                writer.writeMessage(62, this.mission, (item: Mission) => item.serialize(writer));
            if (this.avatars)
                writer.writeRepeatedInt32(63, this.avatars);
            if (this.avatarFrames)
                writer.writeRepeatedInt32(64, this.avatarFrames);
            if (this.checkin)
                writer.writeMessage(65, this.checkin, (item: CheckinInfo) => item.serialize(writer));
            if (this.commanders)
                writer.writeRepeatedMessage(66, this.commanders, (item: common.Commander) => item.serialize(writer));
            if (this.formations)
                writer.writeRepeatedMessage(67, this.formations, (item: common.Formation) => item.serialize(writer));
            if (this.soldiers)
                writer.writeRepeatedMessage(68, this.soldiers, (item: common.Soldier) => item.serialize(writer));
            if (this.shopDailyRecord)
                writer.writeMessage(69, this.shopDailyRecord, (item: common.ShopDailyRecord) => item.serialize(writer));
            if (this.dungeon)
                writer.writeMessage(70, this.dungeon, (item: Dungeon) => item.serialize(writer));
            if (this.soldierTechs)
                writer.writeMessage(71, this.soldierTechs, (item: SoldierTechs) => item.serialize(writer));
            if (this.world)
                writer.writeMessage(72, this.world, (item: World) => item.serialize(writer));
            if (this.treasureDraw)
                writer.writeMessage(73, this.treasureDraw, (item: TreasureDraw) => item.serialize(writer));
            if (this.arena)
                writer.writeMessage(77, this.arena, (item: Arena) => item.serialize(writer));
            if (this.dailyBoss)
                writer.writeMessage(79, this.dailyBoss, (item: common.DailyBoss) => item.serialize(writer));
            if (this.strMansion)
                writer.writeMessage(80, this.strMansion, (item: common.StrMansion) => item.serialize(writer));
            if (this.peak)
                writer.writeMessage(81, this.peak, (item: Peak) => item.serialize(writer));
            if (this.slay)
                writer.writeMessage(82, this.slay, (item: SlayBaseData) => item.serialize(writer));
            if (this.task)
                writer.writeMessage(85, this.task, (item: Task) => item.serialize(writer));
            if (this.dailyExp)
                writer.writeMessage(86, this.dailyExp, (item: common.DailyExp) => item.serialize(writer));
            if (this.dailyCoin)
                writer.writeMessage(87, this.dailyCoin, (item: common.DailyCoin) => item.serialize(writer));
            if (this.recharge)
                writer.writeMessage(88, this.recharge, (item: Recharge) => item.serialize(writer));
            if (this.announce)
                writer.writeMessage(89, this.announce, (item: common.Announce) => item.serialize(writer));
            if (this.musicSwitch)
                writer.writeBool(90, this.musicSwitch);
            if (this.soundcSwitch)
                writer.writeBool(91, this.soundcSwitch);
            if (this.pushSwitch)
                writer.writeBool(92, this.pushSwitch);
            if (this.guide)
                writer.writeInt32(93, this.guide);
            if (this.hideVipSystems)
                writer.writeRepeatedInt32(94, this.hideVipSystems);
            if (this.peakStateData)
                writer.writeMessage(95, this.peakStateData, (item: common.PeakStateData) => item.serialize(writer));
            if (this.useLevelDraw)
                writer.writeBool(96, this.useLevelDraw);
            if (this.drama)
                writer.writeMessage(97, this.drama, (item: Drama) => item.serialize(writer));
            if (this.history)
                writer.writeMessage(98, this.history, (item: History) => item.serialize(writer));
            if (this.chibi)
                writer.writeMessage(99, this.chibi, (item: Chibi) => item.serialize(writer));
            if (this.dailyRefresh)
                writer.writeMessage(100, this.dailyRefresh, (item: DailyRefresh) => item.serialize(writer));
            if (this.activities)
                writer.writeMessage(101, this.activities, (item: Activity) => item.serialize(writer));
            if (this.qInfos)
                writer.writeRepeatedMessage(102, this.qInfos, (item: common.QuestionnaireInfo) => item.serialize(writer));
            if (this.collect)
                writer.writeMessage(103, this.collect, (item: common.Collect) => item.serialize(writer));
            if (this.guideTrigger)
                writer.writeRepeatedString(104, this.guideTrigger);
            if (this.handbook)
                writer.writeMessage(110, this.handbook, (item: common.HandBook) => item.serialize(writer));
            if (this.privilege)
                writer.writeMessage(111, this.privilege, (item: common.PrivilegeData) => item.serialize(writer));
            if (this.pokedex)
                writer.writeMessage(112, this.pokedex, (item: common.Pokedex) => item.serialize(writer));
            if (this.treasure)
                writer.writeMessage(113, this.treasure, (item: Treasure) => item.serialize(writer));
            if (this.unlock3Magic)
                writer.writeInt32(114, this.unlock3Magic);
            if (this.unlock4Magic)
                writer.writeInt32(115, this.unlock4Magic);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): User {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new User();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        message.serverId = reader.readUint64String();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        message.career = reader.readUint32();
                        break;
                    case 5:
                        message.level = reader.readUint32();
                        break;
                    case 6:
                        message.vipLevel = reader.readUint32();
                        break;
                    case 7:
                        message.exp = reader.readUint32();
                        break;
                    case 8:
                        message.diamond = reader.readUint32();
                        break;
                    case 9:
                        message.gold = reader.readUint32();
                        break;
                    case 10:
                        message.physcal = reader.readUint32();
                        break;
                    case 11:
                        message.activity = reader.readUint32();
                        break;
                    case 12:
                        message.commanderExpPool = reader.readUint32();
                        break;
                    case 13:
                        message.vipExp = reader.readUint32();
                        break;
                    case 14:
                        message.skillExp = reader.readUint32();
                        break;
                    case 15:
                        message.lastPhyscalRecoveryTime = reader.readInt64String();
                        break;
                    case 16:
                        message.power = reader.readUint32();
                        break;
                    case 17:
                        message.treasureCoin = reader.readUint32();
                        break;
                    case 18:
                        message.dramaCoin = reader.readUint32();
                        break;
                    case 22:
                        message.goldenDragon = reader.readUint32();
                        break;
                    case 23:
                        message.physicalCollectNum = reader.readUint32();
                        break;
                    case 24:
                        message.arenaCoin = reader.readUint32();
                        break;
                    case 25:
                        message.gameCoin = reader.readUint32();
                        break;
                    case 26:
                        message.privilegeCoin = reader.readUint32();
                        break;
                    case 27:
                        message.guildContributionCoin = reader.readUint32();
                        break;
                    case 28:
                        message.msg = reader.readString();
                        break;
                    case 29:
                        message.rolePaid = reader.readUint32();
                        break;
                    case 30:
                        message.serverType = reader.readUint32();
                        break;
                    case 31:
                        message.roleType = reader.readUint32();
                        break;
                    case 32:
                        message.lastLogout = reader.readInt64String();
                        break;
                    case 33:
                        message.peakCoin = reader.readUint32();
                        break;
                    case 34:
                        message.treasureBaseCoin = reader.readUint32();
                        break;
                    case 35:
                        message.treasureScore = reader.readUint32();
                        break;
                    case 40:
                        message.createTime = reader.readInt64String();
                        break;
                    case 41:
                        message.renameTimes = reader.readUint32();
                        break;
                    case 42:
                        message.avatar = reader.readInt32();
                        break;
                    case 43:
                        message.avatarFrame = reader.readInt32();
                        break;
                    case 44:
                        reader.readMessage(message.guildLoginInfo, () => message.guildLoginInfo = GuildLoginInfo.deserialize(reader));
                        break;
                    case 45:
                        message.usedFunction.push(reader.readEnum());
                        break;
                    case 59:
                        reader.readMessage(message.mails, () => pb_1.Message.addToRepeatedWrapperField(message, 59, common.Mail.deserialize(reader), common.Mail));
                        break;
                    case 60:
                        reader.readMessage(message.bagItems, () => pb_1.Message.addToRepeatedWrapperField(message, 60, common.Item.deserialize(reader), common.Item));
                        break;
                    case 61:
                        reader.readMessage(message.counsellors, () => pb_1.Message.addToRepeatedWrapperField(message, 61, common.Counsellor.deserialize(reader), common.Counsellor));
                        break;
                    case 62:
                        reader.readMessage(message.mission, () => message.mission = Mission.deserialize(reader));
                        break;
                    case 63:
                        message.avatars.push(reader.readInt32());
                        break;
                    case 64:
                        message.avatarFrames.push(reader.readInt32());
                        break;
                    case 65:
                        reader.readMessage(message.checkin, () => message.checkin = CheckinInfo.deserialize(reader));
                        break;
                    case 66:
                        reader.readMessage(message.commanders, () => pb_1.Message.addToRepeatedWrapperField(message, 66, common.Commander.deserialize(reader), common.Commander));
                        break;
                    case 67:
                        reader.readMessage(message.formations, () => pb_1.Message.addToRepeatedWrapperField(message, 67, common.Formation.deserialize(reader), common.Formation));
                        break;
                    case 68:
                        reader.readMessage(message.soldiers, () => pb_1.Message.addToRepeatedWrapperField(message, 68, common.Soldier.deserialize(reader), common.Soldier));
                        break;
                    case 69:
                        reader.readMessage(message.shopDailyRecord, () => message.shopDailyRecord = common.ShopDailyRecord.deserialize(reader));
                        break;
                    case 70:
                        reader.readMessage(message.dungeon, () => message.dungeon = Dungeon.deserialize(reader));
                        break;
                    case 71:
                        reader.readMessage(message.soldierTechs, () => message.soldierTechs = SoldierTechs.deserialize(reader));
                        break;
                    case 72:
                        reader.readMessage(message.world, () => message.world = World.deserialize(reader));
                        break;
                    case 73:
                        reader.readMessage(message.treasureDraw, () => message.treasureDraw = TreasureDraw.deserialize(reader));
                        break;
                    case 77:
                        reader.readMessage(message.arena, () => message.arena = Arena.deserialize(reader));
                        break;
                    case 79:
                        reader.readMessage(message.dailyBoss, () => message.dailyBoss = common.DailyBoss.deserialize(reader));
                        break;
                    case 80:
                        reader.readMessage(message.strMansion, () => message.strMansion = common.StrMansion.deserialize(reader));
                        break;
                    case 81:
                        reader.readMessage(message.peak, () => message.peak = Peak.deserialize(reader));
                        break;
                    case 82:
                        reader.readMessage(message.slay, () => message.slay = SlayBaseData.deserialize(reader));
                        break;
                    case 85:
                        reader.readMessage(message.task, () => message.task = Task.deserialize(reader));
                        break;
                    case 86:
                        reader.readMessage(message.dailyExp, () => message.dailyExp = common.DailyExp.deserialize(reader));
                        break;
                    case 87:
                        reader.readMessage(message.dailyCoin, () => message.dailyCoin = common.DailyCoin.deserialize(reader));
                        break;
                    case 88:
                        reader.readMessage(message.recharge, () => message.recharge = Recharge.deserialize(reader));
                        break;
                    case 89:
                        reader.readMessage(message.announce, () => message.announce = common.Announce.deserialize(reader));
                        break;
                    case 90:
                        message.musicSwitch = reader.readBool();
                        break;
                    case 91:
                        message.soundcSwitch = reader.readBool();
                        break;
                    case 92:
                        message.pushSwitch = reader.readBool();
                        break;
                    case 93:
                        message.guide = reader.readInt32();
                        break;
                    case 94:
                        message.hideVipSystems.push(reader.readInt32());
                        break;
                    case 95:
                        reader.readMessage(message.peakStateData, () => message.peakStateData = common.PeakStateData.deserialize(reader));
                        break;
                    case 96:
                        message.useLevelDraw = reader.readBool();
                        break;
                    case 97:
                        reader.readMessage(message.drama, () => message.drama = Drama.deserialize(reader));
                        break;
                    case 98:
                        reader.readMessage(message.history, () => message.history = History.deserialize(reader));
                        break;
                    case 99:
                        reader.readMessage(message.chibi, () => message.chibi = Chibi.deserialize(reader));
                        break;
                    case 100:
                        reader.readMessage(message.dailyRefresh, () => message.dailyRefresh = DailyRefresh.deserialize(reader));
                        break;
                    case 101:
                        reader.readMessage(message.activities, () => message.activities = Activity.deserialize(reader));
                        break;
                    case 102:
                        reader.readMessage(message.qInfos, () => pb_1.Message.addToRepeatedWrapperField(message, 102, common.QuestionnaireInfo.deserialize(reader), common.QuestionnaireInfo));
                        break;
                    case 103:
                        reader.readMessage(message.collect, () => message.collect = common.Collect.deserialize(reader));
                        break;
                    case 104:
                        pb_1.Message.addToRepeatedField(message, 104, reader.readString());
                        break;
                    case 110:
                        reader.readMessage(message.handbook, () => message.handbook = common.HandBook.deserialize(reader));
                        break;
                    case 111:
                        reader.readMessage(message.privilege, () => message.privilege = common.PrivilegeData.deserialize(reader));
                        break;
                    case 112:
                        reader.readMessage(message.pokedex, () => message.pokedex = common.Pokedex.deserialize(reader));
                        break;
                    case 113:
                        reader.readMessage(message.treasure, () => message.treasure = Treasure.deserialize(reader));
                        break;
                    case 114:
                        message.unlock3Magic = reader.readInt32();
                        break;
                    case 115:
                        message.unlock4Magic = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class DailyRefresh extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get normalDrawFreeTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set normalDrawFreeTimes(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get diamondDrawFreeTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set diamondDrawFreeTimes(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get diamondDrawHalfPriceTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as number | undefined;
        }
        set diamondDrawHalfPriceTimes(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get diamondDrawTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set diamondDrawTimes(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                normalDrawFreeTimes: this.normalDrawFreeTimes,
                diamondDrawFreeTimes: this.diamondDrawFreeTimes,
                diamondDrawHalfPriceTimes: this.diamondDrawHalfPriceTimes,
                diamondDrawTimes: this.diamondDrawTimes
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.normalDrawFreeTimes)
                writer.writeUint32(1, this.normalDrawFreeTimes);
            if (this.diamondDrawFreeTimes)
                writer.writeUint32(2, this.diamondDrawFreeTimes);
            if (this.diamondDrawHalfPriceTimes)
                writer.writeUint32(3, this.diamondDrawHalfPriceTimes);
            if (this.diamondDrawTimes)
                writer.writeUint32(4, this.diamondDrawTimes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DailyRefresh {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new DailyRefresh();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.normalDrawFreeTimes = reader.readUint32();
                        break;
                    case 2:
                        message.diamondDrawFreeTimes = reader.readUint32();
                        break;
                    case 3:
                        message.diamondDrawHalfPriceTimes = reader.readUint32();
                        break;
                    case 4:
                        message.diamondDrawTimes = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class DailyZeroRefresh extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get hotCounsellor(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set hotCounsellor(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        toObject() {
            return {
                hotCounsellor: this.hotCounsellor
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hotCounsellor)
                writer.writeInt32(1, this.hotCounsellor);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DailyZeroRefresh {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new DailyZeroRefresh();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.hotCounsellor = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SoldierTechs extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [1, 2, 3], null);
        }
        get techs(): common.SoldierTech[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.SoldierTech, 1) as common.SoldierTech[];
        }
        set techs(value: common.SoldierTech[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get data(): SoldierTechData[] {
            return pb_1.Message.getRepeatedWrapperField(this, SoldierTechData, 2) as SoldierTechData[];
        }
        set data(value: SoldierTechData[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get rewardIds(): number[] {
            return pb_1.Message.getField(this, 3) as number[];
        }
        set rewardIds(value: number[]) {
            pb_1.Message.setField(this, 3, value);
        }
        toObject() {
            return {
                techs: this.techs,
                data: this.data,
                rewardIds: this.rewardIds
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.techs)
                writer.writeRepeatedMessage(1, this.techs, (item: common.SoldierTech) => item.serialize(writer));
            if (this.data)
                writer.writeRepeatedMessage(2, this.data, (item: SoldierTechData) => item.serialize(writer));
            if (this.rewardIds)
                writer.writeRepeatedInt32(3, this.rewardIds);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SoldierTechs {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SoldierTechs();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.techs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, common.SoldierTech.deserialize(reader), common.SoldierTech));
                        break;
                    case 2:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 2, SoldierTechData.deserialize(reader), SoldierTechData));
                        break;
                    case 3:
                        message.rewardIds.push(reader.readInt32());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SoldierTechData extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get id(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get power(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set power(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        toObject() {
            return {
                id: this.id,
                power: this.power
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id)
                writer.writeInt32(1, this.id);
            if (this.power)
                writer.writeUint32(2, this.power);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SoldierTechData {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SoldierTechData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.power = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class TreasureDraw extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get totalDrawCount(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set totalDrawCount(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get todayBuyItemCount(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set todayBuyItemCount(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get todayFreeDrawCount(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as number | undefined;
        }
        set todayFreeDrawCount(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get showTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set showTimes(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                totalDrawCount: this.totalDrawCount,
                todayBuyItemCount: this.todayBuyItemCount,
                todayFreeDrawCount: this.todayFreeDrawCount,
                showTimes: this.showTimes
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.totalDrawCount)
                writer.writeUint32(1, this.totalDrawCount);
            if (this.todayBuyItemCount)
                writer.writeUint32(2, this.todayBuyItemCount);
            if (this.todayFreeDrawCount)
                writer.writeUint32(3, this.todayFreeDrawCount);
            if (this.showTimes)
                writer.writeUint32(5, this.showTimes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TreasureDraw {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new TreasureDraw();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.totalDrawCount = reader.readUint32();
                        break;
                    case 2:
                        message.todayBuyItemCount = reader.readUint32();
                        break;
                    case 3:
                        message.todayFreeDrawCount = reader.readUint32();
                        break;
                    case 5:
                        message.showTimes = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class C_PlayerSimpleData extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ids(): string[] {
            return pb_1.Message.getField(this, 4) as string[];
        }
        set ids(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                ids: this.ids
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.ids)
                writer.writeRepeatedUint64String(4, this.ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_PlayerSimpleData {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new C_PlayerSimpleData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.ids.push(reader.readUint64String());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class S_PlayerSimpleData extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [3], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get datas(): common.PlayerSimpleData[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.PlayerSimpleData, 3) as common.PlayerSimpleData[];
        }
        set datas(value: common.PlayerSimpleData[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 4) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                datas: this.datas,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.datas)
                writer.writeRepeatedMessage(3, this.datas, (item: common.PlayerSimpleData) => item.serialize(writer));
            if (this.result)
                writer.writeMessage(4, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_PlayerSimpleData {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new S_PlayerSimpleData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.datas, () => pb_1.Message.addToRepeatedWrapperField(message, 3, common.PlayerSimpleData.deserialize(reader), common.PlayerSimpleData));
                        break;
                    case 4:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class C_PlayerSimpleDataEx extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get id(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get formationId(): common.FormationType | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as common.FormationType | undefined;
        }
        set formationId(value: common.FormationType) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                id: this.id,
                formationId: this.formationId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.id)
                writer.writeUint64String(4, this.id);
            if (this.formationId)
                writer.writeEnum(5, this.formationId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_PlayerSimpleDataEx {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new C_PlayerSimpleDataEx();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.id = reader.readUint64String();
                        break;
                    case 5:
                        message.formationId = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class S_PlayerSimpleDataEx extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get data(): common.PlayerSimpleDataEx | undefined {
            return pb_1.Message.getWrapperField(this, common.PlayerSimpleDataEx, 4) as common.PlayerSimpleDataEx | undefined;
        }
        set data(value: common.PlayerSimpleDataEx) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                data: this.data
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.data)
                writer.writeMessage(4, this.data, (item: common.PlayerSimpleDataEx) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_PlayerSimpleDataEx {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new S_PlayerSimpleDataEx();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.data, () => message.data = common.PlayerSimpleDataEx.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class C_PlayerTargetData extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get id(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get formationId(): common.FormationType | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as common.FormationType | undefined;
        }
        set formationId(value: common.FormationType) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                id: this.id,
                formationId: this.formationId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.id)
                writer.writeUint64String(4, this.id);
            if (this.formationId)
                writer.writeEnum(5, this.formationId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_PlayerTargetData {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new C_PlayerTargetData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.id = reader.readUint64String();
                        break;
                    case 5:
                        message.formationId = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class PlayerTargetData extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [20, 22, 23, 24, 27, 29], null);
        }
        get id(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as string | undefined;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as string | undefined;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get serverId(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set serverId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get level(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set level(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get career(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set career(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get avatar(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as number | undefined;
        }
        set avatar(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get avatarFrame(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 7, undefined) as number | undefined;
        }
        set avatarFrame(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get msg(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 8, undefined) as string | undefined;
        }
        set msg(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get vip(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 9, undefined) as number | undefined;
        }
        set vip(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get power(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 10, undefined) as number | undefined;
        }
        set power(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get lastLogout(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 11, undefined) as string | undefined;
        }
        set lastLogout(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get guildId(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 12, undefined) as string | undefined;
        }
        set guildId(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get guildName(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 13, undefined) as string | undefined;
        }
        set guildName(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get counsellorId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 14, undefined) as number | undefined;
        }
        set counsellorId(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get lastLogin(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 15, undefined) as string | undefined;
        }
        set lastLogin(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get arenaRank(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 16, undefined) as number | undefined;
        }
        set arenaRank(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        get arenaDefencePower(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 17, undefined) as number | undefined;
        }
        set arenaDefencePower(value: number) {
            pb_1.Message.setField(this, 17, value);
        }
        get praise(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 18, undefined) as number | undefined;
        }
        set praise(value: number) {
            pb_1.Message.setField(this, 18, value);
        }
        get hasPraise(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 19, undefined) as boolean | undefined;
        }
        set hasPraise(value: boolean) {
            pb_1.Message.setField(this, 19, value);
        }
        get commanders(): common.Commander[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Commander, 20) as common.Commander[];
        }
        set commanders(value: common.Commander[]) {
            pb_1.Message.setRepeatedWrapperField(this, 20, value);
        }
        get formation(): common.Formation | undefined {
            return pb_1.Message.getWrapperField(this, common.Formation, 21) as common.Formation | undefined;
        }
        set formation(value: common.Formation) {
            pb_1.Message.setWrapperField(this, 21, value);
        }
        get counsellors(): common.Counsellor[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Counsellor, 22) as common.Counsellor[];
        }
        set counsellors(value: common.Counsellor[]) {
            pb_1.Message.setRepeatedWrapperField(this, 22, value);
        }
        get strTalents(): common.StrTalent[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.StrTalent, 23) as common.StrTalent[];
        }
        set strTalents(value: common.StrTalent[]) {
            pb_1.Message.setRepeatedWrapperField(this, 23, value);
        }
        get treasures(): common.Treasure[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Treasure, 24) as common.Treasure[];
        }
        set treasures(value: common.Treasure[]) {
            pb_1.Message.setRepeatedWrapperField(this, 24, value);
        }
        get treasureFates(): common.TreasureFatesInfo | undefined {
            return pb_1.Message.getWrapperField(this, common.TreasureFatesInfo, 25) as common.TreasureFatesInfo | undefined;
        }
        set treasureFates(value: common.TreasureFatesInfo) {
            pb_1.Message.setWrapperField(this, 25, value);
        }
        get pokedexInfo(): common.PokedexBattleInfo | undefined {
            return pb_1.Message.getWrapperField(this, common.PokedexBattleInfo, 26) as common.PokedexBattleInfo | undefined;
        }
        set pokedexInfo(value: common.PokedexBattleInfo) {
            pb_1.Message.setWrapperField(this, 26, value);
        }
        get soldierTech(): common.SoldierTech[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.SoldierTech, 27) as common.SoldierTech[];
        }
        set soldierTech(value: common.SoldierTech[]) {
            pb_1.Message.setRepeatedWrapperField(this, 27, value);
        }
        get peakRank(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 28, undefined) as number | undefined;
        }
        set peakRank(value: number) {
            pb_1.Message.setField(this, 28, value);
        }
        get hideVipSystems(): number[] {
            return pb_1.Message.getField(this, 29) as number[];
        }
        set hideVipSystems(value: number[]) {
            pb_1.Message.setField(this, 29, value);
        }
        get collect(): common.Collect | undefined {
            return pb_1.Message.getWrapperField(this, common.Collect, 30) as common.Collect | undefined;
        }
        set collect(value: common.Collect) {
            pb_1.Message.setWrapperField(this, 30, value);
        }
        toObject() {
            return {
                id: this.id,
                name: this.name,
                serverId: this.serverId,
                level: this.level,
                career: this.career,
                avatar: this.avatar,
                avatarFrame: this.avatarFrame,
                msg: this.msg,
                vip: this.vip,
                power: this.power,
                lastLogout: this.lastLogout,
                guildId: this.guildId,
                guildName: this.guildName,
                counsellorId: this.counsellorId,
                lastLogin: this.lastLogin,
                arenaRank: this.arenaRank,
                arenaDefencePower: this.arenaDefencePower,
                praise: this.praise,
                hasPraise: this.hasPraise,
                commanders: this.commanders,
                formation: this.formation,
                counsellors: this.counsellors,
                strTalents: this.strTalents,
                treasures: this.treasures,
                treasureFates: this.treasureFates,
                pokedexInfo: this.pokedexInfo,
                soldierTech: this.soldierTech,
                peakRank: this.peakRank,
                hideVipSystems: this.hideVipSystems,
                collect: this.collect
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id)
                writer.writeUint64String(1, this.id);
            if (this.name)
                writer.writeString(2, this.name);
            if (this.serverId)
                writer.writeUint64String(3, this.serverId);
            if (this.level)
                writer.writeUint32(4, this.level);
            if (this.career)
                writer.writeUint32(5, this.career);
            if (this.avatar)
                writer.writeInt32(6, this.avatar);
            if (this.avatarFrame)
                writer.writeInt32(7, this.avatarFrame);
            if (this.msg)
                writer.writeString(8, this.msg);
            if (this.vip)
                writer.writeUint32(9, this.vip);
            if (this.power)
                writer.writeUint32(10, this.power);
            if (this.lastLogout)
                writer.writeInt64String(11, this.lastLogout);
            if (this.guildId)
                writer.writeUint64String(12, this.guildId);
            if (this.guildName)
                writer.writeString(13, this.guildName);
            if (this.counsellorId)
                writer.writeInt32(14, this.counsellorId);
            if (this.lastLogin)
                writer.writeInt64String(15, this.lastLogin);
            if (this.arenaRank)
                writer.writeUint32(16, this.arenaRank);
            if (this.arenaDefencePower)
                writer.writeUint32(17, this.arenaDefencePower);
            if (this.praise)
                writer.writeUint32(18, this.praise);
            if (this.hasPraise)
                writer.writeBool(19, this.hasPraise);
            if (this.commanders)
                writer.writeRepeatedMessage(20, this.commanders, (item: common.Commander) => item.serialize(writer));
            if (this.formation)
                writer.writeMessage(21, this.formation, (item: common.Formation) => item.serialize(writer));
            if (this.counsellors)
                writer.writeRepeatedMessage(22, this.counsellors, (item: common.Counsellor) => item.serialize(writer));
            if (this.strTalents)
                writer.writeRepeatedMessage(23, this.strTalents, (item: common.StrTalent) => item.serialize(writer));
            if (this.treasures)
                writer.writeRepeatedMessage(24, this.treasures, (item: common.Treasure) => item.serialize(writer));
            if (this.treasureFates)
                writer.writeMessage(25, this.treasureFates, (item: common.TreasureFatesInfo) => item.serialize(writer));
            if (this.pokedexInfo)
                writer.writeMessage(26, this.pokedexInfo, (item: common.PokedexBattleInfo) => item.serialize(writer));
            if (this.soldierTech)
                writer.writeRepeatedMessage(27, this.soldierTech, (item: common.SoldierTech) => item.serialize(writer));
            if (this.peakRank)
                writer.writeUint32(28, this.peakRank);
            if (this.hideVipSystems)
                writer.writeRepeatedInt32(29, this.hideVipSystems);
            if (this.collect)
                writer.writeMessage(30, this.collect, (item: common.Collect) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerTargetData {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new PlayerTargetData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.serverId = reader.readUint64String();
                        break;
                    case 4:
                        message.level = reader.readUint32();
                        break;
                    case 5:
                        message.career = reader.readUint32();
                        break;
                    case 6:
                        message.avatar = reader.readInt32();
                        break;
                    case 7:
                        message.avatarFrame = reader.readInt32();
                        break;
                    case 8:
                        message.msg = reader.readString();
                        break;
                    case 9:
                        message.vip = reader.readUint32();
                        break;
                    case 10:
                        message.power = reader.readUint32();
                        break;
                    case 11:
                        message.lastLogout = reader.readInt64String();
                        break;
                    case 12:
                        message.guildId = reader.readUint64String();
                        break;
                    case 13:
                        message.guildName = reader.readString();
                        break;
                    case 14:
                        message.counsellorId = reader.readInt32();
                        break;
                    case 15:
                        message.lastLogin = reader.readInt64String();
                        break;
                    case 16:
                        message.arenaRank = reader.readUint32();
                        break;
                    case 17:
                        message.arenaDefencePower = reader.readUint32();
                        break;
                    case 18:
                        message.praise = reader.readUint32();
                        break;
                    case 19:
                        message.hasPraise = reader.readBool();
                        break;
                    case 20:
                        reader.readMessage(message.commanders, () => pb_1.Message.addToRepeatedWrapperField(message, 20, common.Commander.deserialize(reader), common.Commander));
                        break;
                    case 21:
                        reader.readMessage(message.formation, () => message.formation = common.Formation.deserialize(reader));
                        break;
                    case 22:
                        reader.readMessage(message.counsellors, () => pb_1.Message.addToRepeatedWrapperField(message, 22, common.Counsellor.deserialize(reader), common.Counsellor));
                        break;
                    case 23:
                        reader.readMessage(message.strTalents, () => pb_1.Message.addToRepeatedWrapperField(message, 23, common.StrTalent.deserialize(reader), common.StrTalent));
                        break;
                    case 24:
                        reader.readMessage(message.treasures, () => pb_1.Message.addToRepeatedWrapperField(message, 24, common.Treasure.deserialize(reader), common.Treasure));
                        break;
                    case 25:
                        reader.readMessage(message.treasureFates, () => message.treasureFates = common.TreasureFatesInfo.deserialize(reader));
                        break;
                    case 26:
                        reader.readMessage(message.pokedexInfo, () => message.pokedexInfo = common.PokedexBattleInfo.deserialize(reader));
                        break;
                    case 27:
                        reader.readMessage(message.soldierTech, () => pb_1.Message.addToRepeatedWrapperField(message, 27, common.SoldierTech.deserialize(reader), common.SoldierTech));
                        break;
                    case 28:
                        message.peakRank = reader.readUint32();
                        break;
                    case 29:
                        message.hideVipSystems.push(reader.readInt32());
                        break;
                    case 30:
                        reader.readMessage(message.collect, () => message.collect = common.Collect.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class S_PlayerTargetData extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get data(): PlayerTargetData | undefined {
            return pb_1.Message.getWrapperField(this, PlayerTargetData, 4) as PlayerTargetData | undefined;
        }
        set data(value: PlayerTargetData) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                data: this.data
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.data)
                writer.writeMessage(4, this.data, (item: PlayerTargetData) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_PlayerTargetData {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new S_PlayerTargetData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.data, () => message.data = PlayerTargetData.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class S_SyncPlayerData extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [1], null);
        }
        get DataList(): PlayerProperty[] {
            return pb_1.Message.getRepeatedWrapperField(this, PlayerProperty, 1) as PlayerProperty[];
        }
        set DataList(value: PlayerProperty[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        toObject() {
            return {
                DataList: this.DataList
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.DataList)
                writer.writeRepeatedMessage(1, this.DataList, (item: PlayerProperty) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_SyncPlayerData {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new S_SyncPlayerData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.DataList, () => pb_1.Message.addToRepeatedWrapperField(message, 1, PlayerProperty.deserialize(reader), PlayerProperty));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_PlayerGameStateData extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get peakStateData(): common.PeakStateData | undefined {
            return pb_1.Message.getWrapperField(this, common.PeakStateData, 4) as common.PeakStateData | undefined;
        }
        set peakStateData(value: common.PeakStateData) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                peakStateData: this.peakStateData
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.peakStateData)
                writer.writeMessage(4, this.peakStateData, (item: common.PeakStateData) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_PlayerGameStateData {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_PlayerGameStateData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.peakStateData, () => message.peakStateData = common.PeakStateData.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_Praise extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get uid(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set uid(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                uid: this.uid
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.uid)
                writer.writeUint64String(4, this.uid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_Praise {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_Praise();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.uid = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_Praise extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get count(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                count: this.count
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.count)
                writer.writeUint32(4, this.count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_Praise {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_Praise();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.count = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_GetPraise extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_GetPraise {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_GetPraise();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_GetPraise extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get count(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                count: this.count
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.count)
                writer.writeUint32(4, this.count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_GetPraise {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_GetPraise();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.count = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_GuideTrigger extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get guideTrigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set guideTrigger(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                guideTrigger: this.guideTrigger
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.guideTrigger)
                writer.writeString(4, this.guideTrigger);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_GuideTrigger {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_GuideTrigger();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.guideTrigger = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_UseFunction extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get usedFunction(): common.UsedFunction | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as common.UsedFunction | undefined;
        }
        set usedFunction(value: common.UsedFunction) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                usedFunction: this.usedFunction
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.usedFunction)
                writer.writeEnum(4, this.usedFunction);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_UseFunction {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_UseFunction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.usedFunction = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_SetDeclaration extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get declaration(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set declaration(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                declaration: this.declaration
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.declaration)
                writer.writeString(4, this.declaration);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_SetDeclaration {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_SetDeclaration();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.declaration = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_DailyRefresh extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get dailyRefresh(): DailyRefresh | undefined {
            return pb_1.Message.getWrapperField(this, DailyRefresh, 4) as DailyRefresh | undefined;
        }
        set dailyRefresh(value: DailyRefresh) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                dailyRefresh: this.dailyRefresh
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.dailyRefresh)
                writer.writeMessage(4, this.dailyRefresh, (item: DailyRefresh) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_DailyRefresh {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_DailyRefresh();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.dailyRefresh, () => message.dailyRefresh = DailyRefresh.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_DailyZeroRefresh extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get dailyRefresh(): DailyZeroRefresh | undefined {
            return pb_1.Message.getWrapperField(this, DailyZeroRefresh, 4) as DailyZeroRefresh | undefined;
        }
        set dailyRefresh(value: DailyZeroRefresh) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                dailyRefresh: this.dailyRefresh
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.dailyRefresh)
                writer.writeMessage(4, this.dailyRefresh, (item: DailyZeroRefresh) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_DailyZeroRefresh {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_DailyZeroRefresh();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.dailyRefresh, () => message.dailyRefresh = DailyZeroRefresh.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_PeakState extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get peakStateData(): common.PeakStateData | undefined {
            return pb_1.Message.getWrapperField(this, common.PeakStateData, 4) as common.PeakStateData | undefined;
        }
        set peakStateData(value: common.PeakStateData) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                peakStateData: this.peakStateData
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.peakStateData)
                writer.writeMessage(4, this.peakStateData, (item: common.PeakStateData) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_PeakState {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_PeakState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.peakStateData, () => message.peakStateData = common.PeakStateData.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_BagData extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get items(): common.Item[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Item, 4) as common.Item[];
        }
        set items(value: common.Item[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                items: this.items
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.items)
                writer.writeRepeatedMessage(4, this.items, (item: common.Item) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_BagData {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_BagData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 4, common.Item.deserialize(reader), common.Item));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_UseItem extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [6], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get itemId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set itemId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get itemCount(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set itemCount(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get selectIndexes(): number[] {
            return pb_1.Message.getField(this, 6) as number[];
        }
        set selectIndexes(value: number[]) {
            pb_1.Message.setField(this, 6, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                itemId: this.itemId,
                itemCount: this.itemCount,
                selectIndexes: this.selectIndexes
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.itemId)
                writer.writeInt32(4, this.itemId);
            if (this.itemCount)
                writer.writeUint32(5, this.itemCount);
            if (this.selectIndexes)
                writer.writeRepeatedUint32(6, this.selectIndexes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_UseItem {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_UseItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.itemId = reader.readInt32();
                        break;
                    case 5:
                        message.itemCount = reader.readUint32();
                        break;
                    case 6:
                        message.selectIndexes.push(reader.readUint32());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_UseItem extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_UseItem {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_UseItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_DecomposeItem extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get itemId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set itemId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get itemCount(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set itemCount(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                itemId: this.itemId,
                itemCount: this.itemCount
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.itemId)
                writer.writeInt32(4, this.itemId);
            if (this.itemCount)
                writer.writeUint32(5, this.itemCount);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_DecomposeItem {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_DecomposeItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.itemId = reader.readInt32();
                        break;
                    case 5:
                        message.itemCount = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_DecomposeItem extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_DecomposeItem {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_DecomposeItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_PushCache extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get puSn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set puSn(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                puSn: this.puSn
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.puSn)
                writer.writeInt32(4, this.puSn);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_PushCache {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_PushCache();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.puSn = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_PushCache extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get user(): User | undefined {
            return pb_1.Message.getWrapperField(this, User, 4) as User | undefined;
        }
        set user(value: User) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                user: this.user
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.user)
                writer.writeMessage(4, this.user, (item: User) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_PushCache {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_PushCache();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_MailId extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get mailId(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set mailId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                mailId: this.mailId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.mailId)
                writer.writeUint64String(4, this.mailId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_MailId {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_MailId();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.mailId = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_LoadMails extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get mails(): common.Mail[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Mail, 4) as common.Mail[];
        }
        set mails(value: common.Mail[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                mails: this.mails
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.mails)
                writer.writeRepeatedMessage(4, this.mails, (item: common.Mail) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_LoadMails {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_LoadMails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.mails, () => pb_1.Message.addToRepeatedWrapperField(message, 4, common.Mail.deserialize(reader), common.Mail));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_ReadMail extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get mail(): common.Mail | undefined {
            return pb_1.Message.getWrapperField(this, common.Mail, 4) as common.Mail | undefined;
        }
        set mail(value: common.Mail) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                mail: this.mail
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.mail)
                writer.writeMessage(4, this.mail, (item: common.Mail) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_ReadMail {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_ReadMail();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.mail, () => message.mail = common.Mail.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_FastGetMailsAttachment extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get mailIds(): string[] {
            return pb_1.Message.getField(this, 4) as string[];
        }
        set mailIds(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                mailIds: this.mailIds
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.mailIds)
                writer.writeRepeatedUint64String(4, this.mailIds);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_FastGetMailsAttachment {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_FastGetMailsAttachment();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.mailIds.push(reader.readUint64String());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_FastGetMailsAttachment extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [5], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get count(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get deletes(): string[] {
            return pb_1.Message.getField(this, 5) as string[];
        }
        set deletes(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                count: this.count,
                deletes: this.deletes
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.count)
                writer.writeUint32(4, this.count);
            if (this.deletes)
                writer.writeRepeatedUint64String(5, this.deletes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_FastGetMailsAttachment {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_FastGetMailsAttachment();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.count = reader.readUint32();
                        break;
                    case 5:
                        message.deletes.push(reader.readUint64String());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_FastDeleteMails extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get mailIds(): string[] {
            return pb_1.Message.getField(this, 4) as string[];
        }
        set mailIds(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                mailIds: this.mailIds
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.mailIds)
                writer.writeRepeatedUint64String(4, this.mailIds);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_FastDeleteMails {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_FastDeleteMails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.mailIds.push(reader.readUint64String());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_FastDeleteMails extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [6], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get count(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get deletes(): string[] {
            return pb_1.Message.getField(this, 6) as string[];
        }
        set deletes(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                count: this.count,
                deletes: this.deletes
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.count)
                writer.writeUint32(4, this.count);
            if (this.deletes)
                writer.writeRepeatedUint64String(6, this.deletes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_FastDeleteMails {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_FastDeleteMails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.count = reader.readUint32();
                        break;
                    case 6:
                        message.deletes.push(reader.readUint64String());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class S_NotifyNewMail extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [5], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get newCount(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set newCount(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get mailConditions(): common.MailCondition[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.MailCondition, 5) as common.MailCondition[];
        }
        set mailConditions(value: common.MailCondition[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                newCount: this.newCount,
                mailConditions: this.mailConditions
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.newCount)
                writer.writeUint32(4, this.newCount);
            if (this.mailConditions)
                writer.writeRepeatedMessage(5, this.mailConditions, (item: common.MailCondition) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_NotifyNewMail {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new S_NotifyNewMail();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.newCount = reader.readUint32();
                        break;
                    case 5:
                        reader.readMessage(message.mailConditions, () => pb_1.Message.addToRepeatedWrapperField(message, 5, common.MailCondition.deserialize(reader), common.MailCondition));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CheckinReplenish extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get actTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set actTimes(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get payTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set payTimes(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        toObject() {
            return {
                actTimes: this.actTimes,
                payTimes: this.payTimes
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.actTimes)
                writer.writeUint32(1, this.actTimes);
            if (this.payTimes)
                writer.writeUint32(2, this.payTimes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckinReplenish {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CheckinReplenish();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.actTimes = reader.readUint32();
                        break;
                    case 2:
                        message.payTimes = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CheckinInfo extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [2, 5], null);
        }
        get days(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set days(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get takedAward(): number[] {
            return pb_1.Message.getField(this, 2) as number[];
        }
        set takedAward(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get replenish(): CheckinReplenish | undefined {
            return pb_1.Message.getWrapperField(this, CheckinReplenish, 3) as CheckinReplenish | undefined;
        }
        set replenish(value: CheckinReplenish) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get todaySignIndex(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set todaySignIndex(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get vipReward(): number[] {
            return pb_1.Message.getField(this, 5) as number[];
        }
        set vipReward(value: number[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get usedReplenishNum(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as number | undefined;
        }
        set usedReplenishNum(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        toObject() {
            return {
                days: this.days,
                takedAward: this.takedAward,
                replenish: this.replenish,
                todaySignIndex: this.todaySignIndex,
                vipReward: this.vipReward,
                usedReplenishNum: this.usedReplenishNum
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.days)
                writer.writeUint32(1, this.days);
            if (this.takedAward)
                writer.writeRepeatedUint32(2, this.takedAward);
            if (this.replenish)
                writer.writeMessage(3, this.replenish, (item: CheckinReplenish) => item.serialize(writer));
            if (this.todaySignIndex)
                writer.writeUint32(4, this.todaySignIndex);
            if (this.vipReward)
                writer.writeRepeatedUint32(5, this.vipReward);
            if (this.usedReplenishNum)
                writer.writeUint32(6, this.usedReplenishNum);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckinInfo {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CheckinInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.days = reader.readUint32();
                        break;
                    case 2:
                        message.takedAward.push(reader.readUint32());
                        break;
                    case 3:
                        reader.readMessage(message.replenish, () => message.replenish = CheckinReplenish.deserialize(reader));
                        break;
                    case 4:
                        message.todaySignIndex = reader.readUint32();
                        break;
                    case 5:
                        message.vipReward.push(reader.readUint32());
                        break;
                    case 6:
                        message.usedReplenishNum = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_CheckinRet extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get info(): CheckinInfo | undefined {
            return pb_1.Message.getWrapperField(this, CheckinInfo, 5) as CheckinInfo | undefined;
        }
        set info(value: CheckinInfo) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                info: this.info
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.info)
                writer.writeMessage(5, this.info, (item: CheckinInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_CheckinRet {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_CheckinRet();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.info, () => message.info = CheckinInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_ReplenishRet extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get info(): CheckinInfo | undefined {
            return pb_1.Message.getWrapperField(this, CheckinInfo, 4) as CheckinInfo | undefined;
        }
        set info(value: CheckinInfo) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                info: this.info
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.info)
                writer.writeMessage(4, this.info, (item: CheckinInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_ReplenishRet {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_ReplenishRet();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.info, () => message.info = CheckinInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_CheckinInfos extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get info(): CheckinInfo | undefined {
            return pb_1.Message.getWrapperField(this, CheckinInfo, 4) as CheckinInfo | undefined;
        }
        set info(value: CheckinInfo) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                info: this.info
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.info)
                writer.writeMessage(4, this.info, (item: CheckinInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_CheckinInfos {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_CheckinInfos();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.info, () => message.info = CheckinInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_CheckinCountAward extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get count(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                count: this.count
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.count)
                writer.writeUint32(4, this.count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_CheckinCountAward {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_CheckinCountAward();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.count = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_CheckinAwardRet extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_CheckinAwardRet {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_CheckinAwardRet();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_SigninDouble extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get day(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set day(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                day: this.day
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.day)
                writer.writeUint32(4, this.day);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_SigninDouble {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_SigninDouble();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.day = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_SigninDouble extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get info(): CheckinInfo | undefined {
            return pb_1.Message.getWrapperField(this, CheckinInfo, 4) as CheckinInfo | undefined;
        }
        set info(value: CheckinInfo) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                info: this.info
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.info)
                writer.writeMessage(4, this.info, (item: CheckinInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_SigninDouble {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_SigninDouble();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.info, () => message.info = CheckinInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class C_RequestFriendData extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get friendType(): common.FriendType {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as common.FriendType;
        }
        set friendType(value: common.FriendType) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                friendType: this.friendType
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.friendType)
                writer.writeEnum(4, this.friendType);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_RequestFriendData {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new C_RequestFriendData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.friendType = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class S_RequestFriendData extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [5], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get friendType(): common.FriendType | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as common.FriendType | undefined;
        }
        set friendType(value: common.FriendType) {
            pb_1.Message.setField(this, 4, value);
        }
        get datas(): common.FriendCommonData[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.FriendCommonData, 5) as common.FriendCommonData[];
        }
        set datas(value: common.FriendCommonData[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                friendType: this.friendType,
                datas: this.datas
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.friendType)
                writer.writeEnum(4, this.friendType);
            if (this.datas)
                writer.writeRepeatedMessage(5, this.datas, (item: common.FriendCommonData) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_RequestFriendData {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new S_RequestFriendData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.friendType = reader.readEnum();
                        break;
                    case 5:
                        reader.readMessage(message.datas, () => pb_1.Message.addToRepeatedWrapperField(message, 5, common.FriendCommonData.deserialize(reader), common.FriendCommonData));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class C_AddFriend extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get uids(): string[] {
            return pb_1.Message.getField(this, 4) as string[];
        }
        set uids(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                uids: this.uids
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.uids)
                writer.writeRepeatedUint64String(4, this.uids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_AddFriend {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new C_AddFriend();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.uids.push(reader.readUint64String());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class S_AddFriend extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get successUids(): string[] {
            return pb_1.Message.getField(this, 4) as string[];
        }
        set successUids(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                successUids: this.successUids
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.successUids)
                writer.writeRepeatedUint64String(4, this.successUids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_AddFriend {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new S_AddFriend();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.successUids.push(reader.readUint64String());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class C_AddBlack extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get uid(): string {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string;
        }
        set uid(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                uid: this.uid
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.uid)
                writer.writeUint64String(4, this.uid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_AddBlack {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new C_AddBlack();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.uid = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class S_AddBlack extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get data(): common.FriendCommonData | undefined {
            return pb_1.Message.getWrapperField(this, common.FriendCommonData, 4) as common.FriendCommonData | undefined;
        }
        set data(value: common.FriendCommonData) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                data: this.data
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.data)
                writer.writeMessage(4, this.data, (item: common.FriendCommonData) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_AddBlack {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new S_AddBlack();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.data, () => message.data = common.FriendCommonData.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class C_DeleteFriend extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get uids(): string[] {
            return pb_1.Message.getField(this, 4) as string[];
        }
        set uids(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                uids: this.uids
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.uids)
                writer.writeRepeatedUint64String(4, this.uids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_DeleteFriend {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new C_DeleteFriend();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.uids.push(reader.readUint64String());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class S_DeleteFriend extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_DeleteFriend {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new S_DeleteFriend();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_DeleteBlack extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get uid(): string {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string;
        }
        set uid(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                uid: this.uid
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.uid)
                writer.writeUint64String(4, this.uid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_DeleteBlack {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_DeleteBlack();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.uid = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_DeleteBlack extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_DeleteBlack {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_DeleteBlack();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class C_ConfirmFriendRequest extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get uids(): string[] {
            return pb_1.Message.getField(this, 4) as string[];
        }
        set uids(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                uids: this.uids
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.uids)
                writer.writeRepeatedUint64String(4, this.uids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_ConfirmFriendRequest {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new C_ConfirmFriendRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.uids.push(reader.readUint64String());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class S_ConfirmFriendRequest extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get successUids(): string[] {
            return pb_1.Message.getField(this, 4) as string[];
        }
        set successUids(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                successUids: this.successUids
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.successUids)
                writer.writeRepeatedUint64String(4, this.successUids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_ConfirmFriendRequest {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new S_ConfirmFriendRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.successUids.push(reader.readUint64String());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_RefuseFriendRequest extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get uids(): string[] {
            return pb_1.Message.getField(this, 4) as string[];
        }
        set uids(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                uids: this.uids
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.uids)
                writer.writeRepeatedUint64String(4, this.uids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_RefuseFriendRequest {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_RefuseFriendRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.uids.push(reader.readUint64String());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_RefuseFriendRequest extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_RefuseFriendRequest {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_RefuseFriendRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class C_GivePhysical extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get uids(): string[] {
            return pb_1.Message.getField(this, 4) as string[];
        }
        set uids(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                uids: this.uids
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.uids)
                writer.writeRepeatedUint64String(4, this.uids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_GivePhysical {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new C_GivePhysical();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.uids.push(reader.readUint64String());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class S_GivePhysical extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_GivePhysical {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new S_GivePhysical();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_CollectPhysical extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get uids(): string[] {
            return pb_1.Message.getField(this, 4) as string[];
        }
        set uids(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                uids: this.uids
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.uids)
                writer.writeRepeatedUint64String(4, this.uids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_CollectPhysical {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_CollectPhysical();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.uids.push(reader.readUint64String());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_CollectPhysical extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get successUids(): string[] {
            return pb_1.Message.getField(this, 4) as string[];
        }
        set successUids(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get collectNum(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set collectNum(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                successUids: this.successUids,
                collectNum: this.collectNum
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.successUids)
                writer.writeRepeatedUint64String(4, this.successUids);
            if (this.collectNum)
                writer.writeUint32(5, this.collectNum);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_CollectPhysical {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_CollectPhysical();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.successUids.push(reader.readUint64String());
                        break;
                    case 5:
                        message.collectNum = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class C_SearchPlayer extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get name(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get id(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as string | undefined;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get startIndex(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as number | undefined;
        }
        set startIndex(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                name: this.name,
                id: this.id,
                startIndex: this.startIndex
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.name)
                writer.writeString(4, this.name);
            if (this.id)
                writer.writeUint64String(5, this.id);
            if (this.startIndex)
                writer.writeInt32(6, this.startIndex);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_SearchPlayer {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new C_SearchPlayer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.name = reader.readString();
                        break;
                    case 5:
                        message.id = reader.readUint64String();
                        break;
                    case 6:
                        message.startIndex = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class S_SearchPlayer extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get searchResult(): common.FriendCommonData[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.FriendCommonData, 4) as common.FriendCommonData[];
        }
        set searchResult(value: common.FriendCommonData[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                searchResult: this.searchResult
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.searchResult)
                writer.writeRepeatedMessage(4, this.searchResult, (item: common.FriendCommonData) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_SearchPlayer {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new S_SearchPlayer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.searchResult, () => pb_1.Message.addToRepeatedWrapperField(message, 4, common.FriendCommonData.deserialize(reader), common.FriendCommonData));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class S_NotifyFriendCollectPhysical extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get uid(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set uid(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                uid: this.uid
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.uid)
                writer.writeUint64String(4, this.uid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_NotifyFriendCollectPhysical {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new S_NotifyFriendCollectPhysical();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.uid = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class S_NotifyFriendRequest extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get data(): common.FriendCommonData | undefined {
            return pb_1.Message.getWrapperField(this, common.FriendCommonData, 4) as common.FriendCommonData | undefined;
        }
        set data(value: common.FriendCommonData) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                data: this.data
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.data)
                writer.writeMessage(4, this.data, (item: common.FriendCommonData) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_NotifyFriendRequest {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new S_NotifyFriendRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.data, () => message.data = common.FriendCommonData.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class S_NotifyNewFriend extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get data(): common.FriendCommonData | undefined {
            return pb_1.Message.getWrapperField(this, common.FriendCommonData, 4) as common.FriendCommonData | undefined;
        }
        set data(value: common.FriendCommonData) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                data: this.data
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.data)
                writer.writeMessage(4, this.data, (item: common.FriendCommonData) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_NotifyNewFriend {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new S_NotifyNewFriend();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.data, () => message.data = common.FriendCommonData.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class S_NotifyDeleteFriend extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get uid(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set uid(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                uid: this.uid
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.uid)
                writer.writeUint64String(4, this.uid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_NotifyDeleteFriend {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new S_NotifyDeleteFriend();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.uid = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_CommanderId extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get commanderId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set commanderId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get commanderOp(): CommanderOp | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as CommanderOp | undefined;
        }
        set commanderOp(value: CommanderOp) {
            pb_1.Message.setField(this, 5, value);
        }
        get opTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as number | undefined;
        }
        set opTimes(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                commanderId: this.commanderId,
                commanderOp: this.commanderOp,
                opTimes: this.opTimes
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.commanderId)
                writer.writeInt32(4, this.commanderId);
            if (this.commanderOp)
                writer.writeEnum(5, this.commanderOp);
            if (this.opTimes)
                writer.writeUint32(6, this.opTimes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_CommanderId {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_CommanderId();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.commanderId = reader.readInt32();
                        break;
                    case 5:
                        message.commanderOp = reader.readEnum();
                        break;
                    case 6:
                        message.opTimes = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_CommanderQualityUp extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get commanderId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set commanderId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                commanderId: this.commanderId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.commanderId)
                writer.writeInt32(4, this.commanderId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_CommanderQualityUp {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_CommanderQualityUp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.commanderId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_CommanderSoldiersChange extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get commanderId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set commanderId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get soldierId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set soldierId(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                commanderId: this.commanderId,
                soldierId: this.soldierId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.commanderId)
                writer.writeInt32(4, this.commanderId);
            if (this.soldierId)
                writer.writeInt32(5, this.soldierId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_CommanderSoldiersChange {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_CommanderSoldiersChange();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.commanderId = reader.readInt32();
                        break;
                    case 5:
                        message.soldierId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_CommanderEquipmentUpgrade extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get commanderId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set commanderId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get equipmentSlotId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set equipmentSlotId(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                commanderId: this.commanderId,
                equipmentSlotId: this.equipmentSlotId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.commanderId)
                writer.writeInt32(4, this.commanderId);
            if (this.equipmentSlotId)
                writer.writeUint32(5, this.equipmentSlotId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_CommanderEquipmentUpgrade {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_CommanderEquipmentUpgrade();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.commanderId = reader.readInt32();
                        break;
                    case 5:
                        message.equipmentSlotId = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_CommanderFastEquipmentUpgrade extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get commanderId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set commanderId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                commanderId: this.commanderId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.commanderId)
                writer.writeInt32(4, this.commanderId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_CommanderFastEquipmentUpgrade {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_CommanderFastEquipmentUpgrade();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.commanderId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_CommanderSkillSlotUnlock extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get commanderId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set commanderId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get skillSlotId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set skillSlotId(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                commanderId: this.commanderId,
                skillSlotId: this.skillSlotId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.commanderId)
                writer.writeInt32(4, this.commanderId);
            if (this.skillSlotId)
                writer.writeUint32(5, this.skillSlotId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_CommanderSkillSlotUnlock {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_CommanderSkillSlotUnlock();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.commanderId = reader.readInt32();
                        break;
                    case 5:
                        message.skillSlotId = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_CommanderSkillSlotLevelUp extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [6], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get commanderId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set commanderId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get skillSlotId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set skillSlotId(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get useItems(): common.Item[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Item, 6) as common.Item[];
        }
        set useItems(value: common.Item[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                commanderId: this.commanderId,
                skillSlotId: this.skillSlotId,
                useItems: this.useItems
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.commanderId)
                writer.writeInt32(4, this.commanderId);
            if (this.skillSlotId)
                writer.writeUint32(5, this.skillSlotId);
            if (this.useItems)
                writer.writeRepeatedMessage(6, this.useItems, (item: common.Item) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_CommanderSkillSlotLevelUp {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_CommanderSkillSlotLevelUp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.commanderId = reader.readInt32();
                        break;
                    case 5:
                        message.skillSlotId = reader.readUint32();
                        break;
                    case 6:
                        reader.readMessage(message.useItems, () => pb_1.Message.addToRepeatedWrapperField(message, 6, common.Item.deserialize(reader), common.Item));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_CallCommander extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get commanderId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set commanderId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                commanderId: this.commanderId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.commanderId)
                writer.writeInt32(4, this.commanderId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_CallCommander {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_CallCommander();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.commanderId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_CallCommander extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_CallCommander {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_CallCommander();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_FormationGet extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get formationId(): common.FormationType[] {
            return pb_1.Message.getField(this, 4) as common.FormationType[];
        }
        set formationId(value: common.FormationType[]) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                formationId: this.formationId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.formationId)
                writer.writeRepeatedEnum(4, this.formationId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_FormationGet {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_FormationGet();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.formationId.push(reader.readEnum());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_FormationGet extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get formation(): common.Formation[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Formation, 4) as common.Formation[];
        }
        set formation(value: common.Formation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                formation: this.formation
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.formation)
                writer.writeRepeatedMessage(4, this.formation, (item: common.Formation) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_FormationGet {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_FormationGet();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.formation, () => pb_1.Message.addToRepeatedWrapperField(message, 4, common.Formation.deserialize(reader), common.Formation));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_FormationSave extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get formation(): common.Formation[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Formation, 4) as common.Formation[];
        }
        set formation(value: common.Formation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get battleInfoId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set battleInfoId(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                formation: this.formation,
                battleInfoId: this.battleInfoId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.formation)
                writer.writeRepeatedMessage(4, this.formation, (item: common.Formation) => item.serialize(writer));
            if (this.battleInfoId)
                writer.writeInt32(5, this.battleInfoId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_FormationSave {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_FormationSave();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.formation, () => pb_1.Message.addToRepeatedWrapperField(message, 4, common.Formation.deserialize(reader), common.Formation));
                        break;
                    case 5:
                        message.battleInfoId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_FormationSave extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [3], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get formation(): common.Formation[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Formation, 3) as common.Formation[];
        }
        set formation(value: common.Formation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 4) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                formation: this.formation,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.formation)
                writer.writeRepeatedMessage(3, this.formation, (item: common.Formation) => item.serialize(writer));
            if (this.result)
                writer.writeMessage(4, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_FormationSave {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_FormationSave();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.formation, () => pb_1.Message.addToRepeatedWrapperField(message, 3, common.Formation.deserialize(reader), common.Formation));
                        break;
                    case 4:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_ChatMessage extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get channel(): common.ChatChannel | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as common.ChatChannel | undefined;
        }
        set channel(value: common.ChatChannel) {
            pb_1.Message.setField(this, 4, value);
        }
        get msg(): common.ChatCell | undefined {
            return pb_1.Message.getWrapperField(this, common.ChatCell, 5) as common.ChatCell | undefined;
        }
        set msg(value: common.ChatCell) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get recvId(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as string | undefined;
        }
        set recvId(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                channel: this.channel,
                msg: this.msg,
                recvId: this.recvId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.channel)
                writer.writeEnum(4, this.channel);
            if (this.msg)
                writer.writeMessage(5, this.msg, (item: common.ChatCell) => item.serialize(writer));
            if (this.recvId)
                writer.writeUint64String(6, this.recvId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_ChatMessage {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_ChatMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.channel = reader.readEnum();
                        break;
                    case 5:
                        reader.readMessage(message.msg, () => message.msg = common.ChatCell.deserialize(reader));
                        break;
                    case 6:
                        message.recvId = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class S_ChatMessage extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get channel(): common.ChatChannel | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as common.ChatChannel | undefined;
        }
        set channel(value: common.ChatChannel) {
            pb_1.Message.setField(this, 4, value);
        }
        get msg(): ChatMsg | undefined {
            return pb_1.Message.getWrapperField(this, ChatMsg, 5) as ChatMsg | undefined;
        }
        set msg(value: ChatMsg) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                channel: this.channel,
                msg: this.msg
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.channel)
                writer.writeEnum(4, this.channel);
            if (this.msg)
                writer.writeMessage(5, this.msg, (item: ChatMsg) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_ChatMessage {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new S_ChatMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.channel = reader.readEnum();
                        break;
                    case 5:
                        reader.readMessage(message.msg, () => message.msg = ChatMsg.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class ChatSender extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get id(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as string | undefined;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as string | undefined;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get level(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as number | undefined;
        }
        set level(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get avatar(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set avatar(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get avatarFrame(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set avatarFrame(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get vipLevel(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as number | undefined;
        }
        set vipLevel(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get fightPower(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 7, undefined) as number | undefined;
        }
        set fightPower(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get hideVip(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 8, undefined) as boolean | undefined;
        }
        set hideVip(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        toObject() {
            return {
                id: this.id,
                name: this.name,
                level: this.level,
                avatar: this.avatar,
                avatarFrame: this.avatarFrame,
                vipLevel: this.vipLevel,
                fightPower: this.fightPower,
                hideVip: this.hideVip
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id)
                writer.writeUint64String(1, this.id);
            if (this.name)
                writer.writeString(2, this.name);
            if (this.level)
                writer.writeUint32(3, this.level);
            if (this.avatar)
                writer.writeInt32(4, this.avatar);
            if (this.avatarFrame)
                writer.writeInt32(5, this.avatarFrame);
            if (this.vipLevel)
                writer.writeUint32(6, this.vipLevel);
            if (this.fightPower)
                writer.writeUint32(7, this.fightPower);
            if (this.hideVip)
                writer.writeBool(8, this.hideVip);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatSender {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new ChatSender();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.level = reader.readUint32();
                        break;
                    case 4:
                        message.avatar = reader.readInt32();
                        break;
                    case 5:
                        message.avatarFrame = reader.readInt32();
                        break;
                    case 6:
                        message.vipLevel = reader.readUint32();
                        break;
                    case 7:
                        message.fightPower = reader.readUint32();
                        break;
                    case 8:
                        message.hideVip = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class ChatMsg extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sender(): ChatSender | undefined {
            return pb_1.Message.getWrapperField(this, ChatSender, 1) as ChatSender | undefined;
        }
        set sender(value: ChatSender) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get msg(): common.ChatCell | undefined {
            return pb_1.Message.getWrapperField(this, common.ChatCell, 2) as common.ChatCell | undefined;
        }
        set msg(value: common.ChatCell) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get recver(): ChatSender | undefined {
            return pb_1.Message.getWrapperField(this, ChatSender, 3) as ChatSender | undefined;
        }
        set recver(value: ChatSender) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sender: this.sender,
                msg: this.msg,
                recver: this.recver
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sender)
                writer.writeMessage(1, this.sender, (item: ChatSender) => item.serialize(writer));
            if (this.msg)
                writer.writeMessage(2, this.msg, (item: common.ChatCell) => item.serialize(writer));
            if (this.recver)
                writer.writeMessage(3, this.recver, (item: ChatSender) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatMsg {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new ChatMsg();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.sender, () => message.sender = ChatSender.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.msg, () => message.msg = common.ChatCell.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.recver, () => message.recver = ChatSender.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class PrivateMsg extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [2], null);
        }
        get oppositePlayer(): ChatSender | undefined {
            return pb_1.Message.getWrapperField(this, ChatSender, 1) as ChatSender | undefined;
        }
        set oppositePlayer(value: ChatSender) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get msg(): common.ChatCell[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.ChatCell, 2) as common.ChatCell[];
        }
        set msg(value: common.ChatCell[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get readTime(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set readTime(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        toObject() {
            return {
                oppositePlayer: this.oppositePlayer,
                msg: this.msg,
                readTime: this.readTime
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.oppositePlayer)
                writer.writeMessage(1, this.oppositePlayer, (item: ChatSender) => item.serialize(writer));
            if (this.msg)
                writer.writeRepeatedMessage(2, this.msg, (item: common.ChatCell) => item.serialize(writer));
            if (this.readTime)
                writer.writeInt64String(3, this.readTime);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PrivateMsg {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new PrivateMsg();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.oppositePlayer, () => message.oppositePlayer = ChatSender.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.msg, () => pb_1.Message.addToRepeatedWrapperField(message, 2, common.ChatCell.deserialize(reader), common.ChatCell));
                        break;
                    case 3:
                        message.readTime = reader.readInt64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_ChatMessage extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4, 5, 6, 7], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get privateMsg(): PrivateMsg[] {
            return pb_1.Message.getRepeatedWrapperField(this, PrivateMsg, 4) as PrivateMsg[];
        }
        set privateMsg(value: PrivateMsg[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get worldMsg(): ChatMsg[] {
            return pb_1.Message.getRepeatedWrapperField(this, ChatMsg, 5) as ChatMsg[];
        }
        set worldMsg(value: ChatMsg[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get unionMsg(): ChatMsg[] {
            return pb_1.Message.getRepeatedWrapperField(this, ChatMsg, 6) as ChatMsg[];
        }
        set unionMsg(value: ChatMsg[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get systemMsg(): ChatMsg[] {
            return pb_1.Message.getRepeatedWrapperField(this, ChatMsg, 7) as ChatMsg[];
        }
        set systemMsg(value: ChatMsg[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        get readWorldMsgTime(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 8, undefined) as string | undefined;
        }
        set readWorldMsgTime(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get readSysMsgTime(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 9, undefined) as string | undefined;
        }
        set readSysMsgTime(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get readUnionMsgTime(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 10, undefined) as string | undefined;
        }
        set readUnionMsgTime(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                privateMsg: this.privateMsg,
                worldMsg: this.worldMsg,
                unionMsg: this.unionMsg,
                systemMsg: this.systemMsg,
                readWorldMsgTime: this.readWorldMsgTime,
                readSysMsgTime: this.readSysMsgTime,
                readUnionMsgTime: this.readUnionMsgTime
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.privateMsg)
                writer.writeRepeatedMessage(4, this.privateMsg, (item: PrivateMsg) => item.serialize(writer));
            if (this.worldMsg)
                writer.writeRepeatedMessage(5, this.worldMsg, (item: ChatMsg) => item.serialize(writer));
            if (this.unionMsg)
                writer.writeRepeatedMessage(6, this.unionMsg, (item: ChatMsg) => item.serialize(writer));
            if (this.systemMsg)
                writer.writeRepeatedMessage(7, this.systemMsg, (item: ChatMsg) => item.serialize(writer));
            if (this.readWorldMsgTime)
                writer.writeInt64String(8, this.readWorldMsgTime);
            if (this.readSysMsgTime)
                writer.writeInt64String(9, this.readSysMsgTime);
            if (this.readUnionMsgTime)
                writer.writeInt64String(10, this.readUnionMsgTime);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_ChatMessage {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_ChatMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.privateMsg, () => pb_1.Message.addToRepeatedWrapperField(message, 4, PrivateMsg.deserialize(reader), PrivateMsg));
                        break;
                    case 5:
                        reader.readMessage(message.worldMsg, () => pb_1.Message.addToRepeatedWrapperField(message, 5, ChatMsg.deserialize(reader), ChatMsg));
                        break;
                    case 6:
                        reader.readMessage(message.unionMsg, () => pb_1.Message.addToRepeatedWrapperField(message, 6, ChatMsg.deserialize(reader), ChatMsg));
                        break;
                    case 7:
                        reader.readMessage(message.systemMsg, () => pb_1.Message.addToRepeatedWrapperField(message, 7, ChatMsg.deserialize(reader), ChatMsg));
                        break;
                    case 8:
                        message.readWorldMsgTime = reader.readInt64String();
                        break;
                    case 9:
                        message.readSysMsgTime = reader.readInt64String();
                        break;
                    case 10:
                        message.readUnionMsgTime = reader.readInt64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_ReadMessage extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get channel(): common.ChatChannel | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as common.ChatChannel | undefined;
        }
        set channel(value: common.ChatChannel) {
            pb_1.Message.setField(this, 4, value);
        }
        get targetID(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as string | undefined;
        }
        set targetID(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                channel: this.channel,
                targetID: this.targetID
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.channel)
                writer.writeEnum(4, this.channel);
            if (this.targetID)
                writer.writeUint64String(5, this.targetID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_ReadMessage {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_ReadMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.channel = reader.readEnum();
                        break;
                    case 5:
                        message.targetID = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_UserID extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get userID(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set userID(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                userID: this.userID
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.userID)
                writer.writeUint64String(4, this.userID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_UserID {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_UserID();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.userID = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_ReadAnnounce extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get announceId(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set announceId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                announceId: this.announceId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.announceId)
                writer.writeUint64String(4, this.announceId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_ReadAnnounce {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_ReadAnnounce();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.announceId = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class S_ChangeAnnounce extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4, 5], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get announce(): common.AnnounceMessage[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.AnnounceMessage, 4) as common.AnnounceMessage[];
        }
        set announce(value: common.AnnounceMessage[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get deleteIds(): string[] {
            return pb_1.Message.getField(this, 5) as string[];
        }
        set deleteIds(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                announce: this.announce,
                deleteIds: this.deleteIds
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.announce)
                writer.writeRepeatedMessage(4, this.announce, (item: common.AnnounceMessage) => item.serialize(writer));
            if (this.deleteIds)
                writer.writeRepeatedUint64String(5, this.deleteIds);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_ChangeAnnounce {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new S_ChangeAnnounce();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.announce, () => pb_1.Message.addToRepeatedWrapperField(message, 4, common.AnnounceMessage.deserialize(reader), common.AnnounceMessage));
                        break;
                    case 5:
                        message.deleteIds.push(reader.readUint64String());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_ShareBattle extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get battleId(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set battleId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get battleType(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set battleType(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                battleId: this.battleId,
                battleType: this.battleType
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.battleId)
                writer.writeUint64String(4, this.battleId);
            if (this.battleType)
                writer.writeInt32(5, this.battleType);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_ShareBattle {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_ShareBattle();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.battleId = reader.readUint64String();
                        break;
                    case 5:
                        message.battleType = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class C_RankList extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get rankType(): common.RankType | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as common.RankType | undefined;
        }
        set rankType(value: common.RankType) {
            pb_1.Message.setField(this, 4, value);
        }
        get beginRank(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set beginRank(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                rankType: this.rankType,
                beginRank: this.beginRank
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.rankType)
                writer.writeEnum(4, this.rankType);
            if (this.beginRank)
                writer.writeUint32(5, this.beginRank);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_RankList {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new C_RankList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.rankType = reader.readEnum();
                        break;
                    case 5:
                        message.beginRank = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class S_RankList extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [5], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get myRankPlayer(): RankPlayer | undefined {
            return pb_1.Message.getWrapperField(this, RankPlayer, 4) as RankPlayer | undefined;
        }
        set myRankPlayer(value: RankPlayer) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get ranks(): RankPlayer[] {
            return pb_1.Message.getRepeatedWrapperField(this, RankPlayer, 5) as RankPlayer[];
        }
        set ranks(value: RankPlayer[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get totalRankNum(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as number | undefined;
        }
        set totalRankNum(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get topPlayer(): TopPlayer | undefined {
            return pb_1.Message.getWrapperField(this, TopPlayer, 10) as TopPlayer | undefined;
        }
        set topPlayer(value: TopPlayer) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get keepFirstDays(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 11, undefined) as number | undefined;
        }
        set keepFirstDays(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                myRankPlayer: this.myRankPlayer,
                ranks: this.ranks,
                totalRankNum: this.totalRankNum,
                topPlayer: this.topPlayer,
                keepFirstDays: this.keepFirstDays
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.myRankPlayer)
                writer.writeMessage(4, this.myRankPlayer, (item: RankPlayer) => item.serialize(writer));
            if (this.ranks)
                writer.writeRepeatedMessage(5, this.ranks, (item: RankPlayer) => item.serialize(writer));
            if (this.totalRankNum)
                writer.writeUint32(6, this.totalRankNum);
            if (this.topPlayer)
                writer.writeMessage(10, this.topPlayer, (item: TopPlayer) => item.serialize(writer));
            if (this.keepFirstDays)
                writer.writeUint32(11, this.keepFirstDays);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_RankList {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new S_RankList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.myRankPlayer, () => message.myRankPlayer = RankPlayer.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.ranks, () => pb_1.Message.addToRepeatedWrapperField(message, 5, RankPlayer.deserialize(reader), RankPlayer));
                        break;
                    case 6:
                        message.totalRankNum = reader.readUint32();
                        break;
                    case 10:
                        reader.readMessage(message.topPlayer, () => message.topPlayer = TopPlayer.deserialize(reader));
                        break;
                    case 11:
                        message.keepFirstDays = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class C_RankTopPlayerInfo extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get rankType(): common.RankType | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as common.RankType | undefined;
        }
        set rankType(value: common.RankType) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                rankType: this.rankType
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.rankType)
                writer.writeEnum(4, this.rankType);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_RankTopPlayerInfo {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new C_RankTopPlayerInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.rankType = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class S_RankTopPlayerInfo extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get player(): TopPlayer | undefined {
            return pb_1.Message.getWrapperField(this, TopPlayer, 4) as TopPlayer | undefined;
        }
        set player(value: TopPlayer) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get keepFirstDays(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set keepFirstDays(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                player: this.player,
                keepFirstDays: this.keepFirstDays
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.player)
                writer.writeMessage(4, this.player, (item: TopPlayer) => item.serialize(writer));
            if (this.keepFirstDays)
                writer.writeUint32(5, this.keepFirstDays);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_RankTopPlayerInfo {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new S_RankTopPlayerInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.player, () => message.player = TopPlayer.deserialize(reader));
                        break;
                    case 5:
                        message.keepFirstDays = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class C_RankDetailInfo extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get id(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get rankType(): common.RankType | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as common.RankType | undefined;
        }
        set rankType(value: common.RankType) {
            pb_1.Message.setField(this, 5, value);
        }
        get commanderId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as number | undefined;
        }
        set commanderId(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get counsellorId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 7, undefined) as number | undefined;
        }
        set counsellorId(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                id: this.id,
                rankType: this.rankType,
                commanderId: this.commanderId,
                counsellorId: this.counsellorId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.id)
                writer.writeUint64String(4, this.id);
            if (this.rankType)
                writer.writeEnum(5, this.rankType);
            if (this.commanderId)
                writer.writeInt32(6, this.commanderId);
            if (this.counsellorId)
                writer.writeInt32(7, this.counsellorId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_RankDetailInfo {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new C_RankDetailInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.id = reader.readUint64String();
                        break;
                    case 5:
                        message.rankType = reader.readEnum();
                        break;
                    case 6:
                        message.commanderId = reader.readInt32();
                        break;
                    case 7:
                        message.counsellorId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class S_RankDetailInfo extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [5, 6, 7, 10], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get counsellors(): common.Counsellor[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Counsellor, 5) as common.Counsellor[];
        }
        set counsellors(value: common.Counsellor[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get strTalents(): common.StrTalent[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.StrTalent, 6) as common.StrTalent[];
        }
        set strTalents(value: common.StrTalent[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get treasures(): common.Treasure[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Treasure, 7) as common.Treasure[];
        }
        set treasures(value: common.Treasure[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        get treasureFates(): common.TreasureFatesInfo | undefined {
            return pb_1.Message.getWrapperField(this, common.TreasureFatesInfo, 8) as common.TreasureFatesInfo | undefined;
        }
        set treasureFates(value: common.TreasureFatesInfo) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get pokedexInfo(): common.PokedexBattleInfo | undefined {
            return pb_1.Message.getWrapperField(this, common.PokedexBattleInfo, 9) as common.PokedexBattleInfo | undefined;
        }
        set pokedexInfo(value: common.PokedexBattleInfo) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get soldierTech(): common.SoldierTech[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.SoldierTech, 10) as common.SoldierTech[];
        }
        set soldierTech(value: common.SoldierTech[]) {
            pb_1.Message.setRepeatedWrapperField(this, 10, value);
        }
        get collect(): common.Collect | undefined {
            return pb_1.Message.getWrapperField(this, common.Collect, 11) as common.Collect | undefined;
        }
        set collect(value: common.Collect) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get commander(): common.Commander | undefined {
            return pb_1.Message.getWrapperField(this, common.Commander, 15) as common.Commander | undefined;
        }
        set commander(value: common.Commander) {
            pb_1.Message.setWrapperField(this, 15, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                counsellors: this.counsellors,
                strTalents: this.strTalents,
                treasures: this.treasures,
                treasureFates: this.treasureFates,
                pokedexInfo: this.pokedexInfo,
                soldierTech: this.soldierTech,
                collect: this.collect,
                commander: this.commander
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.counsellors)
                writer.writeRepeatedMessage(5, this.counsellors, (item: common.Counsellor) => item.serialize(writer));
            if (this.strTalents)
                writer.writeRepeatedMessage(6, this.strTalents, (item: common.StrTalent) => item.serialize(writer));
            if (this.treasures)
                writer.writeRepeatedMessage(7, this.treasures, (item: common.Treasure) => item.serialize(writer));
            if (this.treasureFates)
                writer.writeMessage(8, this.treasureFates, (item: common.TreasureFatesInfo) => item.serialize(writer));
            if (this.pokedexInfo)
                writer.writeMessage(9, this.pokedexInfo, (item: common.PokedexBattleInfo) => item.serialize(writer));
            if (this.soldierTech)
                writer.writeRepeatedMessage(10, this.soldierTech, (item: common.SoldierTech) => item.serialize(writer));
            if (this.collect)
                writer.writeMessage(11, this.collect, (item: common.Collect) => item.serialize(writer));
            if (this.commander)
                writer.writeMessage(15, this.commander, (item: common.Commander) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_RankDetailInfo {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new S_RankDetailInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.counsellors, () => pb_1.Message.addToRepeatedWrapperField(message, 5, common.Counsellor.deserialize(reader), common.Counsellor));
                        break;
                    case 6:
                        reader.readMessage(message.strTalents, () => pb_1.Message.addToRepeatedWrapperField(message, 6, common.StrTalent.deserialize(reader), common.StrTalent));
                        break;
                    case 7:
                        reader.readMessage(message.treasures, () => pb_1.Message.addToRepeatedWrapperField(message, 7, common.Treasure.deserialize(reader), common.Treasure));
                        break;
                    case 8:
                        reader.readMessage(message.treasureFates, () => message.treasureFates = common.TreasureFatesInfo.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.pokedexInfo, () => message.pokedexInfo = common.PokedexBattleInfo.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.soldierTech, () => pb_1.Message.addToRepeatedWrapperField(message, 10, common.SoldierTech.deserialize(reader), common.SoldierTech));
                        break;
                    case 11:
                        reader.readMessage(message.collect, () => message.collect = common.Collect.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.commander, () => message.commander = common.Commander.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class TopPlayer extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get name(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as string | undefined;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get power(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set power(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get counsellorId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as number | undefined;
        }
        set counsellorId(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get guildName(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set guildName(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                name: this.name,
                power: this.power,
                counsellorId: this.counsellorId,
                guildName: this.guildName
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name)
                writer.writeString(1, this.name);
            if (this.power)
                writer.writeUint32(2, this.power);
            if (this.counsellorId)
                writer.writeInt32(3, this.counsellorId);
            if (this.guildName)
                writer.writeString(4, this.guildName);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TopPlayer {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new TopPlayer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.power = reader.readUint32();
                        break;
                    case 3:
                        message.counsellorId = reader.readInt32();
                        break;
                    case 4:
                        message.guildName = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class RankPlayer extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [18], null);
        }
        get id(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as string | undefined;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as string | undefined;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get avatar(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as number | undefined;
        }
        set avatar(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get avatarFrame(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set avatarFrame(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get level(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set level(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get guildName(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as string | undefined;
        }
        set guildName(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get rank(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 7, undefined) as number | undefined;
        }
        set rank(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get score(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 8, undefined) as number | undefined;
        }
        set score(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get counsellorId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 9, undefined) as number | undefined;
        }
        set counsellorId(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get counsellorStar(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 10, undefined) as number | undefined;
        }
        set counsellorStar(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get commander(): common.Commander | undefined {
            return pb_1.Message.getWrapperField(this, common.Commander, 11) as common.Commander | undefined;
        }
        set commander(value: common.Commander) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get maxInstanceId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 12, undefined) as number | undefined;
        }
        set maxInstanceId(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get maxPowerTreasureID(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 15, undefined) as number | undefined;
        }
        set maxPowerTreasureID(value: number) {
            pb_1.Message.setField(this, 15, value);
        }
        get dailyBossBestLevel(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 16, undefined) as number | undefined;
        }
        set dailyBossBestLevel(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        get dailyBossBestTime(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 17, undefined) as number | undefined;
        }
        set dailyBossBestTime(value: number) {
            pb_1.Message.setField(this, 17, value);
        }
        get chibiReplayIds(): string[] {
            return pb_1.Message.getField(this, 18) as string[];
        }
        set chibiReplayIds(value: string[]) {
            pb_1.Message.setField(this, 18, value);
        }
        get oldRank(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 20, undefined) as number | undefined;
        }
        set oldRank(value: number) {
            pb_1.Message.setField(this, 20, value);
        }
        toObject() {
            return {
                id: this.id,
                name: this.name,
                avatar: this.avatar,
                avatarFrame: this.avatarFrame,
                level: this.level,
                guildName: this.guildName,
                rank: this.rank,
                score: this.score,
                counsellorId: this.counsellorId,
                counsellorStar: this.counsellorStar,
                commander: this.commander,
                maxInstanceId: this.maxInstanceId,
                maxPowerTreasureID: this.maxPowerTreasureID,
                dailyBossBestLevel: this.dailyBossBestLevel,
                dailyBossBestTime: this.dailyBossBestTime,
                chibiReplayIds: this.chibiReplayIds,
                oldRank: this.oldRank
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id)
                writer.writeUint64String(1, this.id);
            if (this.name)
                writer.writeString(2, this.name);
            if (this.avatar)
                writer.writeInt32(3, this.avatar);
            if (this.avatarFrame)
                writer.writeInt32(4, this.avatarFrame);
            if (this.level)
                writer.writeUint32(5, this.level);
            if (this.guildName)
                writer.writeString(6, this.guildName);
            if (this.rank)
                writer.writeUint32(7, this.rank);
            if (this.score)
                writer.writeUint32(8, this.score);
            if (this.counsellorId)
                writer.writeInt32(9, this.counsellorId);
            if (this.counsellorStar)
                writer.writeUint32(10, this.counsellorStar);
            if (this.commander)
                writer.writeMessage(11, this.commander, (item: common.Commander) => item.serialize(writer));
            if (this.maxInstanceId)
                writer.writeInt32(12, this.maxInstanceId);
            if (this.maxPowerTreasureID)
                writer.writeInt32(15, this.maxPowerTreasureID);
            if (this.dailyBossBestLevel)
                writer.writeInt32(16, this.dailyBossBestLevel);
            if (this.dailyBossBestTime)
                writer.writeUint32(17, this.dailyBossBestTime);
            if (this.chibiReplayIds)
                writer.writeRepeatedUint64String(18, this.chibiReplayIds);
            if (this.oldRank)
                writer.writeUint32(20, this.oldRank);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RankPlayer {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new RankPlayer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64String();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.avatar = reader.readInt32();
                        break;
                    case 4:
                        message.avatarFrame = reader.readInt32();
                        break;
                    case 5:
                        message.level = reader.readUint32();
                        break;
                    case 6:
                        message.guildName = reader.readString();
                        break;
                    case 7:
                        message.rank = reader.readUint32();
                        break;
                    case 8:
                        message.score = reader.readUint32();
                        break;
                    case 9:
                        message.counsellorId = reader.readInt32();
                        break;
                    case 10:
                        message.counsellorStar = reader.readUint32();
                        break;
                    case 11:
                        reader.readMessage(message.commander, () => message.commander = common.Commander.deserialize(reader));
                        break;
                    case 12:
                        message.maxInstanceId = reader.readInt32();
                        break;
                    case 15:
                        message.maxPowerTreasureID = reader.readInt32();
                        break;
                    case 16:
                        message.dailyBossBestLevel = reader.readInt32();
                        break;
                    case 17:
                        message.dailyBossBestTime = reader.readUint32();
                        break;
                    case 18:
                        message.chibiReplayIds.push(reader.readUint64String());
                        break;
                    case 20:
                        message.oldRank = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_CounsellorID extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get id(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                id: this.id
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.id)
                writer.writeInt32(4, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_CounsellorID {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_CounsellorID();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_CounsellorUnlock extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_CounsellorUnlock {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_CounsellorUnlock();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_CounsellorUpgradeStar extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 4, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 5) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.code)
                writer.writeEnum(4, this.code);
            if (this.result)
                writer.writeMessage(5, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_CounsellorUpgradeStar {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_CounsellorUpgradeStar();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.code = reader.readEnum();
                        break;
                    case 5:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_CounsellorUpgradeStarLevel extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 4, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 5) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.code)
                writer.writeEnum(4, this.code);
            if (this.result)
                writer.writeMessage(5, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_CounsellorUpgradeStarLevel {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_CounsellorUpgradeStarLevel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.code = reader.readEnum();
                        break;
                    case 5:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_CounsellorUpgradeMagic extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get id(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get magicID(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set magicID(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get count(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as number | undefined;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                id: this.id,
                magicID: this.magicID,
                count: this.count
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.id)
                writer.writeInt32(4, this.id);
            if (this.magicID)
                writer.writeInt32(5, this.magicID);
            if (this.count)
                writer.writeUint32(6, this.count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_CounsellorUpgradeMagic {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_CounsellorUpgradeMagic();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.id = reader.readInt32();
                        break;
                    case 5:
                        message.magicID = reader.readInt32();
                        break;
                    case 6:
                        message.count = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_CounsellorUpgradeMagic extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get addType(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set addType(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                addType: this.addType
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.addType)
                writer.writeInt32(4, this.addType);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_CounsellorUpgradeMagic {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_CounsellorUpgradeMagic();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.addType = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_CounsellorQiMen extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get id(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get qiMenId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set qiMenId(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                id: this.id,
                qiMenId: this.qiMenId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.id)
                writer.writeInt32(4, this.id);
            if (this.qiMenId)
                writer.writeInt32(5, this.qiMenId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_CounsellorQiMen {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_CounsellorQiMen();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.id = reader.readInt32();
                        break;
                    case 5:
                        message.qiMenId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_CounsellorQiJi extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get id(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                id: this.id
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.id)
                writer.writeInt32(4, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_CounsellorQiJi {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_CounsellorQiJi();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_NewName extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get name(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                name: this.name
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.name)
                writer.writeString(4, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_NewName {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_NewName();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_NewName extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get name(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get renameTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set renameTimes(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                name: this.name,
                renameTimes: this.renameTimes
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.name)
                writer.writeString(4, this.name);
            if (this.renameTimes)
                writer.writeUint32(5, this.renameTimes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_NewName {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_NewName();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.name = reader.readString();
                        break;
                    case 5:
                        message.renameTimes = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_ChangeAvatar extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get avatar(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set avatar(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                avatar: this.avatar
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.avatar)
                writer.writeInt32(4, this.avatar);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_ChangeAvatar {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_ChangeAvatar();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.avatar = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_ChangeAvatar extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get avatar(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set avatar(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                avatar: this.avatar
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.avatar)
                writer.writeInt32(4, this.avatar);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_ChangeAvatar {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_ChangeAvatar();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.avatar = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_ChangeAvatarFrame extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get avatarFrame(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set avatarFrame(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                avatarFrame: this.avatarFrame
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.avatarFrame)
                writer.writeInt32(4, this.avatarFrame);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_ChangeAvatarFrame {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_ChangeAvatarFrame();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.avatarFrame = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_ChangeAvatarFrame extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get avatarFrame(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set avatarFrame(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                avatarFrame: this.avatarFrame
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.avatarFrame)
                writer.writeInt32(4, this.avatarFrame);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_ChangeAvatarFrame {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_ChangeAvatarFrame();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.avatarFrame = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_ChangeSwitch extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get switchID(): common.SwitchID | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as common.SwitchID | undefined;
        }
        set switchID(value: common.SwitchID) {
            pb_1.Message.setField(this, 4, value);
        }
        get switchTo(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as boolean | undefined;
        }
        set switchTo(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                switchID: this.switchID,
                switchTo: this.switchTo
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.switchID)
                writer.writeEnum(4, this.switchID);
            if (this.switchTo)
                writer.writeBool(5, this.switchTo);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_ChangeSwitch {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_ChangeSwitch();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.switchID = reader.readEnum();
                        break;
                    case 5:
                        message.switchTo = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_ChangeSwitch extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get switchID(): common.SwitchID | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as common.SwitchID | undefined;
        }
        set switchID(value: common.SwitchID) {
            pb_1.Message.setField(this, 4, value);
        }
        get switchTo(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as boolean | undefined;
        }
        set switchTo(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                switchID: this.switchID,
                switchTo: this.switchTo
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.switchID)
                writer.writeEnum(4, this.switchID);
            if (this.switchTo)
                writer.writeBool(5, this.switchTo);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_ChangeSwitch {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_ChangeSwitch();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.switchID = reader.readEnum();
                        break;
                    case 5:
                        message.switchTo = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_ValidateBattle extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get type(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get data(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as string | undefined;
        }
        set data(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                type: this.type,
                data: this.data
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.type)
                writer.writeString(4, this.type);
            if (this.data)
                writer.writeString(5, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_ValidateBattle {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_ValidateBattle();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.type = reader.readString();
                        break;
                    case 5:
                        message.data = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_ValidateBattle extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get ret(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set ret(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 4) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                ret: this.ret,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.ret)
                writer.writeString(3, this.ret);
            if (this.result)
                writer.writeMessage(4, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_ValidateBattle {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_ValidateBattle();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        message.ret = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_BattleReplay extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get battleId(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set battleId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                battleId: this.battleId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.battleId)
                writer.writeUint64String(4, this.battleId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_BattleReplay {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_BattleReplay();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.battleId = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_BattleReplay extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get battleReplay(): common.BattleReplay | undefined {
            return pb_1.Message.getWrapperField(this, common.BattleReplay, 4) as common.BattleReplay | undefined;
        }
        set battleReplay(value: common.BattleReplay) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                battleReplay: this.battleReplay
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.battleReplay)
                writer.writeMessage(4, this.battleReplay, (item: common.BattleReplay) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_BattleReplay {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_BattleReplay();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.battleReplay, () => message.battleReplay = common.BattleReplay.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_Exchange extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get shopType(): common.ShopType | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as common.ShopType | undefined;
        }
        set shopType(value: common.ShopType) {
            pb_1.Message.setField(this, 4, value);
        }
        get num(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set num(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                shopType: this.shopType,
                num: this.num
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.shopType)
                writer.writeEnum(4, this.shopType);
            if (this.num)
                writer.writeUint32(5, this.num);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_Exchange {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_Exchange();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.shopType = reader.readEnum();
                        break;
                    case 5:
                        message.num = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_Exchange extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get crit(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set crit(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                crit: this.crit
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.crit)
                writer.writeUint32(4, this.crit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_Exchange {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_Exchange();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.crit = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_MarketInfo extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get marketIds(): number[] {
            return pb_1.Message.getField(this, 4) as number[];
        }
        set marketIds(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                marketIds: this.marketIds
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.marketIds)
                writer.writeRepeatedInt32(4, this.marketIds);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_MarketInfo {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_MarketInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.marketIds.push(reader.readInt32());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_MarketInfo extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get market(): common.ItemMarket[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.ItemMarket, 4) as common.ItemMarket[];
        }
        set market(value: common.ItemMarket[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                market: this.market
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.market)
                writer.writeRepeatedMessage(4, this.market, (item: common.ItemMarket) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_MarketInfo {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_MarketInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.market, () => pb_1.Message.addToRepeatedWrapperField(message, 4, common.ItemMarket.deserialize(reader), common.ItemMarket));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_RefreshMarket extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get marketId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set marketId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                marketId: this.marketId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.marketId)
                writer.writeInt32(4, this.marketId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_RefreshMarket {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_RefreshMarket();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.marketId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_MarketBuy extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get marketId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set marketId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get gridId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set gridId(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                marketId: this.marketId,
                gridId: this.gridId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.marketId)
                writer.writeInt32(4, this.marketId);
            if (this.gridId)
                writer.writeInt32(5, this.gridId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_MarketBuy {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_MarketBuy();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.marketId = reader.readInt32();
                        break;
                    case 5:
                        message.gridId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_MarketBuy extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_MarketBuy {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_MarketBuy();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class Mission extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [2, 3, 4, 6, 7], null);
        }
        get mainMission(): common.MissionUnit | undefined {
            return pb_1.Message.getWrapperField(this, common.MissionUnit, 1) as common.MissionUnit | undefined;
        }
        set mainMission(value: common.MissionUnit) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get taleMission(): common.MissionUnit[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.MissionUnit, 2) as common.MissionUnit[];
        }
        set taleMission(value: common.MissionUnit[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get branchMission(): common.MissionUnit[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.MissionUnit, 3) as common.MissionUnit[];
        }
        set branchMission(value: common.MissionUnit[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get finishMissions(): number[] {
            return pb_1.Message.getField(this, 4) as number[];
        }
        set finishMissions(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get mainChapter(): common.MissionChapter[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.MissionChapter, 6) as common.MissionChapter[];
        }
        set mainChapter(value: common.MissionChapter[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get targetChapter(): common.MissionTargetChapter[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.MissionTargetChapter, 7) as common.MissionTargetChapter[];
        }
        set targetChapter(value: common.MissionTargetChapter[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        get exploratory(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 8, undefined) as number | undefined;
        }
        set exploratory(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get exploratoryRewardId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 9, undefined) as number | undefined;
        }
        set exploratoryRewardId(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        toObject() {
            return {
                mainMission: this.mainMission,
                taleMission: this.taleMission,
                branchMission: this.branchMission,
                finishMissions: this.finishMissions,
                mainChapter: this.mainChapter,
                targetChapter: this.targetChapter,
                exploratory: this.exploratory,
                exploratoryRewardId: this.exploratoryRewardId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.mainMission)
                writer.writeMessage(1, this.mainMission, (item: common.MissionUnit) => item.serialize(writer));
            if (this.taleMission)
                writer.writeRepeatedMessage(2, this.taleMission, (item: common.MissionUnit) => item.serialize(writer));
            if (this.branchMission)
                writer.writeRepeatedMessage(3, this.branchMission, (item: common.MissionUnit) => item.serialize(writer));
            if (this.finishMissions)
                writer.writeRepeatedInt32(4, this.finishMissions);
            if (this.mainChapter)
                writer.writeRepeatedMessage(6, this.mainChapter, (item: common.MissionChapter) => item.serialize(writer));
            if (this.targetChapter)
                writer.writeRepeatedMessage(7, this.targetChapter, (item: common.MissionTargetChapter) => item.serialize(writer));
            if (this.exploratory)
                writer.writeInt32(8, this.exploratory);
            if (this.exploratoryRewardId)
                writer.writeInt32(9, this.exploratoryRewardId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Mission {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new Mission();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.mainMission, () => message.mainMission = common.MissionUnit.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.taleMission, () => pb_1.Message.addToRepeatedWrapperField(message, 2, common.MissionUnit.deserialize(reader), common.MissionUnit));
                        break;
                    case 3:
                        reader.readMessage(message.branchMission, () => pb_1.Message.addToRepeatedWrapperField(message, 3, common.MissionUnit.deserialize(reader), common.MissionUnit));
                        break;
                    case 4:
                        message.finishMissions.push(reader.readInt32());
                        break;
                    case 6:
                        reader.readMessage(message.mainChapter, () => pb_1.Message.addToRepeatedWrapperField(message, 6, common.MissionChapter.deserialize(reader), common.MissionChapter));
                        break;
                    case 7:
                        reader.readMessage(message.targetChapter, () => pb_1.Message.addToRepeatedWrapperField(message, 7, common.MissionTargetChapter.deserialize(reader), common.MissionTargetChapter));
                        break;
                    case 8:
                        message.exploratory = reader.readInt32();
                        break;
                    case 9:
                        message.exploratoryRewardId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class World extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [1, 2, 3, 4], null);
        }
        get fortress(): common.Fortress[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Fortress, 1) as common.Fortress[];
        }
        set fortress(value: common.Fortress[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get nationList(): number[] {
            return pb_1.Message.getField(this, 2) as number[];
        }
        set nationList(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get district(): common.District[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.District, 3) as common.District[];
        }
        set district(value: common.District[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get worldMap(): common.WorldMap[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.WorldMap, 4) as common.WorldMap[];
        }
        set worldMap(value: common.WorldMap[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        toObject() {
            return {
                fortress: this.fortress,
                nationList: this.nationList,
                district: this.district,
                worldMap: this.worldMap
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.fortress)
                writer.writeRepeatedMessage(1, this.fortress, (item: common.Fortress) => item.serialize(writer));
            if (this.nationList)
                writer.writeRepeatedInt32(2, this.nationList);
            if (this.district)
                writer.writeRepeatedMessage(3, this.district, (item: common.District) => item.serialize(writer));
            if (this.worldMap)
                writer.writeRepeatedMessage(4, this.worldMap, (item: common.WorldMap) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): World {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new World();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.fortress, () => pb_1.Message.addToRepeatedWrapperField(message, 1, common.Fortress.deserialize(reader), common.Fortress));
                        break;
                    case 2:
                        message.nationList.push(reader.readInt32());
                        break;
                    case 3:
                        reader.readMessage(message.district, () => pb_1.Message.addToRepeatedWrapperField(message, 3, common.District.deserialize(reader), common.District));
                        break;
                    case 4:
                        reader.readMessage(message.worldMap, () => pb_1.Message.addToRepeatedWrapperField(message, 4, common.WorldMap.deserialize(reader), common.WorldMap));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_WorldData extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get world(): World | undefined {
            return pb_1.Message.getWrapperField(this, World, 4) as World | undefined;
        }
        set world(value: World) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                world: this.world
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.world)
                writer.writeMessage(4, this.world, (item: World) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_WorldData {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_WorldData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.world, () => message.world = World.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_MissionFight extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get missionID(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set missionID(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get fightID(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set fightID(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                missionID: this.missionID,
                fightID: this.fightID
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.missionID)
                writer.writeInt32(4, this.missionID);
            if (this.fightID)
                writer.writeInt32(5, this.fightID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_MissionFight {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_MissionFight();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.missionID = reader.readInt32();
                        break;
                    case 5:
                        message.fightID = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_MissionEnterFight extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get missionID(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set missionID(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get fightID(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set fightID(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get ver(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 200, undefined) as string | undefined;
        }
        set ver(value: string) {
            pb_1.Message.setField(this, 200, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                missionID: this.missionID,
                fightID: this.fightID,
                ver: this.ver
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.missionID)
                writer.writeInt32(4, this.missionID);
            if (this.fightID)
                writer.writeInt32(5, this.fightID);
            if (this.ver)
                writer.writeString(200, this.ver);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_MissionEnterFight {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_MissionEnterFight();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.missionID = reader.readInt32();
                        break;
                    case 5:
                        message.fightID = reader.readInt32();
                        break;
                    case 200:
                        message.ver = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_MissionEnterFight extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get battleInfo(): common.BattleStartInfo | undefined {
            return pb_1.Message.getWrapperField(this, common.BattleStartInfo, 4) as common.BattleStartInfo | undefined;
        }
        set battleInfo(value: common.BattleStartInfo) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                battleInfo: this.battleInfo
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.battleInfo)
                writer.writeMessage(4, this.battleInfo, (item: common.BattleStartInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_MissionEnterFight {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_MissionEnterFight();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.battleInfo, () => message.battleInfo = common.BattleStartInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_MissionEndFight extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get missionID(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set missionID(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get fightID(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set fightID(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get battleResult(): common.BattleResultInfo | undefined {
            return pb_1.Message.getWrapperField(this, common.BattleResultInfo, 6) as common.BattleResultInfo | undefined;
        }
        set battleResult(value: common.BattleResultInfo) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                missionID: this.missionID,
                fightID: this.fightID,
                battleResult: this.battleResult
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.missionID)
                writer.writeInt32(4, this.missionID);
            if (this.fightID)
                writer.writeInt32(5, this.fightID);
            if (this.battleResult)
                writer.writeMessage(6, this.battleResult, (item: common.BattleResultInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_MissionEndFight {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_MissionEndFight();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.missionID = reader.readInt32();
                        break;
                    case 5:
                        message.fightID = reader.readInt32();
                        break;
                    case 6:
                        reader.readMessage(message.battleResult, () => message.battleResult = common.BattleResultInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_MissionBattleResult extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [6], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get star(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set star(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get win(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as boolean | undefined;
        }
        set win(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get missionReward(): common.Item[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Item, 6) as common.Item[];
        }
        set missionReward(value: common.Item[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                star: this.star,
                win: this.win,
                missionReward: this.missionReward
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.star)
                writer.writeInt32(4, this.star);
            if (this.win)
                writer.writeBool(5, this.win);
            if (this.missionReward)
                writer.writeRepeatedMessage(6, this.missionReward, (item: common.Item) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_MissionBattleResult {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_MissionBattleResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.star = reader.readInt32();
                        break;
                    case 5:
                        message.win = reader.readBool();
                        break;
                    case 6:
                        reader.readMessage(message.missionReward, () => pb_1.Message.addToRepeatedWrapperField(message, 6, common.Item.deserialize(reader), common.Item));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_BattleResult extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get star(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set star(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get win(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as boolean | undefined;
        }
        set win(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                star: this.star,
                win: this.win
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.star)
                writer.writeInt32(4, this.star);
            if (this.win)
                writer.writeBool(5, this.win);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_BattleResult {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_BattleResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.star = reader.readInt32();
                        break;
                    case 5:
                        message.win = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_Mission extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get missionID(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set missionID(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                missionID: this.missionID
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.missionID)
                writer.writeInt32(4, this.missionID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_Mission {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_Mission();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.missionID = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_FinishMission extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get missionID(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set missionID(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                missionID: this.missionID
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.missionID)
                writer.writeInt32(4, this.missionID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_FinishMission {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_FinishMission();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.missionID = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_Fortress extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get fortressID(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set fortressID(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get param(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set param(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                fortressID: this.fortressID,
                param: this.param
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.fortressID)
                writer.writeInt32(4, this.fortressID);
            if (this.param)
                writer.writeUint32(5, this.param);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_Fortress {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_Fortress();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.fortressID = reader.readInt32();
                        break;
                    case 5:
                        message.param = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_MissionChapter extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get chapterId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set chapterId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get index(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set index(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                chapterId: this.chapterId,
                index: this.index
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.chapterId)
                writer.writeInt32(4, this.chapterId);
            if (this.index)
                writer.writeInt32(5, this.index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_MissionChapter {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_MissionChapter();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.chapterId = reader.readInt32();
                        break;
                    case 5:
                        message.index = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_MissionChapter extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_MissionChapter {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_MissionChapter();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_ExploreMissionChapter extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get targetId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set targetId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                targetId: this.targetId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.targetId)
                writer.writeInt32(4, this.targetId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_ExploreMissionChapter {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_ExploreMissionChapter();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.targetId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_EventMissionChapter extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get targetId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set targetId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                targetId: this.targetId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.targetId)
                writer.writeInt32(4, this.targetId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_EventMissionChapter {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_EventMissionChapter();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.targetId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_TargetMissionChapter extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get targetId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set targetId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                targetId: this.targetId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.targetId)
                writer.writeInt32(4, this.targetId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_TargetMissionChapter {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_TargetMissionChapter();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.targetId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class History extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [1], null);
        }
        get historyChapters(): HistoryChapter[] {
            return pb_1.Message.getRepeatedWrapperField(this, HistoryChapter, 1) as HistoryChapter[];
        }
        set historyChapters(value: HistoryChapter[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        toObject() {
            return {
                historyChapters: this.historyChapters
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.historyChapters)
                writer.writeRepeatedMessage(1, this.historyChapters, (item: HistoryChapter) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): History {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new History();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.historyChapters, () => pb_1.Message.addToRepeatedWrapperField(message, 1, HistoryChapter.deserialize(reader), HistoryChapter));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class HistoryChapter extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [2, 3, 4], null);
        }
        get chapterID(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set chapterID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get finishMissions(): number[] {
            return pb_1.Message.getField(this, 2) as number[];
        }
        set finishMissions(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get unlockMissions(): number[] {
            return pb_1.Message.getField(this, 3) as number[];
        }
        set unlockMissions(value: number[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get takenAwardIds(): number[] {
            return pb_1.Message.getField(this, 4) as number[];
        }
        set takenAwardIds(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                chapterID: this.chapterID,
                finishMissions: this.finishMissions,
                unlockMissions: this.unlockMissions,
                takenAwardIds: this.takenAwardIds
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chapterID)
                writer.writeInt32(1, this.chapterID);
            if (this.finishMissions)
                writer.writeRepeatedInt32(2, this.finishMissions);
            if (this.unlockMissions)
                writer.writeRepeatedInt32(3, this.unlockMissions);
            if (this.takenAwardIds)
                writer.writeRepeatedInt32(4, this.takenAwardIds);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HistoryChapter {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new HistoryChapter();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chapterID = reader.readInt32();
                        break;
                    case 2:
                        message.finishMissions.push(reader.readInt32());
                        break;
                    case 3:
                        message.unlockMissions.push(reader.readInt32());
                        break;
                    case 4:
                        message.takenAwardIds.push(reader.readInt32());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_HistoryTakeAwards extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get historyId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set historyId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get awardIdx(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set awardIdx(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                historyId: this.historyId,
                awardIdx: this.awardIdx
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.historyId)
                writer.writeInt32(4, this.historyId);
            if (this.awardIdx)
                writer.writeInt32(5, this.awardIdx);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_HistoryTakeAwards {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_HistoryTakeAwards();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.historyId = reader.readInt32();
                        break;
                    case 5:
                        message.awardIdx = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_HistoryUnlockMission extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get historyMissionId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set historyMissionId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                historyMissionId: this.historyMissionId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.historyMissionId)
                writer.writeInt32(4, this.historyMissionId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_HistoryUnlockMission {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_HistoryUnlockMission();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.historyMissionId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class Dungeon extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [1, 2], null);
        }
        get levels(): common.DungeonLevel[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.DungeonLevel, 1) as common.DungeonLevel[];
        }
        set levels(value: common.DungeonLevel[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get chapters(): common.DungeonChapter[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.DungeonChapter, 2) as common.DungeonChapter[];
        }
        set chapters(value: common.DungeonChapter[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        toObject() {
            return {
                levels: this.levels,
                chapters: this.chapters
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.levels)
                writer.writeRepeatedMessage(1, this.levels, (item: common.DungeonLevel) => item.serialize(writer));
            if (this.chapters)
                writer.writeRepeatedMessage(2, this.chapters, (item: common.DungeonChapter) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Dungeon {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new Dungeon();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.levels, () => pb_1.Message.addToRepeatedWrapperField(message, 1, common.DungeonLevel.deserialize(reader), common.DungeonLevel));
                        break;
                    case 2:
                        reader.readMessage(message.chapters, () => pb_1.Message.addToRepeatedWrapperField(message, 2, common.DungeonChapter.deserialize(reader), common.DungeonChapter));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_Instance extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get instanceId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set instanceId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                instanceId: this.instanceId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.instanceId)
                writer.writeInt32(4, this.instanceId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_Instance {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_Instance();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.instanceId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_EnterDungeon extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get dungeonID(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set dungeonID(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get ver(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 200, undefined) as string | undefined;
        }
        set ver(value: string) {
            pb_1.Message.setField(this, 200, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                dungeonID: this.dungeonID,
                ver: this.ver
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.dungeonID)
                writer.writeInt32(4, this.dungeonID);
            if (this.ver)
                writer.writeString(200, this.ver);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_EnterDungeon {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_EnterDungeon();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.dungeonID = reader.readInt32();
                        break;
                    case 200:
                        message.ver = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_EnterDungeon extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get battleInfo(): common.BattleStartInfo | undefined {
            return pb_1.Message.getWrapperField(this, common.BattleStartInfo, 4) as common.BattleStartInfo | undefined;
        }
        set battleInfo(value: common.BattleStartInfo) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                battleInfo: this.battleInfo
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.battleInfo)
                writer.writeMessage(4, this.battleInfo, (item: common.BattleStartInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_EnterDungeon {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_EnterDungeon();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.battleInfo, () => message.battleInfo = common.BattleStartInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_EndDungeon extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get dungeonID(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set dungeonID(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get battleResult(): common.BattleResultInfo | undefined {
            return pb_1.Message.getWrapperField(this, common.BattleResultInfo, 5) as common.BattleResultInfo | undefined;
        }
        set battleResult(value: common.BattleResultInfo) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                dungeonID: this.dungeonID,
                battleResult: this.battleResult
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.dungeonID)
                writer.writeInt32(4, this.dungeonID);
            if (this.battleResult)
                writer.writeMessage(5, this.battleResult, (item: common.BattleResultInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_EndDungeon {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_EndDungeon();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.dungeonID = reader.readInt32();
                        break;
                    case 5:
                        reader.readMessage(message.battleResult, () => message.battleResult = common.BattleResultInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_SweepDungeon extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get dungeonID(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set dungeonID(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get count(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get obtainItemId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as number | undefined;
        }
        set obtainItemId(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get obtainItemCount(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 7, undefined) as number | undefined;
        }
        set obtainItemCount(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                dungeonID: this.dungeonID,
                count: this.count,
                obtainItemId: this.obtainItemId,
                obtainItemCount: this.obtainItemCount
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.dungeonID)
                writer.writeInt32(4, this.dungeonID);
            if (this.count)
                writer.writeUint32(5, this.count);
            if (this.obtainItemId)
                writer.writeInt32(6, this.obtainItemId);
            if (this.obtainItemCount)
                writer.writeUint32(7, this.obtainItemCount);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_SweepDungeon {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_SweepDungeon();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.dungeonID = reader.readInt32();
                        break;
                    case 5:
                        message.count = reader.readUint32();
                        break;
                    case 6:
                        message.obtainItemId = reader.readInt32();
                        break;
                    case 7:
                        message.obtainItemCount = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_SweepSpecialty extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get specialtyId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set specialtyId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get count(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get obtainItemId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as number | undefined;
        }
        set obtainItemId(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get obtainItemCount(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 7, undefined) as number | undefined;
        }
        set obtainItemCount(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                specialtyId: this.specialtyId,
                count: this.count,
                obtainItemId: this.obtainItemId,
                obtainItemCount: this.obtainItemCount
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.specialtyId)
                writer.writeInt32(4, this.specialtyId);
            if (this.count)
                writer.writeUint32(5, this.count);
            if (this.obtainItemId)
                writer.writeInt32(6, this.obtainItemId);
            if (this.obtainItemCount)
                writer.writeUint32(7, this.obtainItemCount);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_SweepSpecialty {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_SweepSpecialty();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.specialtyId = reader.readInt32();
                        break;
                    case 5:
                        message.count = reader.readUint32();
                        break;
                    case 6:
                        message.obtainItemId = reader.readInt32();
                        break;
                    case 7:
                        message.obtainItemCount = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_SweepResult extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get stopReason(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set stopReason(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                stopReason: this.stopReason
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.stopReason)
                writer.writeInt32(4, this.stopReason);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_SweepResult {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_SweepResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.stopReason = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_DungeonChapterReward extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get chapterID(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set chapterID(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get rewardIndex(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set rewardIndex(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                chapterID: this.chapterID,
                rewardIndex: this.rewardIndex
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.chapterID)
                writer.writeInt32(4, this.chapterID);
            if (this.rewardIndex)
                writer.writeUint32(5, this.rewardIndex);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_DungeonChapterReward {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_DungeonChapterReward();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.chapterID = reader.readInt32();
                        break;
                    case 5:
                        message.rewardIndex = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_ConnectReward extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get chapterId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set chapterId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get stageId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set stageId(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                chapterId: this.chapterId,
                stageId: this.stageId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.chapterId)
                writer.writeInt32(4, this.chapterId);
            if (this.stageId)
                writer.writeInt32(5, this.stageId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_ConnectReward {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_ConnectReward();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.chapterId = reader.readInt32();
                        break;
                    case 5:
                        message.stageId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_Train extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get trainId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set trainId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                trainId: this.trainId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.trainId)
                writer.writeInt32(4, this.trainId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_Train {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_Train();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.trainId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_TrainRecord extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_TrainRecord {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_TrainRecord();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_TrainRecord extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get items(): common.TrainItem[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.TrainItem, 4) as common.TrainItem[];
        }
        set items(value: common.TrainItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                items: this.items
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.items)
                writer.writeRepeatedMessage(4, this.items, (item: common.TrainItem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_TrainRecord {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_TrainRecord();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 4, common.TrainItem.deserialize(reader), common.TrainItem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_TrainReplay extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get replays(): common.ReplaySimple[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.ReplaySimple, 4) as common.ReplaySimple[];
        }
        set replays(value: common.ReplaySimple[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                replays: this.replays
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.replays)
                writer.writeRepeatedMessage(4, this.replays, (item: common.ReplaySimple) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_TrainReplay {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_TrainReplay();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.replays, () => pb_1.Message.addToRepeatedWrapperField(message, 4, common.ReplaySimple.deserialize(reader), common.ReplaySimple));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_TrainFormation extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get id(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                id: this.id
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.id)
                writer.writeInt32(4, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_TrainFormation {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_TrainFormation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_TrainFormation extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get id(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get formation(): common.Formation | undefined {
            return pb_1.Message.getWrapperField(this, common.Formation, 5) as common.Formation | undefined;
        }
        set formation(value: common.Formation) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                id: this.id,
                formation: this.formation
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.id)
                writer.writeInt32(4, this.id);
            if (this.formation)
                writer.writeMessage(5, this.formation, (item: common.Formation) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_TrainFormation {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_TrainFormation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.id = reader.readInt32();
                        break;
                    case 5:
                        reader.readMessage(message.formation, () => message.formation = common.Formation.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class TrainFormation extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get id(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get formation(): common.Formation | undefined {
            return pb_1.Message.getWrapperField(this, common.Formation, 5) as common.Formation | undefined;
        }
        set formation(value: common.Formation) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get ver(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 200, undefined) as string | undefined;
        }
        set ver(value: string) {
            pb_1.Message.setField(this, 200, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                id: this.id,
                formation: this.formation,
                ver: this.ver
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.id)
                writer.writeInt32(4, this.id);
            if (this.formation)
                writer.writeMessage(5, this.formation, (item: common.Formation) => item.serialize(writer));
            if (this.ver)
                writer.writeString(200, this.ver);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TrainFormation {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new TrainFormation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.id = reader.readInt32();
                        break;
                    case 5:
                        reader.readMessage(message.formation, () => message.formation = common.Formation.deserialize(reader));
                        break;
                    case 200:
                        message.ver = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_EnterTrainFight extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get battleInfo(): common.BattleStartInfo | undefined {
            return pb_1.Message.getWrapperField(this, common.BattleStartInfo, 4) as common.BattleStartInfo | undefined;
        }
        set battleInfo(value: common.BattleStartInfo) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                battleInfo: this.battleInfo
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.battleInfo)
                writer.writeMessage(4, this.battleInfo, (item: common.BattleStartInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_EnterTrainFight {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_EnterTrainFight();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.battleInfo, () => message.battleInfo = common.BattleStartInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class C_TrainFight extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get id(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get battleResult(): common.BattleResultInfo | undefined {
            return pb_1.Message.getWrapperField(this, common.BattleResultInfo, 5) as common.BattleResultInfo | undefined;
        }
        set battleResult(value: common.BattleResultInfo) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                id: this.id,
                battleResult: this.battleResult
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.id)
                writer.writeInt32(4, this.id);
            if (this.battleResult)
                writer.writeMessage(5, this.battleResult, (item: common.BattleResultInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_TrainFight {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new C_TrainFight();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.id = reader.readInt32();
                        break;
                    case 5:
                        reader.readMessage(message.battleResult, () => message.battleResult = common.BattleResultInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class S_TrainBattle extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get star(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set star(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get win(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as boolean | undefined;
        }
        set win(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get replay(): common.ReplaySimple | undefined {
            return pb_1.Message.getWrapperField(this, common.ReplaySimple, 6) as common.ReplaySimple | undefined;
        }
        set replay(value: common.ReplaySimple) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                star: this.star,
                win: this.win,
                replay: this.replay
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.star)
                writer.writeInt32(4, this.star);
            if (this.win)
                writer.writeBool(5, this.win);
            if (this.replay)
                writer.writeMessage(6, this.replay, (item: common.ReplaySimple) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_TrainBattle {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new S_TrainBattle();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.star = reader.readInt32();
                        break;
                    case 5:
                        message.win = reader.readBool();
                        break;
                    case 6:
                        reader.readMessage(message.replay, () => message.replay = common.ReplaySimple.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class GuildPlayer extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [11], null);
        }
        get uid(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as string | undefined;
        }
        set uid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get icon(): common.PlayerHeadPortrait | undefined {
            return pb_1.Message.getWrapperField(this, common.PlayerHeadPortrait, 2) as common.PlayerHeadPortrait | undefined;
        }
        set icon(value: common.PlayerHeadPortrait) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get power(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as number | undefined;
        }
        set power(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get lastLogout(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set lastLogout(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get counsellorId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set counsellorId(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get counsellorStar(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as number | undefined;
        }
        set counsellorStar(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get officialType(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 7, undefined) as number | undefined;
        }
        set officialType(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get dayContribution(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 8, undefined) as string | undefined;
        }
        set dayContribution(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get totalContribution(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 10, undefined) as string | undefined;
        }
        set totalContribution(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get hideVipSystems(): number[] {
            return pb_1.Message.getField(this, 11) as number[];
        }
        set hideVipSystems(value: number[]) {
            pb_1.Message.setField(this, 11, value);
        }
        get showCommanderId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 12, undefined) as number | undefined;
        }
        set showCommanderId(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        toObject() {
            return {
                uid: this.uid,
                icon: this.icon,
                power: this.power,
                lastLogout: this.lastLogout,
                counsellorId: this.counsellorId,
                counsellorStar: this.counsellorStar,
                officialType: this.officialType,
                dayContribution: this.dayContribution,
                totalContribution: this.totalContribution,
                hideVipSystems: this.hideVipSystems,
                showCommanderId: this.showCommanderId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.uid)
                writer.writeUint64String(1, this.uid);
            if (this.icon)
                writer.writeMessage(2, this.icon, (item: common.PlayerHeadPortrait) => item.serialize(writer));
            if (this.power)
                writer.writeUint32(3, this.power);
            if (this.lastLogout)
                writer.writeInt64String(4, this.lastLogout);
            if (this.counsellorId)
                writer.writeInt32(5, this.counsellorId);
            if (this.counsellorStar)
                writer.writeUint32(6, this.counsellorStar);
            if (this.officialType)
                writer.writeInt32(7, this.officialType);
            if (this.dayContribution)
                writer.writeUint64String(8, this.dayContribution);
            if (this.totalContribution)
                writer.writeUint64String(10, this.totalContribution);
            if (this.hideVipSystems)
                writer.writeRepeatedInt32(11, this.hideVipSystems);
            if (this.showCommanderId)
                writer.writeInt32(12, this.showCommanderId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GuildPlayer {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new GuildPlayer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uid = reader.readUint64String();
                        break;
                    case 2:
                        reader.readMessage(message.icon, () => message.icon = common.PlayerHeadPortrait.deserialize(reader));
                        break;
                    case 3:
                        message.power = reader.readUint32();
                        break;
                    case 4:
                        message.lastLogout = reader.readInt64String();
                        break;
                    case 5:
                        message.counsellorId = reader.readInt32();
                        break;
                    case 6:
                        message.counsellorStar = reader.readUint32();
                        break;
                    case 7:
                        message.officialType = reader.readInt32();
                        break;
                    case 8:
                        message.dayContribution = reader.readUint64String();
                        break;
                    case 10:
                        message.totalContribution = reader.readUint64String();
                        break;
                    case 11:
                        message.hideVipSystems.push(reader.readInt32());
                        break;
                    case 12:
                        message.showCommanderId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class GuildGoods extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get uid(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set uid(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get tid(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set tid(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get owner(): common.PlayerHeadPortrait | undefined {
            return pb_1.Message.getWrapperField(this, common.PlayerHeadPortrait, 3) as common.PlayerHeadPortrait | undefined;
        }
        set owner(value: common.PlayerHeadPortrait) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get priceShift(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set priceShift(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get time(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get hasSold(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as boolean | undefined;
        }
        set hasSold(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        toObject() {
            return {
                uid: this.uid,
                tid: this.tid,
                owner: this.owner,
                priceShift: this.priceShift,
                time: this.time,
                hasSold: this.hasSold
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.uid)
                writer.writeUint64(1, this.uid);
            if (this.tid)
                writer.writeInt32(2, this.tid);
            if (this.owner)
                writer.writeMessage(3, this.owner, (item: common.PlayerHeadPortrait) => item.serialize(writer));
            if (this.priceShift)
                writer.writeInt32(4, this.priceShift);
            if (this.time)
                writer.writeInt64(5, this.time);
            if (this.hasSold)
                writer.writeBool(6, this.hasSold);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GuildGoods {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new GuildGoods();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uid = reader.readUint64();
                        break;
                    case 2:
                        message.tid = reader.readInt32();
                        break;
                    case 3:
                        reader.readMessage(message.owner, () => message.owner = common.PlayerHeadPortrait.deserialize(reader));
                        break;
                    case 4:
                        message.priceShift = reader.readInt32();
                        break;
                    case 5:
                        message.time = reader.readInt64();
                        break;
                    case 6:
                        message.hasSold = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class GuildBuilding extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get buildId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set buildId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get lv(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set lv(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get exp(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as number | undefined;
        }
        set exp(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        toObject() {
            return {
                buildId: this.buildId,
                lv: this.lv,
                exp: this.exp
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.buildId)
                writer.writeInt32(1, this.buildId);
            if (this.lv)
                writer.writeUint32(2, this.lv);
            if (this.exp)
                writer.writeUint32(3, this.exp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GuildBuilding {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new GuildBuilding();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.buildId = reader.readInt32();
                        break;
                    case 2:
                        message.lv = reader.readUint32();
                        break;
                    case 3:
                        message.exp = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class Guild extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [26, 32, 35], null);
        }
        get guildId(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as string | undefined;
        }
        set guildId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as string | undefined;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get createTime(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set createTime(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get declaration(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set declaration(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get word(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as string | undefined;
        }
        set word(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get badge(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as number | undefined;
        }
        set badge(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get flagSide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 7, undefined) as number | undefined;
        }
        set flagSide(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get color(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 8, undefined) as number | undefined;
        }
        set color(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get presidentId(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 10, undefined) as string | undefined;
        }
        set presidentId(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get presidentIcon(): common.PlayerHeadPortrait | undefined {
            return pb_1.Message.getWrapperField(this, common.PlayerHeadPortrait, 11) as common.PlayerHeadPortrait | undefined;
        }
        set presidentIcon(value: common.PlayerHeadPortrait) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get presidentPower(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 12, undefined) as number | undefined;
        }
        set presidentPower(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get membersCount(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 22, undefined) as number | undefined;
        }
        set membersCount(value: number) {
            pb_1.Message.setField(this, 22, value);
        }
        get confirm(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 23, undefined) as boolean | undefined;
        }
        set confirm(value: boolean) {
            pb_1.Message.setField(this, 23, value);
        }
        get levelLimit(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 24, undefined) as number | undefined;
        }
        set levelLimit(value: number) {
            pb_1.Message.setField(this, 24, value);
        }
        get totalPower(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 25, undefined) as string | undefined;
        }
        set totalPower(value: string) {
            pb_1.Message.setField(this, 25, value);
        }
        get members(): GuildPlayer[] {
            return pb_1.Message.getRepeatedWrapperField(this, GuildPlayer, 26) as GuildPlayer[];
        }
        set members(value: GuildPlayer[]) {
            pb_1.Message.setRepeatedWrapperField(this, 26, value);
        }
        get rank(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 27, undefined) as number | undefined;
        }
        set rank(value: number) {
            pb_1.Message.setField(this, 27, value);
        }
        get qq(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 28, undefined) as string | undefined;
        }
        set qq(value: string) {
            pb_1.Message.setField(this, 28, value);
        }
        get leftNoticeTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 29, undefined) as number | undefined;
        }
        set leftNoticeTimes(value: number) {
            pb_1.Message.setField(this, 29, value);
        }
        get Announcement(): common.GuildAnnouncement | undefined {
            return pb_1.Message.getWrapperField(this, common.GuildAnnouncement, 30) as common.GuildAnnouncement | undefined;
        }
        set Announcement(value: common.GuildAnnouncement) {
            pb_1.Message.setWrapperField(this, 30, value);
        }
        get buildings(): GuildBuilding[] {
            return pb_1.Message.getRepeatedWrapperField(this, GuildBuilding, 32) as GuildBuilding[];
        }
        set buildings(value: GuildBuilding[]) {
            pb_1.Message.setRepeatedWrapperField(this, 32, value);
        }
        get todayTotalBuildPeopleCount(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 33, undefined) as number | undefined;
        }
        set todayTotalBuildPeopleCount(value: number) {
            pb_1.Message.setField(this, 33, value);
        }
        get todayTotalActivity(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 34, undefined) as number | undefined;
        }
        set todayTotalActivity(value: number) {
            pb_1.Message.setField(this, 34, value);
        }
        get requests(): number[] {
            return pb_1.Message.getField(this, 35) as number[];
        }
        set requests(value: number[]) {
            pb_1.Message.setField(this, 35, value);
        }
        toObject() {
            return {
                guildId: this.guildId,
                name: this.name,
                createTime: this.createTime,
                declaration: this.declaration,
                word: this.word,
                badge: this.badge,
                flagSide: this.flagSide,
                color: this.color,
                presidentId: this.presidentId,
                presidentIcon: this.presidentIcon,
                presidentPower: this.presidentPower,
                membersCount: this.membersCount,
                confirm: this.confirm,
                levelLimit: this.levelLimit,
                totalPower: this.totalPower,
                members: this.members,
                rank: this.rank,
                qq: this.qq,
                leftNoticeTimes: this.leftNoticeTimes,
                Announcement: this.Announcement,
                buildings: this.buildings,
                todayTotalBuildPeopleCount: this.todayTotalBuildPeopleCount,
                todayTotalActivity: this.todayTotalActivity,
                requests: this.requests
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.guildId)
                writer.writeUint64String(1, this.guildId);
            if (this.name)
                writer.writeString(2, this.name);
            if (this.createTime)
                writer.writeInt64String(3, this.createTime);
            if (this.declaration)
                writer.writeString(4, this.declaration);
            if (this.word)
                writer.writeString(5, this.word);
            if (this.badge)
                writer.writeInt32(6, this.badge);
            if (this.flagSide)
                writer.writeInt32(7, this.flagSide);
            if (this.color)
                writer.writeInt32(8, this.color);
            if (this.presidentId)
                writer.writeUint64String(10, this.presidentId);
            if (this.presidentIcon)
                writer.writeMessage(11, this.presidentIcon, (item: common.PlayerHeadPortrait) => item.serialize(writer));
            if (this.presidentPower)
                writer.writeUint32(12, this.presidentPower);
            if (this.membersCount)
                writer.writeUint32(22, this.membersCount);
            if (this.confirm)
                writer.writeBool(23, this.confirm);
            if (this.levelLimit)
                writer.writeUint32(24, this.levelLimit);
            if (this.totalPower)
                writer.writeUint64String(25, this.totalPower);
            if (this.members)
                writer.writeRepeatedMessage(26, this.members, (item: GuildPlayer) => item.serialize(writer));
            if (this.rank)
                writer.writeUint32(27, this.rank);
            if (this.qq)
                writer.writeUint64String(28, this.qq);
            if (this.leftNoticeTimes)
                writer.writeUint32(29, this.leftNoticeTimes);
            if (this.Announcement)
                writer.writeMessage(30, this.Announcement, (item: common.GuildAnnouncement) => item.serialize(writer));
            if (this.buildings)
                writer.writeRepeatedMessage(32, this.buildings, (item: GuildBuilding) => item.serialize(writer));
            if (this.todayTotalBuildPeopleCount)
                writer.writeUint32(33, this.todayTotalBuildPeopleCount);
            if (this.todayTotalActivity)
                writer.writeUint32(34, this.todayTotalActivity);
            if (this.requests)
                writer.writeRepeatedUint64(35, this.requests);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Guild {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new Guild();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.guildId = reader.readUint64String();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.createTime = reader.readInt64String();
                        break;
                    case 4:
                        message.declaration = reader.readString();
                        break;
                    case 5:
                        message.word = reader.readString();
                        break;
                    case 6:
                        message.badge = reader.readInt32();
                        break;
                    case 7:
                        message.flagSide = reader.readInt32();
                        break;
                    case 8:
                        message.color = reader.readInt32();
                        break;
                    case 10:
                        message.presidentId = reader.readUint64String();
                        break;
                    case 11:
                        reader.readMessage(message.presidentIcon, () => message.presidentIcon = common.PlayerHeadPortrait.deserialize(reader));
                        break;
                    case 12:
                        message.presidentPower = reader.readUint32();
                        break;
                    case 22:
                        message.membersCount = reader.readUint32();
                        break;
                    case 23:
                        message.confirm = reader.readBool();
                        break;
                    case 24:
                        message.levelLimit = reader.readUint32();
                        break;
                    case 25:
                        message.totalPower = reader.readUint64String();
                        break;
                    case 26:
                        reader.readMessage(message.members, () => pb_1.Message.addToRepeatedWrapperField(message, 26, GuildPlayer.deserialize(reader), GuildPlayer));
                        break;
                    case 27:
                        message.rank = reader.readUint32();
                        break;
                    case 28:
                        message.qq = reader.readUint64String();
                        break;
                    case 29:
                        message.leftNoticeTimes = reader.readUint32();
                        break;
                    case 30:
                        reader.readMessage(message.Announcement, () => message.Announcement = common.GuildAnnouncement.deserialize(reader));
                        break;
                    case 32:
                        reader.readMessage(message.buildings, () => pb_1.Message.addToRepeatedWrapperField(message, 32, GuildBuilding.deserialize(reader), GuildBuilding));
                        break;
                    case 33:
                        message.todayTotalBuildPeopleCount = reader.readUint32();
                        break;
                    case 34:
                        message.todayTotalActivity = reader.readUint32();
                        break;
                    case 35:
                        message.requests.push(reader.readUint64());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SimpleGuild extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get guildId(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as string | undefined;
        }
        set guildId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as string | undefined;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get declaration(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set declaration(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get word(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set word(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get badge(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set badge(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get flagSide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as number | undefined;
        }
        set flagSide(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get color(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 7, undefined) as number | undefined;
        }
        set color(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get presidentId(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 10, undefined) as string | undefined;
        }
        set presidentId(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get presidentIcon(): common.PlayerHeadPortrait | undefined {
            return pb_1.Message.getWrapperField(this, common.PlayerHeadPortrait, 11) as common.PlayerHeadPortrait | undefined;
        }
        set presidentIcon(value: common.PlayerHeadPortrait) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get presidentPower(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 12, undefined) as number | undefined;
        }
        set presidentPower(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get level(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 20, undefined) as number | undefined;
        }
        set level(value: number) {
            pb_1.Message.setField(this, 20, value);
        }
        get exp(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 21, undefined) as number | undefined;
        }
        set exp(value: number) {
            pb_1.Message.setField(this, 21, value);
        }
        get membersCount(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 22, undefined) as number | undefined;
        }
        set membersCount(value: number) {
            pb_1.Message.setField(this, 22, value);
        }
        get confirm(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 23, undefined) as boolean | undefined;
        }
        set confirm(value: boolean) {
            pb_1.Message.setField(this, 23, value);
        }
        get levelLimit(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 24, undefined) as number | undefined;
        }
        set levelLimit(value: number) {
            pb_1.Message.setField(this, 24, value);
        }
        get totalPower(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 25, undefined) as string | undefined;
        }
        set totalPower(value: string) {
            pb_1.Message.setField(this, 25, value);
        }
        get hasRequest(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 26, undefined) as boolean | undefined;
        }
        set hasRequest(value: boolean) {
            pb_1.Message.setField(this, 26, value);
        }
        get rank(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 27, undefined) as number | undefined;
        }
        set rank(value: number) {
            pb_1.Message.setField(this, 27, value);
        }
        toObject() {
            return {
                guildId: this.guildId,
                name: this.name,
                declaration: this.declaration,
                word: this.word,
                badge: this.badge,
                flagSide: this.flagSide,
                color: this.color,
                presidentId: this.presidentId,
                presidentIcon: this.presidentIcon,
                presidentPower: this.presidentPower,
                level: this.level,
                exp: this.exp,
                membersCount: this.membersCount,
                confirm: this.confirm,
                levelLimit: this.levelLimit,
                totalPower: this.totalPower,
                hasRequest: this.hasRequest,
                rank: this.rank
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.guildId)
                writer.writeUint64String(1, this.guildId);
            if (this.name)
                writer.writeString(2, this.name);
            if (this.declaration)
                writer.writeString(3, this.declaration);
            if (this.word)
                writer.writeString(4, this.word);
            if (this.badge)
                writer.writeInt32(5, this.badge);
            if (this.flagSide)
                writer.writeInt32(6, this.flagSide);
            if (this.color)
                writer.writeInt32(7, this.color);
            if (this.presidentId)
                writer.writeUint64String(10, this.presidentId);
            if (this.presidentIcon)
                writer.writeMessage(11, this.presidentIcon, (item: common.PlayerHeadPortrait) => item.serialize(writer));
            if (this.presidentPower)
                writer.writeUint32(12, this.presidentPower);
            if (this.level)
                writer.writeUint32(20, this.level);
            if (this.exp)
                writer.writeUint32(21, this.exp);
            if (this.membersCount)
                writer.writeUint32(22, this.membersCount);
            if (this.confirm)
                writer.writeBool(23, this.confirm);
            if (this.levelLimit)
                writer.writeUint32(24, this.levelLimit);
            if (this.totalPower)
                writer.writeUint64String(25, this.totalPower);
            if (this.hasRequest)
                writer.writeBool(26, this.hasRequest);
            if (this.rank)
                writer.writeUint32(27, this.rank);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SimpleGuild {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SimpleGuild();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.guildId = reader.readUint64String();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.declaration = reader.readString();
                        break;
                    case 4:
                        message.word = reader.readString();
                        break;
                    case 5:
                        message.badge = reader.readInt32();
                        break;
                    case 6:
                        message.flagSide = reader.readInt32();
                        break;
                    case 7:
                        message.color = reader.readInt32();
                        break;
                    case 10:
                        message.presidentId = reader.readUint64String();
                        break;
                    case 11:
                        reader.readMessage(message.presidentIcon, () => message.presidentIcon = common.PlayerHeadPortrait.deserialize(reader));
                        break;
                    case 12:
                        message.presidentPower = reader.readUint32();
                        break;
                    case 20:
                        message.level = reader.readUint32();
                        break;
                    case 21:
                        message.exp = reader.readUint32();
                        break;
                    case 22:
                        message.membersCount = reader.readUint32();
                        break;
                    case 23:
                        message.confirm = reader.readBool();
                        break;
                    case 24:
                        message.levelLimit = reader.readUint32();
                        break;
                    case 25:
                        message.totalPower = reader.readUint64String();
                        break;
                    case 26:
                        message.hasRequest = reader.readBool();
                        break;
                    case 27:
                        message.rank = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_GetRecommendGuildList extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get page(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                page: this.page
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.page)
                writer.writeUint32(4, this.page);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_GetRecommendGuildList {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_GetRecommendGuildList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.page = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_SimpleGuildList extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [5], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get page(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get guildList(): SimpleGuild[] {
            return pb_1.Message.getRepeatedWrapperField(this, SimpleGuild, 5) as SimpleGuild[];
        }
        set guildList(value: SimpleGuild[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                page: this.page,
                guildList: this.guildList
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.page)
                writer.writeUint32(4, this.page);
            if (this.guildList)
                writer.writeRepeatedMessage(5, this.guildList, (item: SimpleGuild) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_SimpleGuildList {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_SimpleGuildList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.page = reader.readUint32();
                        break;
                    case 5:
                        reader.readMessage(message.guildList, () => pb_1.Message.addToRepeatedWrapperField(message, 5, SimpleGuild.deserialize(reader), SimpleGuild));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_SerachGuild extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get str(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set str(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                str: this.str
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.str)
                writer.writeString(4, this.str);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_SerachGuild {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_SerachGuild();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.str = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_CreateGuild extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get guildName(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set guildName(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get declaration(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as string | undefined;
        }
        set declaration(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get word(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as string | undefined;
        }
        set word(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get badge(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 7, undefined) as number | undefined;
        }
        set badge(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get flagSide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 8, undefined) as number | undefined;
        }
        set flagSide(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get color(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 9, undefined) as number | undefined;
        }
        set color(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                guildName: this.guildName,
                declaration: this.declaration,
                word: this.word,
                badge: this.badge,
                flagSide: this.flagSide,
                color: this.color
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.guildName)
                writer.writeString(4, this.guildName);
            if (this.declaration)
                writer.writeString(5, this.declaration);
            if (this.word)
                writer.writeString(6, this.word);
            if (this.badge)
                writer.writeInt32(7, this.badge);
            if (this.flagSide)
                writer.writeInt32(8, this.flagSide);
            if (this.color)
                writer.writeInt32(9, this.color);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_CreateGuild {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_CreateGuild();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.guildName = reader.readString();
                        break;
                    case 5:
                        message.declaration = reader.readString();
                        break;
                    case 6:
                        message.word = reader.readString();
                        break;
                    case 7:
                        message.badge = reader.readInt32();
                        break;
                    case 8:
                        message.flagSide = reader.readInt32();
                        break;
                    case 9:
                        message.color = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_CreateGuild extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get guild(): Guild | undefined {
            return pb_1.Message.getWrapperField(this, Guild, 4) as Guild | undefined;
        }
        set guild(value: Guild) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                guild: this.guild
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.guild)
                writer.writeMessage(4, this.guild, (item: Guild) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_CreateGuild {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_CreateGuild();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.guild, () => message.guild = Guild.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_RequestJoinGuild extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get guildId(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set guildId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                guildId: this.guildId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.guildId)
                writer.writeUint64String(4, this.guildId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_RequestJoinGuild {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_RequestJoinGuild();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.guildId = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_CancelJoinGuildRequest extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get guildId(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set guildId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                guildId: this.guildId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.guildId)
                writer.writeUint64String(4, this.guildId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_CancelJoinGuildRequest {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_CancelJoinGuildRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.guildId = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_DealRequestJoinGuild extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get uid(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set uid(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get agree(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as boolean | undefined;
        }
        set agree(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                uid: this.uid,
                agree: this.agree
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.uid)
                writer.writeUint64String(4, this.uid);
            if (this.agree)
                writer.writeBool(5, this.agree);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_DealRequestJoinGuild {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_DealRequestJoinGuild();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.uid = reader.readUint64String();
                        break;
                    case 5:
                        message.agree = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_FastAgreeJoinGuild extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [5], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get extCode(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as ret.RET | undefined;
        }
        set extCode(value: ret.RET) {
            pb_1.Message.setField(this, 4, value);
        }
        get successList(): RequestGuildRequestPlayer[] {
            return pb_1.Message.getRepeatedWrapperField(this, RequestGuildRequestPlayer, 5) as RequestGuildRequestPlayer[];
        }
        set successList(value: RequestGuildRequestPlayer[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                extCode: this.extCode,
                successList: this.successList
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.extCode)
                writer.writeEnum(4, this.extCode);
            if (this.successList)
                writer.writeRepeatedMessage(5, this.successList, (item: RequestGuildRequestPlayer) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_FastAgreeJoinGuild {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_FastAgreeJoinGuild();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.extCode = reader.readEnum();
                        break;
                    case 5:
                        reader.readMessage(message.successList, () => pb_1.Message.addToRepeatedWrapperField(message, 5, RequestGuildRequestPlayer.deserialize(reader), RequestGuildRequestPlayer));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_KickMember extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get uid(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set uid(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                uid: this.uid
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.uid)
                writer.writeUint64String(4, this.uid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_KickMember {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_KickMember();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.uid = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class S_MemberLeave extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get uid(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set uid(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get activity(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as boolean | undefined;
        }
        set activity(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                uid: this.uid,
                activity: this.activity
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.uid)
                writer.writeUint64String(4, this.uid);
            if (this.activity)
                writer.writeBool(5, this.activity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_MemberLeave {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new S_MemberLeave();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.uid = reader.readUint64String();
                        break;
                    case 5:
                        message.activity = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_EnterGuild extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get guild(): Guild | undefined {
            return pb_1.Message.getWrapperField(this, Guild, 4) as Guild | undefined;
        }
        set guild(value: Guild) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get guildOfficialPositionChange(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as boolean | undefined;
        }
        set guildOfficialPositionChange(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                guild: this.guild,
                guildOfficialPositionChange: this.guildOfficialPositionChange
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.guild)
                writer.writeMessage(4, this.guild, (item: Guild) => item.serialize(writer));
            if (this.guildOfficialPositionChange)
                writer.writeBool(5, this.guildOfficialPositionChange);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_EnterGuild {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_EnterGuild();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.guild, () => message.guild = Guild.deserialize(reader));
                        break;
                    case 5:
                        message.guildOfficialPositionChange = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_GuildInfo extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_GuildInfo {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_GuildInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_GuildInfo extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get guild(): Guild | undefined {
            return pb_1.Message.getWrapperField(this, Guild, 4) as Guild | undefined;
        }
        set guild(value: Guild) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                guild: this.guild
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.guild)
                writer.writeMessage(4, this.guild, (item: Guild) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_GuildInfo {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_GuildInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.guild, () => message.guild = Guild.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_SetGuildInfo extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get word(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set word(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get badge(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set badge(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get flagSide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as number | undefined;
        }
        set flagSide(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get color(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 7, undefined) as number | undefined;
        }
        set color(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                word: this.word,
                badge: this.badge,
                flagSide: this.flagSide,
                color: this.color
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.word)
                writer.writeString(4, this.word);
            if (this.badge)
                writer.writeInt32(5, this.badge);
            if (this.flagSide)
                writer.writeInt32(6, this.flagSide);
            if (this.color)
                writer.writeInt32(7, this.color);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_SetGuildInfo {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_SetGuildInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.word = reader.readString();
                        break;
                    case 5:
                        message.badge = reader.readInt32();
                        break;
                    case 6:
                        message.flagSide = reader.readInt32();
                        break;
                    case 7:
                        message.color = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class RequestGuildRequestPlayer extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [5], null);
        }
        get uid(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as string | undefined;
        }
        set uid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get icon(): common.PlayerHeadPortrait | undefined {
            return pb_1.Message.getWrapperField(this, common.PlayerHeadPortrait, 2) as common.PlayerHeadPortrait | undefined;
        }
        set icon(value: common.PlayerHeadPortrait) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get vipLevel(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as number | undefined;
        }
        set vipLevel(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get power(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set power(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get hideVipSystems(): number[] {
            return pb_1.Message.getField(this, 5) as number[];
        }
        set hideVipSystems(value: number[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get showCommanderId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as number | undefined;
        }
        set showCommanderId(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get reqTime(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 7, undefined) as number | undefined;
        }
        set reqTime(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        toObject() {
            return {
                uid: this.uid,
                icon: this.icon,
                vipLevel: this.vipLevel,
                power: this.power,
                hideVipSystems: this.hideVipSystems,
                showCommanderId: this.showCommanderId,
                reqTime: this.reqTime
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.uid)
                writer.writeUint64String(1, this.uid);
            if (this.icon)
                writer.writeMessage(2, this.icon, (item: common.PlayerHeadPortrait) => item.serialize(writer));
            if (this.vipLevel)
                writer.writeUint32(3, this.vipLevel);
            if (this.power)
                writer.writeUint32(4, this.power);
            if (this.hideVipSystems)
                writer.writeRepeatedInt32(5, this.hideVipSystems);
            if (this.showCommanderId)
                writer.writeInt32(6, this.showCommanderId);
            if (this.reqTime)
                writer.writeInt64(7, this.reqTime);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestGuildRequestPlayer {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new RequestGuildRequestPlayer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uid = reader.readUint64String();
                        break;
                    case 2:
                        reader.readMessage(message.icon, () => message.icon = common.PlayerHeadPortrait.deserialize(reader));
                        break;
                    case 3:
                        message.vipLevel = reader.readUint32();
                        break;
                    case 4:
                        message.power = reader.readUint32();
                        break;
                    case 5:
                        message.hideVipSystems.push(reader.readInt32());
                        break;
                    case 6:
                        message.showCommanderId = reader.readInt32();
                        break;
                    case 7:
                        message.reqTime = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_RequestGuildRequestList extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get players(): RequestGuildRequestPlayer[] {
            return pb_1.Message.getRepeatedWrapperField(this, RequestGuildRequestPlayer, 4) as RequestGuildRequestPlayer[];
        }
        set players(value: RequestGuildRequestPlayer[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                players: this.players
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.players)
                writer.writeRepeatedMessage(4, this.players, (item: RequestGuildRequestPlayer) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_RequestGuildRequestList {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_RequestGuildRequestList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.players, () => pb_1.Message.addToRepeatedWrapperField(message, 4, RequestGuildRequestPlayer.deserialize(reader), RequestGuildRequestPlayer));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class S_NotifyJoinRequest extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get uid(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set uid(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get joinRequestState(): JoinRequestState | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as JoinRequestState | undefined;
        }
        set joinRequestState(value: JoinRequestState) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                uid: this.uid,
                joinRequestState: this.joinRequestState
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.uid)
                writer.writeUint64(4, this.uid);
            if (this.joinRequestState)
                writer.writeEnum(5, this.joinRequestState);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_NotifyJoinRequest {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new S_NotifyJoinRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.uid = reader.readUint64();
                        break;
                    case 5:
                        message.joinRequestState = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_NewGuildName extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get name(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                name: this.name
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.name)
                writer.writeString(4, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_NewGuildName {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_NewGuildName();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_NewGuildName extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get name(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                name: this.name
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.name)
                writer.writeString(4, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_NewGuildName {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_NewGuildName();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_GuildLog extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get logs(): common.GuildLog[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.GuildLog, 4) as common.GuildLog[];
        }
        set logs(value: common.GuildLog[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                logs: this.logs
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.logs)
                writer.writeRepeatedMessage(4, this.logs, (item: common.GuildLog) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_GuildLog {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_GuildLog();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.logs, () => pb_1.Message.addToRepeatedWrapperField(message, 4, common.GuildLog.deserialize(reader), common.GuildLog));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_PublishGuildAnnouncement extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get title(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get content(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as string | undefined;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get needNotice(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as boolean | undefined;
        }
        set needNotice(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                title: this.title,
                content: this.content,
                needNotice: this.needNotice
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.title)
                writer.writeString(4, this.title);
            if (this.content)
                writer.writeString(5, this.content);
            if (this.needNotice)
                writer.writeBool(6, this.needNotice);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_PublishGuildAnnouncement {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_PublishGuildAnnouncement();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.title = reader.readString();
                        break;
                    case 5:
                        message.content = reader.readString();
                        break;
                    case 6:
                        message.needNotice = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_PublishGuildAnnouncement extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get leftNoticeTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set leftNoticeTimes(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                leftNoticeTimes: this.leftNoticeTimes
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.leftNoticeTimes)
                writer.writeUint32(4, this.leftNoticeTimes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_PublishGuildAnnouncement {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_PublishGuildAnnouncement();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.leftNoticeTimes = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_PublishGuildNotice extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get title(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get content(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as string | undefined;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                title: this.title,
                content: this.content
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.title)
                writer.writeString(4, this.title);
            if (this.content)
                writer.writeString(5, this.content);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_PublishGuildNotice {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_PublishGuildNotice();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.title = reader.readString();
                        break;
                    case 5:
                        message.content = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_PublishGuildNotice extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get leftNoticeTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set leftNoticeTimes(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                leftNoticeTimes: this.leftNoticeTimes
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.leftNoticeTimes)
                writer.writeUint32(4, this.leftNoticeTimes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_PublishGuildNotice {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_PublishGuildNotice();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.leftNoticeTimes = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class S_PublishGuildNotice extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get notice(): common.GuildNotice | undefined {
            return pb_1.Message.getWrapperField(this, common.GuildNotice, 4) as common.GuildNotice | undefined;
        }
        set notice(value: common.GuildNotice) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                notice: this.notice
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.notice)
                writer.writeMessage(4, this.notice, (item: common.GuildNotice) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_PublishGuildNotice {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new S_PublishGuildNotice();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.notice, () => message.notice = common.GuildNotice.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_GetGuildNotice extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get noticeId(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set noticeId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                noticeId: this.noticeId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.noticeId)
                writer.writeInt64String(4, this.noticeId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_GetGuildNotice {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_GetGuildNotice();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.noticeId = reader.readInt64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_GetGuildNotice extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get notices(): common.GuildNotice | undefined {
            return pb_1.Message.getWrapperField(this, common.GuildNotice, 4) as common.GuildNotice | undefined;
        }
        set notices(value: common.GuildNotice) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                notices: this.notices
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.notices)
                writer.writeMessage(4, this.notices, (item: common.GuildNotice) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_GetGuildNotice {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_GetGuildNotice();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.notices, () => message.notices = common.GuildNotice.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_GuildRecruit extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get confirm(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as boolean | undefined;
        }
        set confirm(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get levelLimit(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set levelLimit(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get declaration(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as string | undefined;
        }
        set declaration(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                confirm: this.confirm,
                levelLimit: this.levelLimit,
                declaration: this.declaration
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.confirm)
                writer.writeBool(4, this.confirm);
            if (this.levelLimit)
                writer.writeUint32(5, this.levelLimit);
            if (this.declaration)
                writer.writeString(6, this.declaration);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_GuildRecruit {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_GuildRecruit();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.confirm = reader.readBool();
                        break;
                    case 5:
                        message.levelLimit = reader.readUint32();
                        break;
                    case 6:
                        message.declaration = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_GuildRecruit extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get confirm(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as boolean | undefined;
        }
        set confirm(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get levelLimit(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set levelLimit(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get declaration(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as string | undefined;
        }
        set declaration(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                confirm: this.confirm,
                levelLimit: this.levelLimit,
                declaration: this.declaration
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.confirm)
                writer.writeBool(4, this.confirm);
            if (this.levelLimit)
                writer.writeUint32(5, this.levelLimit);
            if (this.declaration)
                writer.writeString(6, this.declaration);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_GuildRecruit {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_GuildRecruit();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.confirm = reader.readBool();
                        break;
                    case 5:
                        message.levelLimit = reader.readUint32();
                        break;
                    case 6:
                        message.declaration = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_GuildSetOfficial extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get targetId(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set targetId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get officialType(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set officialType(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                targetId: this.targetId,
                officialType: this.officialType
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.targetId)
                writer.writeUint64String(4, this.targetId);
            if (this.officialType)
                writer.writeInt32(5, this.officialType);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_GuildSetOfficial {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_GuildSetOfficial();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.targetId = reader.readUint64String();
                        break;
                    case 5:
                        message.officialType = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class S_NotifyOtherJoinGuild extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get player(): GuildPlayer | undefined {
            return pb_1.Message.getWrapperField(this, GuildPlayer, 4) as GuildPlayer | undefined;
        }
        set player(value: GuildPlayer) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                player: this.player
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.player)
                writer.writeMessage(4, this.player, (item: GuildPlayer) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_NotifyOtherJoinGuild {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new S_NotifyOtherJoinGuild();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.player, () => message.player = GuildPlayer.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_GuildBuildBuilding extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get buildID(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set buildID(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get costType(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set costType(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                buildID: this.buildID,
                costType: this.costType
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.buildID)
                writer.writeInt32(4, this.buildID);
            if (this.costType)
                writer.writeInt32(5, this.costType);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_GuildBuildBuilding {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_GuildBuildBuilding();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.buildID = reader.readInt32();
                        break;
                    case 5:
                        message.costType = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_GuildBuildBuilding extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get buildID(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set buildID(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get costType(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set costType(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get level(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as number | undefined;
        }
        set level(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get exp(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 7, undefined) as number | undefined;
        }
        set exp(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get dayBuildTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 8, undefined) as number | undefined;
        }
        set dayBuildTimes(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get todayTotalBuildPeopleCount(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 9, undefined) as number | undefined;
        }
        set todayTotalBuildPeopleCount(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get todayTotalActivity(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 10, undefined) as number | undefined;
        }
        set todayTotalActivity(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get nextCrit(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 11, undefined) as boolean | undefined;
        }
        set nextCrit(value: boolean) {
            pb_1.Message.setField(this, 11, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                buildID: this.buildID,
                costType: this.costType,
                level: this.level,
                exp: this.exp,
                dayBuildTimes: this.dayBuildTimes,
                todayTotalBuildPeopleCount: this.todayTotalBuildPeopleCount,
                todayTotalActivity: this.todayTotalActivity,
                nextCrit: this.nextCrit
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.buildID)
                writer.writeInt32(4, this.buildID);
            if (this.costType)
                writer.writeInt32(5, this.costType);
            if (this.level)
                writer.writeUint32(6, this.level);
            if (this.exp)
                writer.writeUint32(7, this.exp);
            if (this.dayBuildTimes)
                writer.writeUint32(8, this.dayBuildTimes);
            if (this.todayTotalBuildPeopleCount)
                writer.writeUint32(9, this.todayTotalBuildPeopleCount);
            if (this.todayTotalActivity)
                writer.writeUint32(10, this.todayTotalActivity);
            if (this.nextCrit)
                writer.writeBool(11, this.nextCrit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_GuildBuildBuilding {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_GuildBuildBuilding();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.buildID = reader.readInt32();
                        break;
                    case 5:
                        message.costType = reader.readInt32();
                        break;
                    case 6:
                        message.level = reader.readUint32();
                        break;
                    case 7:
                        message.exp = reader.readUint32();
                        break;
                    case 8:
                        message.dayBuildTimes = reader.readUint32();
                        break;
                    case 9:
                        message.todayTotalBuildPeopleCount = reader.readUint32();
                        break;
                    case 10:
                        message.todayTotalActivity = reader.readUint32();
                        break;
                    case 11:
                        message.nextCrit = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class S_NotifyGuildBuild extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get buildID(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set buildID(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get level(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set level(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get exp(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as number | undefined;
        }
        set exp(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get todayTotalBuildPeopleCount(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 7, undefined) as number | undefined;
        }
        set todayTotalBuildPeopleCount(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get todayTotalActivity(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 8, undefined) as number | undefined;
        }
        set todayTotalActivity(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                buildID: this.buildID,
                level: this.level,
                exp: this.exp,
                todayTotalBuildPeopleCount: this.todayTotalBuildPeopleCount,
                todayTotalActivity: this.todayTotalActivity
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.buildID)
                writer.writeInt32(4, this.buildID);
            if (this.level)
                writer.writeUint32(5, this.level);
            if (this.exp)
                writer.writeUint32(6, this.exp);
            if (this.todayTotalBuildPeopleCount)
                writer.writeUint32(7, this.todayTotalBuildPeopleCount);
            if (this.todayTotalActivity)
                writer.writeUint32(8, this.todayTotalActivity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_NotifyGuildBuild {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new S_NotifyGuildBuild();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.buildID = reader.readInt32();
                        break;
                    case 5:
                        message.level = reader.readUint32();
                        break;
                    case 6:
                        message.exp = reader.readUint32();
                        break;
                    case 7:
                        message.todayTotalBuildPeopleCount = reader.readUint32();
                        break;
                    case 8:
                        message.todayTotalActivity = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_BuildGuildSkill extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get slotId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set slotId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get times(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set times(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                slotId: this.slotId,
                times: this.times
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.slotId)
                writer.writeInt32(4, this.slotId);
            if (this.times)
                writer.writeUint32(5, this.times);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_BuildGuildSkill {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_BuildGuildSkill();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.slotId = reader.readInt32();
                        break;
                    case 5:
                        message.times = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_BuildGuildSkill extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get level(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set level(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                level: this.level
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.level)
                writer.writeUint32(4, this.level);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_BuildGuildSkill {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_BuildGuildSkill();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.level = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_GetGuildRankList extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get page(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                page: this.page
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.page)
                writer.writeUint32(4, this.page);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_GetGuildRankList {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_GetGuildRankList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.page = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class S_Impeach extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get new(): GuildPlayer | undefined {
            return pb_1.Message.getWrapperField(this, GuildPlayer, 4) as GuildPlayer | undefined;
        }
        set new(value: GuildPlayer) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                new: this.new
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.new)
                writer.writeMessage(4, this.new, (item: GuildPlayer) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_Impeach {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new S_Impeach();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.new, () => message.new = GuildPlayer.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_ChangeQQ extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get qq(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set qq(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                qq: this.qq
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.qq)
                writer.writeUint64(4, this.qq);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_ChangeQQ {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_ChangeQQ();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.qq = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_GetGuildActivityReward extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get activityTag(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set activityTag(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                activityTag: this.activityTag
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.activityTag)
                writer.writeUint32(4, this.activityTag);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_GetGuildActivityReward {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_GetGuildActivityReward();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.activityTag = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_GuildDailyPaper extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4, 5], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get logs(): common.GuildLog[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.GuildLog, 4) as common.GuildLog[];
        }
        set logs(value: common.GuildLog[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get yesterdayGuildHonorPlayer(): common.GuildHonorPlayer[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.GuildHonorPlayer, 5) as common.GuildHonorPlayer[];
        }
        set yesterdayGuildHonorPlayer(value: common.GuildHonorPlayer[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                logs: this.logs,
                yesterdayGuildHonorPlayer: this.yesterdayGuildHonorPlayer
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.logs)
                writer.writeRepeatedMessage(4, this.logs, (item: common.GuildLog) => item.serialize(writer));
            if (this.yesterdayGuildHonorPlayer)
                writer.writeRepeatedMessage(5, this.yesterdayGuildHonorPlayer, (item: common.GuildHonorPlayer) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_GuildDailyPaper {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_GuildDailyPaper();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.logs, () => pb_1.Message.addToRepeatedWrapperField(message, 4, common.GuildLog.deserialize(reader), common.GuildLog));
                        break;
                    case 5:
                        reader.readMessage(message.yesterdayGuildHonorPlayer, () => pb_1.Message.addToRepeatedWrapperField(message, 5, common.GuildHonorPlayer.deserialize(reader), common.GuildHonorPlayer));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_GuildGoods extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get goods(): GuildGoods[] {
            return pb_1.Message.getRepeatedWrapperField(this, GuildGoods, 4) as GuildGoods[];
        }
        set goods(value: GuildGoods[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                goods: this.goods
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.goods)
                writer.writeRepeatedMessage(4, this.goods, (item: GuildGoods) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_GuildGoods {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_GuildGoods();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.goods, () => pb_1.Message.addToRepeatedWrapperField(message, 4, GuildGoods.deserialize(reader), GuildGoods));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_PubGuildGoods extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get itemId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set itemId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get priceShift(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set priceShift(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                itemId: this.itemId,
                priceShift: this.priceShift
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.itemId)
                writer.writeInt32(4, this.itemId);
            if (this.priceShift)
                writer.writeInt32(5, this.priceShift);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_PubGuildGoods {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_PubGuildGoods();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.itemId = reader.readInt32();
                        break;
                    case 5:
                        message.priceShift = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_PubGuildGoods extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get item(): GuildGoods | undefined {
            return pb_1.Message.getWrapperField(this, GuildGoods, 4) as GuildGoods | undefined;
        }
        set item(value: GuildGoods) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                item: this.item
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.item)
                writer.writeMessage(4, this.item, (item: GuildGoods) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_PubGuildGoods {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_PubGuildGoods();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.item, () => message.item = GuildGoods.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_RePubGuildGoods extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get itemUid(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set itemUid(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get priceShift(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set priceShift(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                itemUid: this.itemUid,
                priceShift: this.priceShift
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.itemUid)
                writer.writeUint64(4, this.itemUid);
            if (this.priceShift)
                writer.writeInt32(5, this.priceShift);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_RePubGuildGoods {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_RePubGuildGoods();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.itemUid = reader.readUint64();
                        break;
                    case 5:
                        message.priceShift = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_RePubGuildGoods extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get item(): GuildGoods | undefined {
            return pb_1.Message.getWrapperField(this, GuildGoods, 4) as GuildGoods | undefined;
        }
        set item(value: GuildGoods) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                item: this.item
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.item)
                writer.writeMessage(4, this.item, (item: GuildGoods) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_RePubGuildGoods {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_RePubGuildGoods();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.item, () => message.item = GuildGoods.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_TakeOffGuildGoods extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get itemUid(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set itemUid(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                itemUid: this.itemUid
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.itemUid)
                writer.writeUint64(4, this.itemUid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_TakeOffGuildGoods {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_TakeOffGuildGoods();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.itemUid = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_BuyGuildGoods extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get itemUid(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set itemUid(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                itemUid: this.itemUid
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.itemUid)
                writer.writeUint64(4, this.itemUid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_BuyGuildGoods {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_BuyGuildGoods();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.itemUid = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_GetSoldGuildGoods extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get itemUid(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set itemUid(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                itemUid: this.itemUid
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.itemUid)
                writer.writeUint64(4, this.itemUid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_GetSoldGuildGoods {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_GetSoldGuildGoods();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.itemUid = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class Treasure extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [1, 2], null);
        }
        get treasures(): common.Treasure[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Treasure, 1) as common.Treasure[];
        }
        set treasures(value: common.Treasure[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get treasureFates(): common.TreasureFate[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.TreasureFate, 2) as common.TreasureFate[];
        }
        set treasureFates(value: common.TreasureFate[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get fateSkillGroup(): common.FateSkillGroup | undefined {
            return pb_1.Message.getWrapperField(this, common.FateSkillGroup, 3) as common.FateSkillGroup | undefined;
        }
        set fateSkillGroup(value: common.FateSkillGroup) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                treasures: this.treasures,
                treasureFates: this.treasureFates,
                fateSkillGroup: this.fateSkillGroup
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.treasures)
                writer.writeRepeatedMessage(1, this.treasures, (item: common.Treasure) => item.serialize(writer));
            if (this.treasureFates)
                writer.writeRepeatedMessage(2, this.treasureFates, (item: common.TreasureFate) => item.serialize(writer));
            if (this.fateSkillGroup)
                writer.writeMessage(3, this.fateSkillGroup, (item: common.FateSkillGroup) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Treasure {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new Treasure();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.treasures, () => pb_1.Message.addToRepeatedWrapperField(message, 1, common.Treasure.deserialize(reader), common.Treasure));
                        break;
                    case 2:
                        reader.readMessage(message.treasureFates, () => pb_1.Message.addToRepeatedWrapperField(message, 2, common.TreasureFate.deserialize(reader), common.TreasureFate));
                        break;
                    case 3:
                        reader.readMessage(message.fateSkillGroup, () => message.fateSkillGroup = common.FateSkillGroup.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_TreasureBuild extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get treasureId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set treasureId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                treasureId: this.treasureId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.treasureId)
                writer.writeInt32(4, this.treasureId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_TreasureBuild {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_TreasureBuild();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.treasureId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_TreasureBuild extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_TreasureBuild {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_TreasureBuild();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_TreasureAdvance extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get treasureId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set treasureId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                treasureId: this.treasureId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.treasureId)
                writer.writeInt32(4, this.treasureId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_TreasureAdvance {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_TreasureAdvance();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.treasureId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_TreasureAdvance extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_TreasureAdvance {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_TreasureAdvance();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_TreasureFateUpgrade extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get treasureFateId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set treasureFateId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                treasureFateId: this.treasureFateId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.treasureFateId)
                writer.writeInt32(4, this.treasureFateId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_TreasureFateUpgrade {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_TreasureFateUpgrade();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.treasureFateId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_TreasureFateUpgrade extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_TreasureFateUpgrade {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_TreasureFateUpgrade();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_TreasureAwake extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get treasureId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set treasureId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                treasureId: this.treasureId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.treasureId)
                writer.writeInt32(4, this.treasureId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_TreasureAwake {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_TreasureAwake();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.treasureId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_TreasureAwake extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_TreasureAwake {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_TreasureAwake();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_TreasureResearch extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get treasureId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set treasureId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                treasureId: this.treasureId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.treasureId)
                writer.writeInt32(4, this.treasureId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_TreasureResearch {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_TreasureResearch();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.treasureId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_TreasureResearch extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get randParts(): number[] {
            return pb_1.Message.getField(this, 4) as number[];
        }
        set randParts(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                randParts: this.randParts
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.randParts)
                writer.writeRepeatedInt32(4, this.randParts);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_TreasureResearch {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_TreasureResearch();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.randParts.push(reader.readInt32());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_TreasureRefine extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get treasureId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set treasureId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                treasureId: this.treasureId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.treasureId)
                writer.writeInt32(4, this.treasureId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_TreasureRefine {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_TreasureRefine();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.treasureId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_TreasureRefine extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_TreasureRefine {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_TreasureRefine();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_TreasureMapDecompose extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get items(): common.Item[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Item, 4) as common.Item[];
        }
        set items(value: common.Item[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                items: this.items
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.items)
                writer.writeRepeatedMessage(4, this.items, (item: common.Item) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_TreasureMapDecompose {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_TreasureMapDecompose();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 4, common.Item.deserialize(reader), common.Item));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_TreasureMapDecompose extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_TreasureMapDecompose {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_TreasureMapDecompose();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_UnLockFateSkillGroup extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get id(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                id: this.id
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.id)
                writer.writeInt32(4, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_UnLockFateSkillGroup {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_UnLockFateSkillGroup();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_UnLockFateSkillGroup extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_UnLockFateSkillGroup {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_UnLockFateSkillGroup();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_ChangeFateSkillGroup extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get id(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                id: this.id
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.id)
                writer.writeInt32(4, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_ChangeFateSkillGroup {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_ChangeFateSkillGroup();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_ChangeFateSkillGroup extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get groupData(): common.FateSkillGroup | undefined {
            return pb_1.Message.getWrapperField(this, common.FateSkillGroup, 4) as common.FateSkillGroup | undefined;
        }
        set groupData(value: common.FateSkillGroup) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                groupData: this.groupData
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.groupData)
                writer.writeMessage(4, this.groupData, (item: common.FateSkillGroup) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_ChangeFateSkillGroup {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_ChangeFateSkillGroup();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.groupData, () => message.groupData = common.FateSkillGroup.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_FateSkillGroupSave extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get groupData(): common.FateSkillGroup | undefined {
            return pb_1.Message.getWrapperField(this, common.FateSkillGroup, 4) as common.FateSkillGroup | undefined;
        }
        set groupData(value: common.FateSkillGroup) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                groupData: this.groupData
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.groupData)
                writer.writeMessage(4, this.groupData, (item: common.FateSkillGroup) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_FateSkillGroupSave {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_FateSkillGroupSave();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.groupData, () => message.groupData = common.FateSkillGroup.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_FateSkillGroupSave extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_FateSkillGroupSave {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_FateSkillGroupSave();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_GetFateSkillGroupInfo extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get groupDatas(): common.FateSkillGroup[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.FateSkillGroup, 4) as common.FateSkillGroup[];
        }
        set groupDatas(value: common.FateSkillGroup[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                groupDatas: this.groupDatas
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.groupDatas)
                writer.writeRepeatedMessage(4, this.groupDatas, (item: common.FateSkillGroup) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_GetFateSkillGroupInfo {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_GetFateSkillGroupInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.groupDatas, () => pb_1.Message.addToRepeatedWrapperField(message, 4, common.FateSkillGroup.deserialize(reader), common.FateSkillGroup));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_UnlockSoldier extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get soldierId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set soldierId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                soldierId: this.soldierId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.soldierId)
                writer.writeInt32(4, this.soldierId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_UnlockSoldier {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_UnlockSoldier();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.soldierId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_UnlockSoldier extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get soldier(): common.Soldier | undefined {
            return pb_1.Message.getWrapperField(this, common.Soldier, 4) as common.Soldier | undefined;
        }
        set soldier(value: common.Soldier) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                soldier: this.soldier
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.soldier)
                writer.writeMessage(4, this.soldier, (item: common.Soldier) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_UnlockSoldier {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_UnlockSoldier();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.soldier, () => message.soldier = common.Soldier.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_SoldierTech extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get techId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set techId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                techId: this.techId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.techId)
                writer.writeInt32(4, this.techId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_SoldierTech {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_SoldierTech();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.techId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_SoldierTech extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get tech(): SoldierTechs | undefined {
            return pb_1.Message.getWrapperField(this, SoldierTechs, 4) as SoldierTechs | undefined;
        }
        set tech(value: SoldierTechs) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                tech: this.tech
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.tech)
                writer.writeMessage(4, this.tech, (item: SoldierTechs) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_SoldierTech {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_SoldierTech();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.tech, () => message.tech = SoldierTechs.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_SoldierTechReward extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get id(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                id: this.id
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.id)
                writer.writeInt32(4, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_SoldierTechReward {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_SoldierTechReward();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_SoldierTechReward extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get id(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                id: this.id
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.id)
                writer.writeInt32(4, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_SoldierTechReward {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_SoldierTechReward();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class ArenaChallengePlayer extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get uid(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as string | undefined;
        }
        set uid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as string | undefined;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get rank(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as number | undefined;
        }
        set rank(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get counsellor(): common.Counsellor | undefined {
            return pb_1.Message.getWrapperField(this, common.Counsellor, 4) as common.Counsellor | undefined;
        }
        set counsellor(value: common.Counsellor) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get msg(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as string | undefined;
        }
        set msg(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get arenaDefencePower(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as number | undefined;
        }
        set arenaDefencePower(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        toObject() {
            return {
                uid: this.uid,
                name: this.name,
                rank: this.rank,
                counsellor: this.counsellor,
                msg: this.msg,
                arenaDefencePower: this.arenaDefencePower
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.uid)
                writer.writeUint64String(1, this.uid);
            if (this.name)
                writer.writeString(2, this.name);
            if (this.rank)
                writer.writeUint32(3, this.rank);
            if (this.counsellor)
                writer.writeMessage(4, this.counsellor, (item: common.Counsellor) => item.serialize(writer));
            if (this.msg)
                writer.writeString(5, this.msg);
            if (this.arenaDefencePower)
                writer.writeUint32(6, this.arenaDefencePower);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ArenaChallengePlayer {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new ArenaChallengePlayer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uid = reader.readUint64String();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.rank = reader.readUint32();
                        break;
                    case 4:
                        reader.readMessage(message.counsellor, () => message.counsellor = common.Counsellor.deserialize(reader));
                        break;
                    case 5:
                        message.msg = reader.readString();
                        break;
                    case 6:
                        message.arenaDefencePower = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_EnterArena extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get arenaChallengeList(): ArenaChallengePlayer[] {
            return pb_1.Message.getRepeatedWrapperField(this, ArenaChallengePlayer, 4) as ArenaChallengePlayer[];
        }
        set arenaChallengeList(value: ArenaChallengePlayer[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get arena(): Arena | undefined {
            return pb_1.Message.getWrapperField(this, Arena, 5) as Arena | undefined;
        }
        set arena(value: Arena) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                arenaChallengeList: this.arenaChallengeList,
                arena: this.arena
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.arenaChallengeList)
                writer.writeRepeatedMessage(4, this.arenaChallengeList, (item: ArenaChallengePlayer) => item.serialize(writer));
            if (this.arena)
                writer.writeMessage(5, this.arena, (item: Arena) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_EnterArena {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_EnterArena();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.arenaChallengeList, () => pb_1.Message.addToRepeatedWrapperField(message, 4, ArenaChallengePlayer.deserialize(reader), ArenaChallengePlayer));
                        break;
                    case 5:
                        reader.readMessage(message.arena, () => message.arena = Arena.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_ArenaChallengeList extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get arenaChallengeList(): ArenaChallengePlayer[] {
            return pb_1.Message.getRepeatedWrapperField(this, ArenaChallengePlayer, 4) as ArenaChallengePlayer[];
        }
        set arenaChallengeList(value: ArenaChallengePlayer[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get selfRank(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set selfRank(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                arenaChallengeList: this.arenaChallengeList,
                selfRank: this.selfRank
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.arenaChallengeList)
                writer.writeRepeatedMessage(4, this.arenaChallengeList, (item: ArenaChallengePlayer) => item.serialize(writer));
            if (this.selfRank)
                writer.writeInt32(5, this.selfRank);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_ArenaChallengeList {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_ArenaChallengeList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.arenaChallengeList, () => pb_1.Message.addToRepeatedWrapperField(message, 4, ArenaChallengePlayer.deserialize(reader), ArenaChallengePlayer));
                        break;
                    case 5:
                        message.selfRank = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_SweepArena extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get tagetUid(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set tagetUid(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                tagetUid: this.tagetUid
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.tagetUid)
                writer.writeUint64String(4, this.tagetUid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_SweepArena {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_SweepArena();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.tagetUid = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_SweepArena extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [5], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get leftChallengeTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set leftChallengeTimes(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get allReward(): common.Item[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Item, 5) as common.Item[];
        }
        set allReward(value: common.Item[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get fixedReward(): common.Item | undefined {
            return pb_1.Message.getWrapperField(this, common.Item, 6) as common.Item | undefined;
        }
        set fixedReward(value: common.Item) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                leftChallengeTimes: this.leftChallengeTimes,
                allReward: this.allReward,
                fixedReward: this.fixedReward
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.leftChallengeTimes)
                writer.writeUint32(4, this.leftChallengeTimes);
            if (this.allReward)
                writer.writeRepeatedMessage(5, this.allReward, (item: common.Item) => item.serialize(writer));
            if (this.fixedReward)
                writer.writeMessage(6, this.fixedReward, (item: common.Item) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_SweepArena {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_SweepArena();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.leftChallengeTimes = reader.readUint32();
                        break;
                    case 5:
                        reader.readMessage(message.allReward, () => pb_1.Message.addToRepeatedWrapperField(message, 5, common.Item.deserialize(reader), common.Item));
                        break;
                    case 6:
                        reader.readMessage(message.fixedReward, () => message.fixedReward = common.Item.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_ExchangeIdx extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get exchangeIdx(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set exchangeIdx(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                exchangeIdx: this.exchangeIdx
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.exchangeIdx)
                writer.writeInt32(4, this.exchangeIdx);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_ExchangeIdx {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_ExchangeIdx();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.exchangeIdx = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_ExchangeIdx extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get exchangeIdx(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set exchangeIdx(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                exchangeIdx: this.exchangeIdx
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.exchangeIdx)
                writer.writeInt32(4, this.exchangeIdx);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_ExchangeIdx {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_ExchangeIdx();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.exchangeIdx = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class ArenaRankPlayerInfo extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get uid(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as string | undefined;
        }
        set uid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as string | undefined;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get level(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as number | undefined;
        }
        set level(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get power(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set power(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get rank(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set rank(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get guildName(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as string | undefined;
        }
        set guildName(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get avatar(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 7, undefined) as number | undefined;
        }
        set avatar(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get avatarFrame(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 8, undefined) as number | undefined;
        }
        set avatarFrame(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get counsellorId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 9, undefined) as number | undefined;
        }
        set counsellorId(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get oldRank(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 10, undefined) as number | undefined;
        }
        set oldRank(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        toObject() {
            return {
                uid: this.uid,
                name: this.name,
                level: this.level,
                power: this.power,
                rank: this.rank,
                guildName: this.guildName,
                avatar: this.avatar,
                avatarFrame: this.avatarFrame,
                counsellorId: this.counsellorId,
                oldRank: this.oldRank
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.uid)
                writer.writeUint64String(1, this.uid);
            if (this.name)
                writer.writeString(2, this.name);
            if (this.level)
                writer.writeUint32(3, this.level);
            if (this.power)
                writer.writeUint32(4, this.power);
            if (this.rank)
                writer.writeUint32(5, this.rank);
            if (this.guildName)
                writer.writeString(6, this.guildName);
            if (this.avatar)
                writer.writeInt32(7, this.avatar);
            if (this.avatarFrame)
                writer.writeInt32(8, this.avatarFrame);
            if (this.counsellorId)
                writer.writeInt32(9, this.counsellorId);
            if (this.oldRank)
                writer.writeUint32(10, this.oldRank);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ArenaRankPlayerInfo {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new ArenaRankPlayerInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uid = reader.readUint64String();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.level = reader.readUint32();
                        break;
                    case 4:
                        message.power = reader.readUint32();
                        break;
                    case 5:
                        message.rank = reader.readUint32();
                        break;
                    case 6:
                        message.guildName = reader.readString();
                        break;
                    case 7:
                        message.avatar = reader.readInt32();
                        break;
                    case 8:
                        message.avatarFrame = reader.readInt32();
                        break;
                    case 9:
                        message.counsellorId = reader.readInt32();
                        break;
                    case 10:
                        message.oldRank = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_ArenaRank extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get pageIdx(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set pageIdx(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                pageIdx: this.pageIdx
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.pageIdx)
                writer.writeUint32(4, this.pageIdx);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_ArenaRank {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_ArenaRank();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.pageIdx = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_ArenaRank extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get rankList(): ArenaRankPlayerInfo[] {
            return pb_1.Message.getRepeatedWrapperField(this, ArenaRankPlayerInfo, 4) as ArenaRankPlayerInfo[];
        }
        set rankList(value: ArenaRankPlayerInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get topDays(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set topDays(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get topPlayer(): TopPlayer | undefined {
            return pb_1.Message.getWrapperField(this, TopPlayer, 6) as TopPlayer | undefined;
        }
        set topPlayer(value: TopPlayer) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                rankList: this.rankList,
                topDays: this.topDays,
                topPlayer: this.topPlayer
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.rankList)
                writer.writeRepeatedMessage(4, this.rankList, (item: ArenaRankPlayerInfo) => item.serialize(writer));
            if (this.topDays)
                writer.writeUint32(5, this.topDays);
            if (this.topPlayer)
                writer.writeMessage(6, this.topPlayer, (item: TopPlayer) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_ArenaRank {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_ArenaRank();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.rankList, () => pb_1.Message.addToRepeatedWrapperField(message, 4, ArenaRankPlayerInfo.deserialize(reader), ArenaRankPlayerInfo));
                        break;
                    case 5:
                        message.topDays = reader.readUint32();
                        break;
                    case 6:
                        reader.readMessage(message.topPlayer, () => message.topPlayer = TopPlayer.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_ArenaBattleLog extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get arenaBattleLogs(): common.ArenaBattleLog[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.ArenaBattleLog, 4) as common.ArenaBattleLog[];
        }
        set arenaBattleLogs(value: common.ArenaBattleLog[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                arenaBattleLogs: this.arenaBattleLogs
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.arenaBattleLogs)
                writer.writeRepeatedMessage(4, this.arenaBattleLogs, (item: common.ArenaBattleLog) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_ArenaBattleLog {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_ArenaBattleLog();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.arenaBattleLogs, () => pb_1.Message.addToRepeatedWrapperField(message, 4, common.ArenaBattleLog.deserialize(reader), common.ArenaBattleLog));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_BeginArenaBattle extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get tagetUid(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set tagetUid(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get tagetRank(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set tagetRank(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get ver(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 200, undefined) as string | undefined;
        }
        set ver(value: string) {
            pb_1.Message.setField(this, 200, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                tagetUid: this.tagetUid,
                tagetRank: this.tagetRank,
                ver: this.ver
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.tagetUid)
                writer.writeUint64String(4, this.tagetUid);
            if (this.tagetRank)
                writer.writeUint32(5, this.tagetRank);
            if (this.ver)
                writer.writeString(200, this.ver);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_BeginArenaBattle {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_BeginArenaBattle();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.tagetUid = reader.readUint64String();
                        break;
                    case 5:
                        message.tagetRank = reader.readUint32();
                        break;
                    case 200:
                        message.ver = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_BeginArenaBattle extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get leftChallengeTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set leftChallengeTimes(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get battleStartInfo(): common.BattleStartInfo | undefined {
            return pb_1.Message.getWrapperField(this, common.BattleStartInfo, 5) as common.BattleStartInfo | undefined;
        }
        set battleStartInfo(value: common.BattleStartInfo) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                leftChallengeTimes: this.leftChallengeTimes,
                battleStartInfo: this.battleStartInfo
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.leftChallengeTimes)
                writer.writeUint32(4, this.leftChallengeTimes);
            if (this.battleStartInfo)
                writer.writeMessage(5, this.battleStartInfo, (item: common.BattleStartInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_BeginArenaBattle {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_BeginArenaBattle();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.leftChallengeTimes = reader.readUint32();
                        break;
                    case 5:
                        reader.readMessage(message.battleStartInfo, () => message.battleStartInfo = common.BattleStartInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_ArenaBattleResult extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get battleResultInfo(): common.BattleResultInfo | undefined {
            return pb_1.Message.getWrapperField(this, common.BattleResultInfo, 4) as common.BattleResultInfo | undefined;
        }
        set battleResultInfo(value: common.BattleResultInfo) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                battleResultInfo: this.battleResultInfo
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.battleResultInfo)
                writer.writeMessage(4, this.battleResultInfo, (item: common.BattleResultInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_ArenaBattleResult {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_ArenaBattleResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.battleResultInfo, () => message.battleResultInfo = common.BattleResultInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_ArenaBattleResult extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [5], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get winUid(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set winUid(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get allReward(): common.Item[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Item, 5) as common.Item[];
        }
        set allReward(value: common.Item[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get fixedReward(): common.Item | undefined {
            return pb_1.Message.getWrapperField(this, common.Item, 6) as common.Item | undefined;
        }
        set fixedReward(value: common.Item) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get maxRank(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 7, undefined) as number | undefined;
        }
        set maxRank(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get beforeRank(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 8, undefined) as number | undefined;
        }
        set beforeRank(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get afterRank(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 9, undefined) as number | undefined;
        }
        set afterRank(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get careerReward(): common.Item | undefined {
            return pb_1.Message.getWrapperField(this, common.Item, 10) as common.Item | undefined;
        }
        set careerReward(value: common.Item) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get win(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 11, undefined) as boolean | undefined;
        }
        set win(value: boolean) {
            pb_1.Message.setField(this, 11, value);
        }
        get leftChallengeTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 12, undefined) as number | undefined;
        }
        set leftChallengeTimes(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                winUid: this.winUid,
                allReward: this.allReward,
                fixedReward: this.fixedReward,
                maxRank: this.maxRank,
                beforeRank: this.beforeRank,
                afterRank: this.afterRank,
                careerReward: this.careerReward,
                win: this.win,
                leftChallengeTimes: this.leftChallengeTimes
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.winUid)
                writer.writeUint64String(4, this.winUid);
            if (this.allReward)
                writer.writeRepeatedMessage(5, this.allReward, (item: common.Item) => item.serialize(writer));
            if (this.fixedReward)
                writer.writeMessage(6, this.fixedReward, (item: common.Item) => item.serialize(writer));
            if (this.maxRank)
                writer.writeUint32(7, this.maxRank);
            if (this.beforeRank)
                writer.writeUint32(8, this.beforeRank);
            if (this.afterRank)
                writer.writeUint32(9, this.afterRank);
            if (this.careerReward)
                writer.writeMessage(10, this.careerReward, (item: common.Item) => item.serialize(writer));
            if (this.win)
                writer.writeBool(11, this.win);
            if (this.leftChallengeTimes)
                writer.writeUint32(12, this.leftChallengeTimes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_ArenaBattleResult {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_ArenaBattleResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.winUid = reader.readUint64String();
                        break;
                    case 5:
                        reader.readMessage(message.allReward, () => pb_1.Message.addToRepeatedWrapperField(message, 5, common.Item.deserialize(reader), common.Item));
                        break;
                    case 6:
                        reader.readMessage(message.fixedReward, () => message.fixedReward = common.Item.deserialize(reader));
                        break;
                    case 7:
                        message.maxRank = reader.readUint32();
                        break;
                    case 8:
                        message.beforeRank = reader.readUint32();
                        break;
                    case 9:
                        message.afterRank = reader.readUint32();
                        break;
                    case 10:
                        reader.readMessage(message.careerReward, () => message.careerReward = common.Item.deserialize(reader));
                        break;
                    case 11:
                        message.win = reader.readBool();
                        break;
                    case 12:
                        message.leftChallengeTimes = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_BuyArenaChallengeTimes extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get leftChallengeTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set leftChallengeTimes(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get usedChallengeBuyTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set usedChallengeBuyTimes(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                leftChallengeTimes: this.leftChallengeTimes,
                usedChallengeBuyTimes: this.usedChallengeBuyTimes
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.leftChallengeTimes)
                writer.writeUint32(4, this.leftChallengeTimes);
            if (this.usedChallengeBuyTimes)
                writer.writeUint32(5, this.usedChallengeBuyTimes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_BuyArenaChallengeTimes {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_BuyArenaChallengeTimes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.leftChallengeTimes = reader.readUint32();
                        break;
                    case 5:
                        message.usedChallengeBuyTimes = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_EnterPVP extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get battleID(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 10, undefined) as string | undefined;
        }
        set battleID(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get address(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 11, undefined) as string | undefined;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get secret(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 12, undefined) as string | undefined;
        }
        set secret(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get info(): common.BattleStartInfo | undefined {
            return pb_1.Message.getWrapperField(this, common.BattleStartInfo, 20) as common.BattleStartInfo | undefined;
        }
        set info(value: common.BattleStartInfo) {
            pb_1.Message.setWrapperField(this, 20, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                battleID: this.battleID,
                address: this.address,
                secret: this.secret,
                info: this.info
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.battleID)
                writer.writeUint64String(10, this.battleID);
            if (this.address)
                writer.writeString(11, this.address);
            if (this.secret)
                writer.writeString(12, this.secret);
            if (this.info)
                writer.writeMessage(20, this.info, (item: common.BattleStartInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_EnterPVP {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_EnterPVP();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 10:
                        message.battleID = reader.readUint64String();
                        break;
                    case 11:
                        message.address = reader.readString();
                        break;
                    case 12:
                        message.secret = reader.readString();
                        break;
                    case 20:
                        reader.readMessage(message.info, () => message.info = common.BattleStartInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_DrawCard extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get drawType(): DrawType | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as DrawType | undefined;
        }
        set drawType(value: DrawType) {
            pb_1.Message.setField(this, 4, value);
        }
        get count(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                drawType: this.drawType,
                count: this.count
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.drawType)
                writer.writeEnum(4, this.drawType);
            if (this.count)
                writer.writeInt32(5, this.count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_DrawCard {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_DrawCard();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.drawType = reader.readEnum();
                        break;
                    case 5:
                        message.count = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_DrawTreasure extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get count(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get isHot(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as boolean | undefined;
        }
        set isHot(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                count: this.count,
                isHot: this.isHot
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.count)
                writer.writeInt32(4, this.count);
            if (this.isHot)
                writer.writeBool(5, this.isHot);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_DrawTreasure {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_DrawTreasure();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.count = reader.readInt32();
                        break;
                    case 5:
                        message.isHot = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_DrawBuyItem extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get count(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get halfPrice(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as boolean | undefined;
        }
        set halfPrice(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                count: this.count,
                halfPrice: this.halfPrice
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.count)
                writer.writeUint32(4, this.count);
            if (this.halfPrice)
                writer.writeBool(5, this.halfPrice);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_DrawBuyItem {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_DrawBuyItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.count = reader.readUint32();
                        break;
                    case 5:
                        message.halfPrice = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_TreasureDrawBuyItem extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get count(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                count: this.count
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.count)
                writer.writeUint32(4, this.count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_TreasureDrawBuyItem {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_TreasureDrawBuyItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.count = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class Activity extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [1, 3, 4], null);
        }
        get open(): ActivityOpen[] {
            return pb_1.Message.getRepeatedWrapperField(this, ActivityOpen, 1) as ActivityOpen[];
        }
        set open(value: ActivityOpen[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get common(): ActivityCommon[] {
            return pb_1.Message.getRepeatedWrapperField(this, ActivityCommon, 3) as ActivityCommon[];
        }
        set common(value: ActivityCommon[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get levelGift(): number[] {
            return pb_1.Message.getField(this, 4) as number[];
        }
        set levelGift(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get totalLogin(): TotalLogin | undefined {
            return pb_1.Message.getWrapperField(this, TotalLogin, 5) as TotalLogin | undefined;
        }
        set totalLogin(value: TotalLogin) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get goldenDragon(): GoldenDragon | undefined {
            return pb_1.Message.getWrapperField(this, GoldenDragon, 6) as GoldenDragon | undefined;
        }
        set goldenDragon(value: GoldenDragon) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get dailyPhysical(): DailyPhysical | undefined {
            return pb_1.Message.getWrapperField(this, DailyPhysical, 7) as DailyPhysical | undefined;
        }
        set dailyPhysical(value: DailyPhysical) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        toObject() {
            return {
                open: this.open,
                common: this.common,
                levelGift: this.levelGift,
                totalLogin: this.totalLogin,
                goldenDragon: this.goldenDragon,
                dailyPhysical: this.dailyPhysical
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.open)
                writer.writeRepeatedMessage(1, this.open, (item: ActivityOpen) => item.serialize(writer));
            if (this.common)
                writer.writeRepeatedMessage(3, this.common, (item: ActivityCommon) => item.serialize(writer));
            if (this.levelGift)
                writer.writeRepeatedUint32(4, this.levelGift);
            if (this.totalLogin)
                writer.writeMessage(5, this.totalLogin, (item: TotalLogin) => item.serialize(writer));
            if (this.goldenDragon)
                writer.writeMessage(6, this.goldenDragon, (item: GoldenDragon) => item.serialize(writer));
            if (this.dailyPhysical)
                writer.writeMessage(7, this.dailyPhysical, (item: DailyPhysical) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Activity {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new Activity();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.open, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ActivityOpen.deserialize(reader), ActivityOpen));
                        break;
                    case 3:
                        reader.readMessage(message.common, () => pb_1.Message.addToRepeatedWrapperField(message, 3, ActivityCommon.deserialize(reader), ActivityCommon));
                        break;
                    case 4:
                        message.levelGift.push(reader.readUint32());
                        break;
                    case 5:
                        reader.readMessage(message.totalLogin, () => message.totalLogin = TotalLogin.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.goldenDragon, () => message.goldenDragon = GoldenDragon.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.dailyPhysical, () => message.dailyPhysical = DailyPhysical.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class ActivityOpen extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get activityId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set activityId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get area(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set area(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get acType(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as number | undefined;
        }
        set acType(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get startTime(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set startTime(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get endTime(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as string | undefined;
        }
        set endTime(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get appearTime(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as string | undefined;
        }
        set appearTime(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get disappearTime(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 7, undefined) as string | undefined;
        }
        set disappearTime(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get levelLimit(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 8, undefined) as number | undefined;
        }
        set levelLimit(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get vipLimit(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 9, undefined) as number | undefined;
        }
        set vipLimit(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        toObject() {
            return {
                activityId: this.activityId,
                area: this.area,
                acType: this.acType,
                startTime: this.startTime,
                endTime: this.endTime,
                appearTime: this.appearTime,
                disappearTime: this.disappearTime,
                levelLimit: this.levelLimit,
                vipLimit: this.vipLimit
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.activityId)
                writer.writeInt32(1, this.activityId);
            if (this.area)
                writer.writeUint32(2, this.area);
            if (this.acType)
                writer.writeUint32(3, this.acType);
            if (this.startTime)
                writer.writeInt64String(4, this.startTime);
            if (this.endTime)
                writer.writeInt64String(5, this.endTime);
            if (this.appearTime)
                writer.writeInt64String(6, this.appearTime);
            if (this.disappearTime)
                writer.writeInt64String(7, this.disappearTime);
            if (this.levelLimit)
                writer.writeUint32(8, this.levelLimit);
            if (this.vipLimit)
                writer.writeUint32(9, this.vipLimit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActivityOpen {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new ActivityOpen();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.activityId = reader.readInt32();
                        break;
                    case 2:
                        message.area = reader.readUint32();
                        break;
                    case 3:
                        message.acType = reader.readUint32();
                        break;
                    case 4:
                        message.startTime = reader.readInt64String();
                        break;
                    case 5:
                        message.endTime = reader.readInt64String();
                        break;
                    case 6:
                        message.appearTime = reader.readInt64String();
                        break;
                    case 7:
                        message.disappearTime = reader.readInt64String();
                        break;
                    case 8:
                        message.levelLimit = reader.readUint32();
                        break;
                    case 9:
                        message.vipLimit = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class ActivityCommon extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [2], null);
        }
        get activityId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set activityId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get tasks(): ActivityTask[] {
            return pb_1.Message.getRepeatedWrapperField(this, ActivityTask, 2) as ActivityTask[];
        }
        set tasks(value: ActivityTask[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        toObject() {
            return {
                activityId: this.activityId,
                tasks: this.tasks
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.activityId)
                writer.writeInt32(1, this.activityId);
            if (this.tasks)
                writer.writeRepeatedMessage(2, this.tasks, (item: ActivityTask) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActivityCommon {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new ActivityCommon();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.activityId = reader.readInt32();
                        break;
                    case 2:
                        reader.readMessage(message.tasks, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ActivityTask.deserialize(reader), ActivityTask));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class ActivityTask extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get id(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get finish(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set finish(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get progress(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as number | undefined;
        }
        set progress(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get rewards(): common.Item[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Item, 4) as common.Item[];
        }
        set rewards(value: common.Item[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get finishProgress(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set finishProgress(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                id: this.id,
                finish: this.finish,
                progress: this.progress,
                rewards: this.rewards,
                finishProgress: this.finishProgress
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id)
                writer.writeInt32(1, this.id);
            if (this.finish)
                writer.writeInt32(2, this.finish);
            if (this.progress)
                writer.writeUint32(3, this.progress);
            if (this.rewards)
                writer.writeRepeatedMessage(4, this.rewards, (item: common.Item) => item.serialize(writer));
            if (this.finishProgress)
                writer.writeUint32(5, this.finishProgress);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActivityTask {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new ActivityTask();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.finish = reader.readInt32();
                        break;
                    case 3:
                        message.progress = reader.readUint32();
                        break;
                    case 4:
                        reader.readMessage(message.rewards, () => pb_1.Message.addToRepeatedWrapperField(message, 4, common.Item.deserialize(reader), common.Item));
                        break;
                    case 5:
                        message.finishProgress = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class GoldenDragon extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [2, 3], null);
        }
        get activityId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set activityId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get tasks(): ActivityTask[] {
            return pb_1.Message.getRepeatedWrapperField(this, ActivityTask, 2) as ActivityTask[];
        }
        set tasks(value: ActivityTask[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get rewardIds(): number[] {
            return pb_1.Message.getField(this, 3) as number[];
        }
        set rewardIds(value: number[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get cloudNum(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set cloudNum(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                activityId: this.activityId,
                tasks: this.tasks,
                rewardIds: this.rewardIds,
                cloudNum: this.cloudNum
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.activityId)
                writer.writeInt32(1, this.activityId);
            if (this.tasks)
                writer.writeRepeatedMessage(2, this.tasks, (item: ActivityTask) => item.serialize(writer));
            if (this.rewardIds)
                writer.writeRepeatedInt32(3, this.rewardIds);
            if (this.cloudNum)
                writer.writeUint32(4, this.cloudNum);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GoldenDragon {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new GoldenDragon();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.activityId = reader.readInt32();
                        break;
                    case 2:
                        reader.readMessage(message.tasks, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ActivityTask.deserialize(reader), ActivityTask));
                        break;
                    case 3:
                        message.rewardIds.push(reader.readInt32());
                        break;
                    case 4:
                        message.cloudNum = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_ActivityReward extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [6], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get activityId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set activityId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get taskId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set taskId(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get indexes(): number[] {
            return pb_1.Message.getField(this, 6) as number[];
        }
        set indexes(value: number[]) {
            pb_1.Message.setField(this, 6, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                activityId: this.activityId,
                taskId: this.taskId,
                indexes: this.indexes
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.activityId)
                writer.writeInt32(4, this.activityId);
            if (this.taskId)
                writer.writeInt32(5, this.taskId);
            if (this.indexes)
                writer.writeRepeatedUint32(6, this.indexes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_ActivityReward {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_ActivityReward();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.activityId = reader.readInt32();
                        break;
                    case 5:
                        message.taskId = reader.readInt32();
                        break;
                    case 6:
                        message.indexes.push(reader.readUint32());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_ActivityId extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get activityIds(): number[] {
            return pb_1.Message.getField(this, 4) as number[];
        }
        set activityIds(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                activityIds: this.activityIds
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.activityIds)
                writer.writeRepeatedInt32(4, this.activityIds);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_ActivityId {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_ActivityId();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.activityIds.push(reader.readInt32());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_Activity extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get act(): Activity | undefined {
            return pb_1.Message.getWrapperField(this, Activity, 4) as Activity | undefined;
        }
        set act(value: Activity) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                act: this.act
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.act)
                writer.writeMessage(4, this.act, (item: Activity) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_Activity {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_Activity();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.act, () => message.act = Activity.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_ActivityId extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get activityIds(): number[] {
            return pb_1.Message.getField(this, 4) as number[];
        }
        set activityIds(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                activityIds: this.activityIds
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.activityIds)
                writer.writeRepeatedInt32(4, this.activityIds);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_ActivityId {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_ActivityId();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.activityIds.push(reader.readInt32());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class TotalLogin extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [2], null);
        }
        get loginDays(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set loginDays(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get takeRewards(): number[] {
            return pb_1.Message.getField(this, 2) as number[];
        }
        set takeRewards(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        toObject() {
            return {
                loginDays: this.loginDays,
                takeRewards: this.takeRewards
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.loginDays)
                writer.writeUint32(1, this.loginDays);
            if (this.takeRewards)
                writer.writeRepeatedInt32(2, this.takeRewards);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TotalLogin {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new TotalLogin();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.loginDays = reader.readUint32();
                        break;
                    case 2:
                        message.takeRewards.push(reader.readInt32());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_TotalLoginTakeReward extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [5], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get day(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set day(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get selectIndexes(): number[] {
            return pb_1.Message.getField(this, 5) as number[];
        }
        set selectIndexes(value: number[]) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                day: this.day,
                selectIndexes: this.selectIndexes
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.day)
                writer.writeInt32(4, this.day);
            if (this.selectIndexes)
                writer.writeRepeatedUint32(5, this.selectIndexes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_TotalLoginTakeReward {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_TotalLoginTakeReward();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.day = reader.readInt32();
                        break;
                    case 5:
                        message.selectIndexes.push(reader.readUint32());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_LevelGift extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [5], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get level(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set level(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get selectIndexes(): number[] {
            return pb_1.Message.getField(this, 5) as number[];
        }
        set selectIndexes(value: number[]) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                level: this.level,
                selectIndexes: this.selectIndexes
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.level)
                writer.writeUint32(4, this.level);
            if (this.selectIndexes)
                writer.writeRepeatedUint32(5, this.selectIndexes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_LevelGift {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_LevelGift();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.level = reader.readUint32();
                        break;
                    case 5:
                        message.selectIndexes.push(reader.readUint32());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_GoldenDragonFinalReward extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get id(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                id: this.id
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.id)
                writer.writeInt32(4, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_GoldenDragonFinalReward {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_GoldenDragonFinalReward();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class Task extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [3, 4, 5, 6, 10, 11, 15, 16, 17], null);
        }
        get growScore(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set growScore(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get activeScore(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set activeScore(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get growTask(): common.TaskCell[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.TaskCell, 3) as common.TaskCell[];
        }
        set growTask(value: common.TaskCell[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get dailyTask(): common.TaskCell[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.TaskCell, 4) as common.TaskCell[];
        }
        set dailyTask(value: common.TaskCell[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get finishGrowTask(): number[] {
            return pb_1.Message.getField(this, 5) as number[];
        }
        set finishGrowTask(value: number[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get finishDailyTask(): number[] {
            return pb_1.Message.getField(this, 6) as number[];
        }
        set finishDailyTask(value: number[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get growReward(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 7, undefined) as number | undefined;
        }
        set growReward(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get weekScore(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 9, undefined) as number | undefined;
        }
        set weekScore(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get weekRewardIds(): number[] {
            return pb_1.Message.getField(this, 10) as number[];
        }
        set weekRewardIds(value: number[]) {
            pb_1.Message.setField(this, 10, value);
        }
        get dailyReward(): number[] {
            return pb_1.Message.getField(this, 11) as number[];
        }
        set dailyReward(value: number[]) {
            pb_1.Message.setField(this, 11, value);
        }
        get worldTask(): common.TaskCell[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.TaskCell, 15) as common.TaskCell[];
        }
        set worldTask(value: common.TaskCell[]) {
            pb_1.Message.setRepeatedWrapperField(this, 15, value);
        }
        get finishWorldTask(): number[] {
            return pb_1.Message.getField(this, 16) as number[];
        }
        set finishWorldTask(value: number[]) {
            pb_1.Message.setField(this, 16, value);
        }
        get targetChapter(): common.MissionTargetChapter[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.MissionTargetChapter, 17) as common.MissionTargetChapter[];
        }
        set targetChapter(value: common.MissionTargetChapter[]) {
            pb_1.Message.setRepeatedWrapperField(this, 17, value);
        }
        toObject() {
            return {
                growScore: this.growScore,
                activeScore: this.activeScore,
                growTask: this.growTask,
                dailyTask: this.dailyTask,
                finishGrowTask: this.finishGrowTask,
                finishDailyTask: this.finishDailyTask,
                growReward: this.growReward,
                weekScore: this.weekScore,
                weekRewardIds: this.weekRewardIds,
                dailyReward: this.dailyReward,
                worldTask: this.worldTask,
                finishWorldTask: this.finishWorldTask,
                targetChapter: this.targetChapter
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.growScore)
                writer.writeInt32(1, this.growScore);
            if (this.activeScore)
                writer.writeInt32(2, this.activeScore);
            if (this.growTask)
                writer.writeRepeatedMessage(3, this.growTask, (item: common.TaskCell) => item.serialize(writer));
            if (this.dailyTask)
                writer.writeRepeatedMessage(4, this.dailyTask, (item: common.TaskCell) => item.serialize(writer));
            if (this.finishGrowTask)
                writer.writeRepeatedInt32(5, this.finishGrowTask);
            if (this.finishDailyTask)
                writer.writeRepeatedInt32(6, this.finishDailyTask);
            if (this.growReward)
                writer.writeInt32(7, this.growReward);
            if (this.weekScore)
                writer.writeInt32(9, this.weekScore);
            if (this.weekRewardIds)
                writer.writeRepeatedInt32(10, this.weekRewardIds);
            if (this.dailyReward)
                writer.writeRepeatedInt32(11, this.dailyReward);
            if (this.worldTask)
                writer.writeRepeatedMessage(15, this.worldTask, (item: common.TaskCell) => item.serialize(writer));
            if (this.finishWorldTask)
                writer.writeRepeatedInt32(16, this.finishWorldTask);
            if (this.targetChapter)
                writer.writeRepeatedMessage(17, this.targetChapter, (item: common.MissionTargetChapter) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Task {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new Task();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.growScore = reader.readInt32();
                        break;
                    case 2:
                        message.activeScore = reader.readInt32();
                        break;
                    case 3:
                        reader.readMessage(message.growTask, () => pb_1.Message.addToRepeatedWrapperField(message, 3, common.TaskCell.deserialize(reader), common.TaskCell));
                        break;
                    case 4:
                        reader.readMessage(message.dailyTask, () => pb_1.Message.addToRepeatedWrapperField(message, 4, common.TaskCell.deserialize(reader), common.TaskCell));
                        break;
                    case 5:
                        message.finishGrowTask.push(reader.readInt32());
                        break;
                    case 6:
                        message.finishDailyTask.push(reader.readInt32());
                        break;
                    case 7:
                        message.growReward = reader.readInt32();
                        break;
                    case 9:
                        message.weekScore = reader.readInt32();
                        break;
                    case 10:
                        message.weekRewardIds.push(reader.readInt32());
                        break;
                    case 11:
                        message.dailyReward.push(reader.readInt32());
                        break;
                    case 15:
                        reader.readMessage(message.worldTask, () => pb_1.Message.addToRepeatedWrapperField(message, 15, common.TaskCell.deserialize(reader), common.TaskCell));
                        break;
                    case 16:
                        message.finishWorldTask.push(reader.readInt32());
                        break;
                    case 17:
                        reader.readMessage(message.targetChapter, () => pb_1.Message.addToRepeatedWrapperField(message, 17, common.MissionTargetChapter.deserialize(reader), common.MissionTargetChapter));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_Task extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get taskId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set taskId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                taskId: this.taskId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.taskId)
                writer.writeInt32(4, this.taskId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_Task {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_Task();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.taskId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_DailyReward extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get rewardId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set rewardId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                rewardId: this.rewardId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.rewardId)
                writer.writeInt32(4, this.rewardId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_DailyReward {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_DailyReward();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.rewardId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_TaskWeekReward extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get rewardId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set rewardId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                rewardId: this.rewardId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.rewardId)
                writer.writeInt32(4, this.rewardId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_TaskWeekReward {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_TaskWeekReward();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.rewardId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SlayBaseData extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get leftResetTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set leftResetTimes(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get level(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set level(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get credit(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as number | undefined;
        }
        set credit(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get round(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set round(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get over(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as boolean | undefined;
        }
        set over(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                leftResetTimes: this.leftResetTimes,
                level: this.level,
                credit: this.credit,
                round: this.round,
                over: this.over
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.leftResetTimes)
                writer.writeInt32(1, this.leftResetTimes);
            if (this.level)
                writer.writeInt32(2, this.level);
            if (this.credit)
                writer.writeInt32(3, this.credit);
            if (this.round)
                writer.writeInt32(4, this.round);
            if (this.over)
                writer.writeBool(5, this.over);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SlayBaseData {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SlayBaseData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.leftResetTimes = reader.readInt32();
                        break;
                    case 2:
                        message.level = reader.readInt32();
                        break;
                    case 3:
                        message.credit = reader.readInt32();
                        break;
                    case 4:
                        message.round = reader.readInt32();
                        break;
                    case 5:
                        message.over = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SlayCityCallArmy extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get cityId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set cityId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get callArmyCount(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set callArmyCount(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get levelUpArmyCount(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as number | undefined;
        }
        set levelUpArmyCount(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        toObject() {
            return {
                cityId: this.cityId,
                callArmyCount: this.callArmyCount,
                levelUpArmyCount: this.levelUpArmyCount
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.cityId)
                writer.writeInt32(1, this.cityId);
            if (this.callArmyCount)
                writer.writeInt32(2, this.callArmyCount);
            if (this.levelUpArmyCount)
                writer.writeInt32(3, this.levelUpArmyCount);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SlayCityCallArmy {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SlayCityCallArmy();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.cityId = reader.readInt32();
                        break;
                    case 2:
                        message.callArmyCount = reader.readInt32();
                        break;
                    case 3:
                        message.levelUpArmyCount = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SlayAction extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [3], null);
        }
        get actionType(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set actionType(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get attack(): common.SlayAttack | undefined {
            return pb_1.Message.getWrapperField(this, common.SlayAttack, 2) as common.SlayAttack | undefined;
        }
        set attack(value: common.SlayAttack) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get callArmyCities(): SlayCityCallArmy[] {
            return pb_1.Message.getRepeatedWrapperField(this, SlayCityCallArmy, 3) as SlayCityCallArmy[];
        }
        set callArmyCities(value: SlayCityCallArmy[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get powerId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set powerId(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                actionType: this.actionType,
                attack: this.attack,
                callArmyCities: this.callArmyCities,
                powerId: this.powerId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.actionType)
                writer.writeInt32(1, this.actionType);
            if (this.attack)
                writer.writeMessage(2, this.attack, (item: common.SlayAttack) => item.serialize(writer));
            if (this.callArmyCities)
                writer.writeRepeatedMessage(3, this.callArmyCities, (item: SlayCityCallArmy) => item.serialize(writer));
            if (this.powerId)
                writer.writeInt32(5, this.powerId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SlayAction {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SlayAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.actionType = reader.readInt32();
                        break;
                    case 2:
                        reader.readMessage(message.attack, () => message.attack = common.SlayAttack.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.callArmyCities, () => pb_1.Message.addToRepeatedWrapperField(message, 3, SlayCityCallArmy.deserialize(reader), SlayCityCallArmy));
                        break;
                    case 5:
                        message.powerId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class Slay extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [5, 6, 9, 10, 13], null);
        }
        get baseData(): SlayBaseData | undefined {
            return pb_1.Message.getWrapperField(this, SlayBaseData, 1) as SlayBaseData | undefined;
        }
        set baseData(value: SlayBaseData) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get cities(): common.SlayCity[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.SlayCity, 5) as common.SlayCity[];
        }
        set cities(value: common.SlayCity[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get powers(): common.SlayPower[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.SlayPower, 6) as common.SlayPower[];
        }
        set powers(value: common.SlayPower[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get action(): SlayAction | undefined {
            return pb_1.Message.getWrapperField(this, SlayAction, 7) as SlayAction | undefined;
        }
        set action(value: SlayAction) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get playerCommanders(): common.SlayPlayerCommander[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.SlayPlayerCommander, 9) as common.SlayPlayerCommander[];
        }
        set playerCommanders(value: common.SlayPlayerCommander[]) {
            pb_1.Message.setRepeatedWrapperField(this, 9, value);
        }
        get selectBags(): common.SlaySilkBuy[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.SlaySilkBuy, 10) as common.SlaySilkBuy[];
        }
        set selectBags(value: common.SlaySilkBuy[]) {
            pb_1.Message.setRepeatedWrapperField(this, 10, value);
        }
        get silkBag(): common.SilkBag | undefined {
            return pb_1.Message.getWrapperField(this, common.SilkBag, 11) as common.SilkBag | undefined;
        }
        set silkBag(value: common.SilkBag) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get event(): common.SlayEvent | undefined {
            return pb_1.Message.getWrapperField(this, common.SlayEvent, 12) as common.SlayEvent | undefined;
        }
        set event(value: common.SlayEvent) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get usedFormation(): number[] {
            return pb_1.Message.getField(this, 13) as number[];
        }
        set usedFormation(value: number[]) {
            pb_1.Message.setField(this, 13, value);
        }
        toObject() {
            return {
                baseData: this.baseData,
                cities: this.cities,
                powers: this.powers,
                action: this.action,
                playerCommanders: this.playerCommanders,
                selectBags: this.selectBags,
                silkBag: this.silkBag,
                event: this.event,
                usedFormation: this.usedFormation
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.baseData)
                writer.writeMessage(1, this.baseData, (item: SlayBaseData) => item.serialize(writer));
            if (this.cities)
                writer.writeRepeatedMessage(5, this.cities, (item: common.SlayCity) => item.serialize(writer));
            if (this.powers)
                writer.writeRepeatedMessage(6, this.powers, (item: common.SlayPower) => item.serialize(writer));
            if (this.action)
                writer.writeMessage(7, this.action, (item: SlayAction) => item.serialize(writer));
            if (this.playerCommanders)
                writer.writeRepeatedMessage(9, this.playerCommanders, (item: common.SlayPlayerCommander) => item.serialize(writer));
            if (this.selectBags)
                writer.writeRepeatedMessage(10, this.selectBags, (item: common.SlaySilkBuy) => item.serialize(writer));
            if (this.silkBag)
                writer.writeMessage(11, this.silkBag, (item: common.SilkBag) => item.serialize(writer));
            if (this.event)
                writer.writeMessage(12, this.event, (item: common.SlayEvent) => item.serialize(writer));
            if (this.usedFormation)
                writer.writeRepeatedInt32(13, this.usedFormation);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Slay {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new Slay();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.baseData, () => message.baseData = SlayBaseData.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.cities, () => pb_1.Message.addToRepeatedWrapperField(message, 5, common.SlayCity.deserialize(reader), common.SlayCity));
                        break;
                    case 6:
                        reader.readMessage(message.powers, () => pb_1.Message.addToRepeatedWrapperField(message, 6, common.SlayPower.deserialize(reader), common.SlayPower));
                        break;
                    case 7:
                        reader.readMessage(message.action, () => message.action = SlayAction.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.playerCommanders, () => pb_1.Message.addToRepeatedWrapperField(message, 9, common.SlayPlayerCommander.deserialize(reader), common.SlayPlayerCommander));
                        break;
                    case 10:
                        reader.readMessage(message.selectBags, () => pb_1.Message.addToRepeatedWrapperField(message, 10, common.SlaySilkBuy.deserialize(reader), common.SlaySilkBuy));
                        break;
                    case 11:
                        reader.readMessage(message.silkBag, () => message.silkBag = common.SilkBag.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.event, () => message.event = common.SlayEvent.deserialize(reader));
                        break;
                    case 13:
                        message.usedFormation.push(reader.readInt32());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_ReqSlayInfo extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get slay(): Slay | undefined {
            return pb_1.Message.getWrapperField(this, Slay, 4) as Slay | undefined;
        }
        set slay(value: Slay) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                slay: this.slay
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.slay)
                writer.writeMessage(4, this.slay, (item: Slay) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_ReqSlayInfo {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_ReqSlayInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.slay, () => message.slay = Slay.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_ReqSlayBaseData extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get baseData(): SlayBaseData | undefined {
            return pb_1.Message.getWrapperField(this, SlayBaseData, 4) as SlayBaseData | undefined;
        }
        set baseData(value: SlayBaseData) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                baseData: this.baseData
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.baseData)
                writer.writeMessage(4, this.baseData, (item: SlayBaseData) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_ReqSlayBaseData {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_ReqSlayBaseData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.baseData, () => message.baseData = SlayBaseData.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_HealCommander extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get commanderId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set commanderId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                commanderId: this.commanderId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.commanderId)
                writer.writeInt32(4, this.commanderId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_HealCommander {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_HealCommander();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.commanderId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_FightReport extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get fightReport(): common.SlayRoundReport[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.SlayRoundReport, 4) as common.SlayRoundReport[];
        }
        set fightReport(value: common.SlayRoundReport[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                fightReport: this.fightReport
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.fightReport)
                writer.writeRepeatedMessage(4, this.fightReport, (item: common.SlayRoundReport) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_FightReport {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_FightReport();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.fightReport, () => pb_1.Message.addToRepeatedWrapperField(message, 4, common.SlayRoundReport.deserialize(reader), common.SlayRoundReport));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_SlayBeginFight extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get cityId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set cityId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get playerAttack(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as boolean | undefined;
        }
        set playerAttack(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get silkItemId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as number | undefined;
        }
        set silkItemId(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get formationType(): common.FormationType | undefined {
            return pb_1.Message.getFieldWithDefault(this, 7, undefined) as common.FormationType | undefined;
        }
        set formationType(value: common.FormationType) {
            pb_1.Message.setField(this, 7, value);
        }
        get ver(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 200, undefined) as string | undefined;
        }
        set ver(value: string) {
            pb_1.Message.setField(this, 200, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                cityId: this.cityId,
                playerAttack: this.playerAttack,
                silkItemId: this.silkItemId,
                formationType: this.formationType,
                ver: this.ver
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.cityId)
                writer.writeInt32(4, this.cityId);
            if (this.playerAttack)
                writer.writeBool(5, this.playerAttack);
            if (this.silkItemId)
                writer.writeInt32(6, this.silkItemId);
            if (this.formationType)
                writer.writeEnum(7, this.formationType);
            if (this.ver)
                writer.writeString(200, this.ver);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_SlayBeginFight {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_SlayBeginFight();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.cityId = reader.readInt32();
                        break;
                    case 5:
                        message.playerAttack = reader.readBool();
                        break;
                    case 6:
                        message.silkItemId = reader.readInt32();
                        break;
                    case 7:
                        message.formationType = reader.readEnum();
                        break;
                    case 200:
                        message.ver = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_SlayBeginFight extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get battleInfo(): common.BattleStartInfo | undefined {
            return pb_1.Message.getWrapperField(this, common.BattleStartInfo, 4) as common.BattleStartInfo | undefined;
        }
        set battleInfo(value: common.BattleStartInfo) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                battleInfo: this.battleInfo
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.battleInfo)
                writer.writeMessage(4, this.battleInfo, (item: common.BattleStartInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_SlayBeginFight {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_SlayBeginFight();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.battleInfo, () => message.battleInfo = common.BattleStartInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_SlayEndFight extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get battleResult(): common.BattleResultInfo | undefined {
            return pb_1.Message.getWrapperField(this, common.BattleResultInfo, 4) as common.BattleResultInfo | undefined;
        }
        set battleResult(value: common.BattleResultInfo) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get playerAttack(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as boolean | undefined;
        }
        set playerAttack(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                battleResult: this.battleResult,
                playerAttack: this.playerAttack
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.battleResult)
                writer.writeMessage(4, this.battleResult, (item: common.BattleResultInfo) => item.serialize(writer));
            if (this.playerAttack)
                writer.writeBool(5, this.playerAttack);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_SlayEndFight {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_SlayEndFight();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.battleResult, () => message.battleResult = common.BattleResultInfo.deserialize(reader));
                        break;
                    case 5:
                        message.playerAttack = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_SelectSlayBag extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get index(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set index(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                index: this.index
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.index)
                writer.writeUint32(4, this.index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_SelectSlayBag {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_SelectSlayBag();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.index = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_UseSlayBagItem extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get slayBagItemId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set slayBagItemId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get cityId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set cityId(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get city2Id(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as number | undefined;
        }
        set city2Id(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get playerCommanderId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 7, undefined) as number | undefined;
        }
        set playerCommanderId(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                slayBagItemId: this.slayBagItemId,
                cityId: this.cityId,
                city2Id: this.city2Id,
                playerCommanderId: this.playerCommanderId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.slayBagItemId)
                writer.writeInt32(4, this.slayBagItemId);
            if (this.cityId)
                writer.writeInt32(5, this.cityId);
            if (this.city2Id)
                writer.writeInt32(6, this.city2Id);
            if (this.playerCommanderId)
                writer.writeInt32(7, this.playerCommanderId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_UseSlayBagItem {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_UseSlayBagItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.slayBagItemId = reader.readInt32();
                        break;
                    case 5:
                        message.cityId = reader.readInt32();
                        break;
                    case 6:
                        message.city2Id = reader.readInt32();
                        break;
                    case 7:
                        message.playerCommanderId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_SlaySelectEvent extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get eventIndex(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set eventIndex(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                eventIndex: this.eventIndex
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.eventIndex)
                writer.writeInt32(4, this.eventIndex);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_SlaySelectEvent {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_SlaySelectEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.eventIndex = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_SlayCity extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get cityId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set cityId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                cityId: this.cityId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.cityId)
                writer.writeInt32(4, this.cityId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_SlayCity {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_SlayCity();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.cityId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_SlayCityFormation extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [5], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get formation(): common.Formation | undefined {
            return pb_1.Message.getWrapperField(this, common.Formation, 4) as common.Formation | undefined;
        }
        set formation(value: common.Formation) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get slayCommanders(): common.SlayCommander[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.SlayCommander, 5) as common.SlayCommander[];
        }
        set slayCommanders(value: common.SlayCommander[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get counsellor(): common.Counsellor | undefined {
            return pb_1.Message.getWrapperField(this, common.Counsellor, 6) as common.Counsellor | undefined;
        }
        set counsellor(value: common.Counsellor) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get power(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 7, undefined) as number | undefined;
        }
        set power(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                formation: this.formation,
                slayCommanders: this.slayCommanders,
                counsellor: this.counsellor,
                power: this.power
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.formation)
                writer.writeMessage(4, this.formation, (item: common.Formation) => item.serialize(writer));
            if (this.slayCommanders)
                writer.writeRepeatedMessage(5, this.slayCommanders, (item: common.SlayCommander) => item.serialize(writer));
            if (this.counsellor)
                writer.writeMessage(6, this.counsellor, (item: common.Counsellor) => item.serialize(writer));
            if (this.power)
                writer.writeUint32(7, this.power);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_SlayCityFormation {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_SlayCityFormation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.formation, () => message.formation = common.Formation.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.slayCommanders, () => pb_1.Message.addToRepeatedWrapperField(message, 5, common.SlayCommander.deserialize(reader), common.SlayCommander));
                        break;
                    case 6:
                        reader.readMessage(message.counsellor, () => message.counsellor = common.Counsellor.deserialize(reader));
                        break;
                    case 7:
                        message.power = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_DailyBossUnlockLevel extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get bossID(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set bossID(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get diffLevel(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set diffLevel(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                bossID: this.bossID,
                diffLevel: this.diffLevel
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.bossID)
                writer.writeInt32(4, this.bossID);
            if (this.diffLevel)
                writer.writeInt32(5, this.diffLevel);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_DailyBossUnlockLevel {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_DailyBossUnlockLevel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.bossID = reader.readInt32();
                        break;
                    case 5:
                        message.diffLevel = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_DailyBossEnterBattle extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get bossID(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set bossID(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get diffLevel(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set diffLevel(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get battleInfoID(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as number | undefined;
        }
        set battleInfoID(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get ver(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 200, undefined) as string | undefined;
        }
        set ver(value: string) {
            pb_1.Message.setField(this, 200, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                bossID: this.bossID,
                diffLevel: this.diffLevel,
                battleInfoID: this.battleInfoID,
                ver: this.ver
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.bossID)
                writer.writeInt32(4, this.bossID);
            if (this.diffLevel)
                writer.writeInt32(5, this.diffLevel);
            if (this.battleInfoID)
                writer.writeInt32(6, this.battleInfoID);
            if (this.ver)
                writer.writeString(200, this.ver);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_DailyBossEnterBattle {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_DailyBossEnterBattle();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.bossID = reader.readInt32();
                        break;
                    case 5:
                        message.diffLevel = reader.readInt32();
                        break;
                    case 6:
                        message.battleInfoID = reader.readInt32();
                        break;
                    case 200:
                        message.ver = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_DailyBossEnterBattle extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get battleInfo(): common.BattleStartInfo | undefined {
            return pb_1.Message.getWrapperField(this, common.BattleStartInfo, 4) as common.BattleStartInfo | undefined;
        }
        set battleInfo(value: common.BattleStartInfo) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                battleInfo: this.battleInfo
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.battleInfo)
                writer.writeMessage(4, this.battleInfo, (item: common.BattleStartInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_DailyBossEnterBattle {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_DailyBossEnterBattle();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.battleInfo, () => message.battleInfo = common.BattleStartInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_DailyBossEndBattle extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get bossID(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set bossID(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get diffLevel(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set diffLevel(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get battleResult(): common.BattleResultInfo | undefined {
            return pb_1.Message.getWrapperField(this, common.BattleResultInfo, 6) as common.BattleResultInfo | undefined;
        }
        set battleResult(value: common.BattleResultInfo) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                bossID: this.bossID,
                diffLevel: this.diffLevel,
                battleResult: this.battleResult
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.bossID)
                writer.writeInt32(4, this.bossID);
            if (this.diffLevel)
                writer.writeInt32(5, this.diffLevel);
            if (this.battleResult)
                writer.writeMessage(6, this.battleResult, (item: common.BattleResultInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_DailyBossEndBattle {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_DailyBossEndBattle();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.bossID = reader.readInt32();
                        break;
                    case 5:
                        message.diffLevel = reader.readInt32();
                        break;
                    case 6:
                        reader.readMessage(message.battleResult, () => message.battleResult = common.BattleResultInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_DailyBossBattleResult extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get win(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as boolean | undefined;
        }
        set win(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get totalTime(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set totalTime(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get bossLossHpPercent(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as number | undefined;
        }
        set bossLossHpPercent(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                win: this.win,
                totalTime: this.totalTime,
                bossLossHpPercent: this.bossLossHpPercent
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.win)
                writer.writeBool(4, this.win);
            if (this.totalTime)
                writer.writeUint32(5, this.totalTime);
            if (this.bossLossHpPercent)
                writer.writeUint32(6, this.bossLossHpPercent);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_DailyBossBattleResult {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_DailyBossBattleResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.win = reader.readBool();
                        break;
                    case 5:
                        message.totalTime = reader.readUint32();
                        break;
                    case 6:
                        message.bossLossHpPercent = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_TakeDailyBossFirstKillAward extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get bossID(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set bossID(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get takeLevel(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set takeLevel(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                bossID: this.bossID,
                takeLevel: this.takeLevel
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.bossID)
                writer.writeInt32(4, this.bossID);
            if (this.takeLevel)
                writer.writeInt32(5, this.takeLevel);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_TakeDailyBossFirstKillAward {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_TakeDailyBossFirstKillAward();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.bossID = reader.readInt32();
                        break;
                    case 5:
                        message.takeLevel = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_TakeDailyBossFirstKillAward extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_TakeDailyBossFirstKillAward {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_TakeDailyBossFirstKillAward();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_DailyExpTakeDayKillAward extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get awardId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set awardId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                awardId: this.awardId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.awardId)
                writer.writeInt32(4, this.awardId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_DailyExpTakeDayKillAward {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_DailyExpTakeDayKillAward();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.awardId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_DailyExpTakeDayKillAward extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get dailyExpData(): common.DailyExp | undefined {
            return pb_1.Message.getWrapperField(this, common.DailyExp, 4) as common.DailyExp | undefined;
        }
        set dailyExpData(value: common.DailyExp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                dailyExpData: this.dailyExpData
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.dailyExpData)
                writer.writeMessage(4, this.dailyExpData, (item: common.DailyExp) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_DailyExpTakeDayKillAward {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_DailyExpTakeDayKillAward();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.dailyExpData, () => message.dailyExpData = common.DailyExp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_DailyExpSweep extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get dailyExpData(): common.DailyExp | undefined {
            return pb_1.Message.getWrapperField(this, common.DailyExp, 4) as common.DailyExp | undefined;
        }
        set dailyExpData(value: common.DailyExp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                dailyExpData: this.dailyExpData
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.dailyExpData)
                writer.writeMessage(4, this.dailyExpData, (item: common.DailyExp) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_DailyExpSweep {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_DailyExpSweep();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.dailyExpData, () => message.dailyExpData = common.DailyExp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_DailyExpEnterBattle extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ver(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 200, undefined) as string | undefined;
        }
        set ver(value: string) {
            pb_1.Message.setField(this, 200, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                ver: this.ver
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.ver)
                writer.writeString(200, this.ver);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_DailyExpEnterBattle {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_DailyExpEnterBattle();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 200:
                        message.ver = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_DailyExpEnterBattle extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get battleStartInfo(): common.BattleStartInfo | undefined {
            return pb_1.Message.getWrapperField(this, common.BattleStartInfo, 4) as common.BattleStartInfo | undefined;
        }
        set battleStartInfo(value: common.BattleStartInfo) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get ver(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 200, undefined) as string | undefined;
        }
        set ver(value: string) {
            pb_1.Message.setField(this, 200, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                battleStartInfo: this.battleStartInfo,
                ver: this.ver
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.battleStartInfo)
                writer.writeMessage(4, this.battleStartInfo, (item: common.BattleStartInfo) => item.serialize(writer));
            if (this.ver)
                writer.writeString(200, this.ver);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_DailyExpEnterBattle {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_DailyExpEnterBattle();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.battleStartInfo, () => message.battleStartInfo = common.BattleStartInfo.deserialize(reader));
                        break;
                    case 200:
                        message.ver = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class C_DailyExpEndBattle extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get battleResult(): common.BattleResultInfo | undefined {
            return pb_1.Message.getWrapperField(this, common.BattleResultInfo, 4) as common.BattleResultInfo | undefined;
        }
        set battleResult(value: common.BattleResultInfo) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                battleResult: this.battleResult
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.battleResult)
                writer.writeMessage(4, this.battleResult, (item: common.BattleResultInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_DailyExpEndBattle {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new C_DailyExpEndBattle();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.battleResult, () => message.battleResult = common.BattleResultInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class S_DailyExpEndBattle extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get dailyExpData(): common.DailyExp | undefined {
            return pb_1.Message.getWrapperField(this, common.DailyExp, 4) as common.DailyExp | undefined;
        }
        set dailyExpData(value: common.DailyExp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get win(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as boolean | undefined;
        }
        set win(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get battleDailyExp(): common.BattleDailyExp | undefined {
            return pb_1.Message.getWrapperField(this, common.BattleDailyExp, 6) as common.BattleDailyExp | undefined;
        }
        set battleDailyExp(value: common.BattleDailyExp) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                dailyExpData: this.dailyExpData,
                win: this.win,
                battleDailyExp: this.battleDailyExp
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.dailyExpData)
                writer.writeMessage(4, this.dailyExpData, (item: common.DailyExp) => item.serialize(writer));
            if (this.win)
                writer.writeBool(5, this.win);
            if (this.battleDailyExp)
                writer.writeMessage(6, this.battleDailyExp, (item: common.BattleDailyExp) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_DailyExpEndBattle {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new S_DailyExpEndBattle();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.dailyExpData, () => message.dailyExpData = common.DailyExp.deserialize(reader));
                        break;
                    case 5:
                        message.win = reader.readBool();
                        break;
                    case 6:
                        reader.readMessage(message.battleDailyExp, () => message.battleDailyExp = common.BattleDailyExp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_DailyCoinTakeDayKillAward extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get awardId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set awardId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                awardId: this.awardId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.awardId)
                writer.writeInt32(4, this.awardId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_DailyCoinTakeDayKillAward {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_DailyCoinTakeDayKillAward();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.awardId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_DailyCoinTakeDayKillAward extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get dailyCoinData(): common.DailyCoin | undefined {
            return pb_1.Message.getWrapperField(this, common.DailyCoin, 4) as common.DailyCoin | undefined;
        }
        set dailyCoinData(value: common.DailyCoin) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                dailyCoinData: this.dailyCoinData
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.dailyCoinData)
                writer.writeMessage(4, this.dailyCoinData, (item: common.DailyCoin) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_DailyCoinTakeDayKillAward {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_DailyCoinTakeDayKillAward();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.dailyCoinData, () => message.dailyCoinData = common.DailyCoin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_DailyCoinSweep extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get dailyCoinData(): common.DailyCoin | undefined {
            return pb_1.Message.getWrapperField(this, common.DailyCoin, 4) as common.DailyCoin | undefined;
        }
        set dailyCoinData(value: common.DailyCoin) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                dailyCoinData: this.dailyCoinData
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.dailyCoinData)
                writer.writeMessage(4, this.dailyCoinData, (item: common.DailyCoin) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_DailyCoinSweep {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_DailyCoinSweep();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.dailyCoinData, () => message.dailyCoinData = common.DailyCoin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_DailyCoinEnterBattle extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ver(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 200, undefined) as string | undefined;
        }
        set ver(value: string) {
            pb_1.Message.setField(this, 200, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                ver: this.ver
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.ver)
                writer.writeString(200, this.ver);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_DailyCoinEnterBattle {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_DailyCoinEnterBattle();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 200:
                        message.ver = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_DailyCoinEnterBattle extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get battleStartInfo(): common.BattleStartInfo | undefined {
            return pb_1.Message.getWrapperField(this, common.BattleStartInfo, 4) as common.BattleStartInfo | undefined;
        }
        set battleStartInfo(value: common.BattleStartInfo) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                battleStartInfo: this.battleStartInfo
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.battleStartInfo)
                writer.writeMessage(4, this.battleStartInfo, (item: common.BattleStartInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_DailyCoinEnterBattle {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_DailyCoinEnterBattle();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.battleStartInfo, () => message.battleStartInfo = common.BattleStartInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class C_DailyCoinEndBattle extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get battleResult(): common.BattleResultInfo | undefined {
            return pb_1.Message.getWrapperField(this, common.BattleResultInfo, 4) as common.BattleResultInfo | undefined;
        }
        set battleResult(value: common.BattleResultInfo) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                battleResult: this.battleResult
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.battleResult)
                writer.writeMessage(4, this.battleResult, (item: common.BattleResultInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_DailyCoinEndBattle {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new C_DailyCoinEndBattle();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.battleResult, () => message.battleResult = common.BattleResultInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class S_DailyCoinEndBattle extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get dailyCoinData(): common.DailyCoin | undefined {
            return pb_1.Message.getWrapperField(this, common.DailyCoin, 4) as common.DailyCoin | undefined;
        }
        set dailyCoinData(value: common.DailyCoin) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get win(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as boolean | undefined;
        }
        set win(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get battleDailyCoin(): common.BattleDailyCoin | undefined {
            return pb_1.Message.getWrapperField(this, common.BattleDailyCoin, 6) as common.BattleDailyCoin | undefined;
        }
        set battleDailyCoin(value: common.BattleDailyCoin) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                dailyCoinData: this.dailyCoinData,
                win: this.win,
                battleDailyCoin: this.battleDailyCoin
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.dailyCoinData)
                writer.writeMessage(4, this.dailyCoinData, (item: common.DailyCoin) => item.serialize(writer));
            if (this.win)
                writer.writeBool(5, this.win);
            if (this.battleDailyCoin)
                writer.writeMessage(6, this.battleDailyCoin, (item: common.BattleDailyCoin) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_DailyCoinEndBattle {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new S_DailyCoinEndBattle();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.dailyCoinData, () => message.dailyCoinData = common.DailyCoin.deserialize(reader));
                        break;
                    case 5:
                        message.win = reader.readBool();
                        break;
                    case 6:
                        reader.readMessage(message.battleDailyCoin, () => message.battleDailyCoin = common.BattleDailyCoin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class StrMansion extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [1], null);
        }
        get talents(): common.StrTalent[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.StrTalent, 1) as common.StrTalent[];
        }
        set talents(value: common.StrTalent[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get power(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set power(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        toObject() {
            return {
                talents: this.talents,
                power: this.power
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.talents)
                writer.writeRepeatedMessage(1, this.talents, (item: common.StrTalent) => item.serialize(writer));
            if (this.power)
                writer.writeUint32(2, this.power);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StrMansion {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new StrMansion();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.talents, () => pb_1.Message.addToRepeatedWrapperField(message, 1, common.StrTalent.deserialize(reader), common.StrTalent));
                        break;
                    case 2:
                        message.power = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_StrTalentLevelUp extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get talentID(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set talentID(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                talentID: this.talentID
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.talentID)
                writer.writeInt32(4, this.talentID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_StrTalentLevelUp {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_StrTalentLevelUp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.talentID = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_StrTalentLevelUp extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_StrTalentLevelUp {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_StrTalentLevelUp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_StrTalentTabReset extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get tabType(): common.StrMansionTabType | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as common.StrMansionTabType | undefined;
        }
        set tabType(value: common.StrMansionTabType) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                tabType: this.tabType
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.tabType)
                writer.writeEnum(4, this.tabType);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_StrTalentTabReset {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_StrTalentTabReset();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.tabType = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_StrTalentTabReset extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_StrTalentTabReset {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_StrTalentTabReset();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_EnterPeak extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [7, 14], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get versionID(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set versionID(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get seasonEndTime(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as string | undefined;
        }
        set seasonEndTime(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get versionName(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as string | undefined;
        }
        set versionName(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get hotCommander(): number[] {
            return pb_1.Message.getField(this, 7) as number[];
        }
        set hotCommander(value: number[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get hotCounsellor(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 8, undefined) as number | undefined;
        }
        set hotCounsellor(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get lastAccumulatePeakCoin(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 9, undefined) as number | undefined;
        }
        set lastAccumulatePeakCoin(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get nowAccumulatePeakCoinBeginTime(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 10, undefined) as string | undefined;
        }
        set nowAccumulatePeakCoinBeginTime(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get totalBattleWinTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 11, undefined) as number | undefined;
        }
        set totalBattleWinTimes(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get seasonFirstEnter(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 12, undefined) as boolean | undefined;
        }
        set seasonFirstEnter(value: boolean) {
            pb_1.Message.setField(this, 12, value);
        }
        get selfRank(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 13, undefined) as number | undefined;
        }
        set selfRank(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get counsellors(): common.Counsellor[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Counsellor, 14) as common.Counsellor[];
        }
        set counsellors(value: common.Counsellor[]) {
            pb_1.Message.setRepeatedWrapperField(this, 14, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                versionID: this.versionID,
                seasonEndTime: this.seasonEndTime,
                versionName: this.versionName,
                hotCommander: this.hotCommander,
                hotCounsellor: this.hotCounsellor,
                lastAccumulatePeakCoin: this.lastAccumulatePeakCoin,
                nowAccumulatePeakCoinBeginTime: this.nowAccumulatePeakCoinBeginTime,
                totalBattleWinTimes: this.totalBattleWinTimes,
                seasonFirstEnter: this.seasonFirstEnter,
                selfRank: this.selfRank,
                counsellors: this.counsellors
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.versionID)
                writer.writeInt64String(4, this.versionID);
            if (this.seasonEndTime)
                writer.writeInt64String(5, this.seasonEndTime);
            if (this.versionName)
                writer.writeInt64String(6, this.versionName);
            if (this.hotCommander)
                writer.writeRepeatedInt32(7, this.hotCommander);
            if (this.hotCounsellor)
                writer.writeInt32(8, this.hotCounsellor);
            if (this.lastAccumulatePeakCoin)
                writer.writeUint32(9, this.lastAccumulatePeakCoin);
            if (this.nowAccumulatePeakCoinBeginTime)
                writer.writeInt64String(10, this.nowAccumulatePeakCoinBeginTime);
            if (this.totalBattleWinTimes)
                writer.writeInt32(11, this.totalBattleWinTimes);
            if (this.seasonFirstEnter)
                writer.writeBool(12, this.seasonFirstEnter);
            if (this.selfRank)
                writer.writeInt32(13, this.selfRank);
            if (this.counsellors)
                writer.writeRepeatedMessage(14, this.counsellors, (item: common.Counsellor) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_EnterPeak {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_EnterPeak();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.versionID = reader.readInt64String();
                        break;
                    case 5:
                        message.seasonEndTime = reader.readInt64String();
                        break;
                    case 6:
                        message.versionName = reader.readInt64String();
                        break;
                    case 7:
                        message.hotCommander.push(reader.readInt32());
                        break;
                    case 8:
                        message.hotCounsellor = reader.readInt32();
                        break;
                    case 9:
                        message.lastAccumulatePeakCoin = reader.readUint32();
                        break;
                    case 10:
                        message.nowAccumulatePeakCoinBeginTime = reader.readInt64String();
                        break;
                    case 11:
                        message.totalBattleWinTimes = reader.readInt32();
                        break;
                    case 12:
                        message.seasonFirstEnter = reader.readBool();
                        break;
                    case 13:
                        message.selfRank = reader.readInt32();
                        break;
                    case 14:
                        reader.readMessage(message.counsellors, () => pb_1.Message.addToRepeatedWrapperField(message, 14, common.Counsellor.deserialize(reader), common.Counsellor));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_StartMathching extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get client_battle_version(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set client_battle_version(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                client_battle_version: this.client_battle_version
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.client_battle_version)
                writer.writeString(4, this.client_battle_version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_StartMathching {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_StartMathching();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.client_battle_version = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_StartMathching extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get power(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set power(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                power: this.power
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.power)
                writer.writeUint32(4, this.power);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_StartMathching {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_StartMathching();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.power = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_NotifyMatchResult extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [7], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get totalBattleTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set totalBattleTimes(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get leftChallengeTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set leftChallengeTimes(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get mathTime(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as string | undefined;
        }
        set mathTime(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get peakMatchPlayer(): common.PeakMatchPlayer[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.PeakMatchPlayer, 7) as common.PeakMatchPlayer[];
        }
        set peakMatchPlayer(value: common.PeakMatchPlayer[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                totalBattleTimes: this.totalBattleTimes,
                leftChallengeTimes: this.leftChallengeTimes,
                mathTime: this.mathTime,
                peakMatchPlayer: this.peakMatchPlayer
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.totalBattleTimes)
                writer.writeInt32(4, this.totalBattleTimes);
            if (this.leftChallengeTimes)
                writer.writeUint32(5, this.leftChallengeTimes);
            if (this.mathTime)
                writer.writeInt64String(6, this.mathTime);
            if (this.peakMatchPlayer)
                writer.writeRepeatedMessage(7, this.peakMatchPlayer, (item: common.PeakMatchPlayer) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_NotifyMatchResult {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_NotifyMatchResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.totalBattleTimes = reader.readInt32();
                        break;
                    case 5:
                        message.leftChallengeTimes = reader.readUint32();
                        break;
                    case 6:
                        message.mathTime = reader.readInt64String();
                        break;
                    case 7:
                        reader.readMessage(message.peakMatchPlayer, () => pb_1.Message.addToRepeatedWrapperField(message, 7, common.PeakMatchPlayer.deserialize(reader), common.PeakMatchPlayer));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_Ready extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ready(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as boolean | undefined;
        }
        set ready(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                ready: this.ready
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.ready)
                writer.writeBool(4, this.ready);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_Ready {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_Ready();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.ready = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_Ready extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get ready(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as boolean | undefined;
        }
        set ready(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                ready: this.ready
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.ready)
                writer.writeBool(4, this.ready);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_Ready {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_Ready();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.ready = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_NotifyReady extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get uid(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set uid(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get ready(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as boolean | undefined;
        }
        set ready(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                uid: this.uid,
                ready: this.ready
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.uid)
                writer.writeUint64String(4, this.uid);
            if (this.ready)
                writer.writeBool(5, this.ready);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_NotifyReady {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_NotifyReady();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.uid = reader.readUint64String();
                        break;
                    case 5:
                        message.ready = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_NotifyStart extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get address(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get secret(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as string | undefined;
        }
        set secret(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get info(): common.BattleStartInfo | undefined {
            return pb_1.Message.getWrapperField(this, common.BattleStartInfo, 6) as common.BattleStartInfo | undefined;
        }
        set info(value: common.BattleStartInfo) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                address: this.address,
                secret: this.secret,
                info: this.info
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.address)
                writer.writeString(4, this.address);
            if (this.secret)
                writer.writeString(5, this.secret);
            if (this.info)
                writer.writeMessage(6, this.info, (item: common.BattleStartInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_NotifyStart {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_NotifyStart();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.address = reader.readString();
                        break;
                    case 5:
                        message.secret = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.info, () => message.info = common.BattleStartInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_PeakBattleResult extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get peakBattleResult(): common.PeakBattleResult | undefined {
            return pb_1.Message.getWrapperField(this, common.PeakBattleResult, 4) as common.PeakBattleResult | undefined;
        }
        set peakBattleResult(value: common.PeakBattleResult) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                peakBattleResult: this.peakBattleResult
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.peakBattleResult)
                writer.writeMessage(4, this.peakBattleResult, (item: common.PeakBattleResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_PeakBattleResult {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_PeakBattleResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.peakBattleResult, () => message.peakBattleResult = common.PeakBattleResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_PeakRank extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get pageIdx(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set pageIdx(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                pageIdx: this.pageIdx
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.pageIdx)
                writer.writeUint32(4, this.pageIdx);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_PeakRank {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_PeakRank();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.pageIdx = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class PeakRankPlayerInfo extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get uid(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as string | undefined;
        }
        set uid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as string | undefined;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get level(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as number | undefined;
        }
        set level(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get power(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set power(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get guildName(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as string | undefined;
        }
        set guildName(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get avatar(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as number | undefined;
        }
        set avatar(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get avatarFrame(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 7, undefined) as number | undefined;
        }
        set avatarFrame(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get counsellorId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 8, undefined) as number | undefined;
        }
        set counsellorId(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get score(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 9, undefined) as number | undefined;
        }
        set score(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        toObject() {
            return {
                uid: this.uid,
                name: this.name,
                level: this.level,
                power: this.power,
                guildName: this.guildName,
                avatar: this.avatar,
                avatarFrame: this.avatarFrame,
                counsellorId: this.counsellorId,
                score: this.score
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.uid)
                writer.writeUint64String(1, this.uid);
            if (this.name)
                writer.writeString(2, this.name);
            if (this.level)
                writer.writeUint32(3, this.level);
            if (this.power)
                writer.writeUint32(4, this.power);
            if (this.guildName)
                writer.writeString(5, this.guildName);
            if (this.avatar)
                writer.writeInt32(6, this.avatar);
            if (this.avatarFrame)
                writer.writeInt32(7, this.avatarFrame);
            if (this.counsellorId)
                writer.writeInt32(8, this.counsellorId);
            if (this.score)
                writer.writeUint32(9, this.score);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PeakRankPlayerInfo {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new PeakRankPlayerInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uid = reader.readUint64String();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.level = reader.readUint32();
                        break;
                    case 4:
                        message.power = reader.readUint32();
                        break;
                    case 5:
                        message.guildName = reader.readString();
                        break;
                    case 6:
                        message.avatar = reader.readInt32();
                        break;
                    case 7:
                        message.avatarFrame = reader.readInt32();
                        break;
                    case 8:
                        message.counsellorId = reader.readInt32();
                        break;
                    case 9:
                        message.score = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_PeakRank extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [5], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get selfRank(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set selfRank(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get rankList(): PeakRankPlayerInfo[] {
            return pb_1.Message.getRepeatedWrapperField(this, PeakRankPlayerInfo, 5) as PeakRankPlayerInfo[];
        }
        set rankList(value: PeakRankPlayerInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                selfRank: this.selfRank,
                rankList: this.rankList
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.selfRank)
                writer.writeInt32(4, this.selfRank);
            if (this.rankList)
                writer.writeRepeatedMessage(5, this.rankList, (item: PeakRankPlayerInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_PeakRank {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_PeakRank();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.selfRank = reader.readInt32();
                        break;
                    case 5:
                        reader.readMessage(message.rankList, () => pb_1.Message.addToRepeatedWrapperField(message, 5, PeakRankPlayerInfo.deserialize(reader), PeakRankPlayerInfo));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_PeakBattleLog extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get battleLogs(): common.PeakBattleLog[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.PeakBattleLog, 4) as common.PeakBattleLog[];
        }
        set battleLogs(value: common.PeakBattleLog[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                battleLogs: this.battleLogs
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.battleLogs)
                writer.writeRepeatedMessage(4, this.battleLogs, (item: common.PeakBattleLog) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_PeakBattleLog {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_PeakBattleLog();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.battleLogs, () => pb_1.Message.addToRepeatedWrapperField(message, 4, common.PeakBattleLog.deserialize(reader), common.PeakBattleLog));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_BuyPeakChallengeTimes extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get leftChallengeTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set leftChallengeTimes(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get usedChallengeBuyTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set usedChallengeBuyTimes(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                leftChallengeTimes: this.leftChallengeTimes,
                usedChallengeBuyTimes: this.usedChallengeBuyTimes
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.leftChallengeTimes)
                writer.writeUint32(4, this.leftChallengeTimes);
            if (this.usedChallengeBuyTimes)
                writer.writeUint32(5, this.usedChallengeBuyTimes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_BuyPeakChallengeTimes {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_BuyPeakChallengeTimes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.leftChallengeTimes = reader.readUint32();
                        break;
                    case 5:
                        message.usedChallengeBuyTimes = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_PeakCoin extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get lastAccumulatePeakCoin(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set lastAccumulatePeakCoin(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get nowAccumulatePeakCoinBeginTime(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as string | undefined;
        }
        set nowAccumulatePeakCoinBeginTime(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                lastAccumulatePeakCoin: this.lastAccumulatePeakCoin,
                nowAccumulatePeakCoinBeginTime: this.nowAccumulatePeakCoinBeginTime
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.lastAccumulatePeakCoin)
                writer.writeUint32(4, this.lastAccumulatePeakCoin);
            if (this.nowAccumulatePeakCoinBeginTime)
                writer.writeInt64String(5, this.nowAccumulatePeakCoinBeginTime);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_PeakCoin {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_PeakCoin();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.lastAccumulatePeakCoin = reader.readUint32();
                        break;
                    case 5:
                        message.nowAccumulatePeakCoinBeginTime = reader.readInt64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_FormationAction extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get actionId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set actionId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                actionId: this.actionId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.actionId)
                writer.writeInt32(4, this.actionId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_FormationAction {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_FormationAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.actionId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_FormationAction extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get uid(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set uid(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get actionId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set actionId(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                uid: this.uid,
                actionId: this.actionId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.uid)
                writer.writeUint64String(4, this.uid);
            if (this.actionId)
                writer.writeInt32(5, this.actionId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_FormationAction {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_FormationAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.uid = reader.readUint64String();
                        break;
                    case 5:
                        message.actionId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_PeakLastBattleResult extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get battleID(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set battleID(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                battleID: this.battleID
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.battleID)
                writer.writeUint64String(4, this.battleID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_PeakLastBattleResult {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_PeakLastBattleResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.battleID = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_PeakLastBattleResult extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get state(): SC_PeakLastBattleResult.State | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as SC_PeakLastBattleResult.State | undefined;
        }
        set state(value: SC_PeakLastBattleResult.State) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                state: this.state
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.state)
                writer.writeEnum(4, this.state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_PeakLastBattleResult {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_PeakLastBattleResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.state = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_PrivilegeUpAbility extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get abilityId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set abilityId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                abilityId: this.abilityId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.abilityId)
                writer.writeInt32(4, this.abilityId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_PrivilegeUpAbility {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_PrivilegeUpAbility();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.abilityId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_PrivilegeUpAbility extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_PrivilegeUpAbility {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_PrivilegeUpAbility();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_PrivilegeGetWages extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get isPrivilegeWagesGet(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as boolean | undefined;
        }
        set isPrivilegeWagesGet(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                isPrivilegeWagesGet: this.isPrivilegeWagesGet
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.isPrivilegeWagesGet)
                writer.writeBool(4, this.isPrivilegeWagesGet);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_PrivilegeGetWages {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_PrivilegeGetWages();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.isPrivilegeWagesGet = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_GetPrivilegeInfo extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get privilegeData(): common.PrivilegeData | undefined {
            return pb_1.Message.getWrapperField(this, common.PrivilegeData, 4) as common.PrivilegeData | undefined;
        }
        set privilegeData(value: common.PrivilegeData) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                privilegeData: this.privilegeData
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.privilegeData)
                writer.writeMessage(4, this.privilegeData, (item: common.PrivilegeData) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_GetPrivilegeInfo {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_GetPrivilegeInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.privilegeData, () => message.privilegeData = common.PrivilegeData.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_GetPrivilegeShopInfo extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get shop(): common.PrivilegeShopItem[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.PrivilegeShopItem, 4) as common.PrivilegeShopItem[];
        }
        set shop(value: common.PrivilegeShopItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                shop: this.shop
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.shop)
                writer.writeRepeatedMessage(4, this.shop, (item: common.PrivilegeShopItem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_GetPrivilegeShopInfo {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_GetPrivilegeShopInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.shop, () => pb_1.Message.addToRepeatedWrapperField(message, 4, common.PrivilegeShopItem.deserialize(reader), common.PrivilegeShopItem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_PrivilegeBuyBuff extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get buffId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set buffId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                buffId: this.buffId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.buffId)
                writer.writeInt32(4, this.buffId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_PrivilegeBuyBuff {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_PrivilegeBuyBuff();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.buffId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_PrivilegeBuyBuff extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_PrivilegeBuyBuff {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_PrivilegeBuyBuff();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_GetVipInfo extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get vipData(): common.VipData | undefined {
            return pb_1.Message.getWrapperField(this, common.VipData, 4) as common.VipData | undefined;
        }
        set vipData(value: common.VipData) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                vipData: this.vipData
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.vipData)
                writer.writeMessage(4, this.vipData, (item: common.VipData) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_GetVipInfo {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_GetVipInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.vipData, () => message.vipData = common.VipData.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_BuyPrivilageGift extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get giftId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set giftId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                giftId: this.giftId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.giftId)
                writer.writeInt32(4, this.giftId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_BuyPrivilageGift {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_BuyPrivilageGift();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.giftId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_BuyPrivilageGift extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get giftBuyRecord(): number[] {
            return pb_1.Message.getField(this, 4) as number[];
        }
        set giftBuyRecord(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                giftBuyRecord: this.giftBuyRecord
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.giftBuyRecord)
                writer.writeRepeatedInt32(4, this.giftBuyRecord);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_BuyPrivilageGift {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_BuyPrivilageGift();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.giftBuyRecord.push(reader.readInt32());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_HideVip extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get systemIds(): number[] {
            return pb_1.Message.getField(this, 4) as number[];
        }
        set systemIds(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                systemIds: this.systemIds
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.systemIds)
                writer.writeRepeatedInt32(4, this.systemIds);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_HideVip {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_HideVip();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.systemIds.push(reader.readInt32());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_HideVip extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hideVipSystems(): number[] {
            return pb_1.Message.getField(this, 4) as number[];
        }
        set hideVipSystems(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                hideVipSystems: this.hideVipSystems
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.hideVipSystems)
                writer.writeRepeatedInt32(4, this.hideVipSystems);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_HideVip {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_HideVip();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.hideVipSystems.push(reader.readInt32());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class Recharge extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [1], null);
        }
        get firstRecharges(): number[] {
            return pb_1.Message.getField(this, 1) as number[];
        }
        set firstRecharges(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get isWelcomeGiftTaken(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as boolean | undefined;
        }
        set isWelcomeGiftTaken(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get monthRecharge(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as number | undefined;
        }
        set monthRecharge(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get isFirstRechargeFinished(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as boolean | undefined;
        }
        set isFirstRechargeFinished(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get isFirstRechargeGiftTaken(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as boolean | undefined;
        }
        set isFirstRechargeGiftTaken(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get monthCards(): MonthCards | undefined {
            return pb_1.Message.getWrapperField(this, MonthCards, 6) as MonthCards | undefined;
        }
        set monthCards(value: MonthCards) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        toObject() {
            return {
                firstRecharges: this.firstRecharges,
                isWelcomeGiftTaken: this.isWelcomeGiftTaken,
                monthRecharge: this.monthRecharge,
                isFirstRechargeFinished: this.isFirstRechargeFinished,
                isFirstRechargeGiftTaken: this.isFirstRechargeGiftTaken,
                monthCards: this.monthCards
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.firstRecharges)
                writer.writeRepeatedInt32(1, this.firstRecharges);
            if (this.isWelcomeGiftTaken)
                writer.writeBool(2, this.isWelcomeGiftTaken);
            if (this.monthRecharge)
                writer.writeUint32(3, this.monthRecharge);
            if (this.isFirstRechargeFinished)
                writer.writeBool(4, this.isFirstRechargeFinished);
            if (this.isFirstRechargeGiftTaken)
                writer.writeBool(5, this.isFirstRechargeGiftTaken);
            if (this.monthCards)
                writer.writeMessage(6, this.monthCards, (item: MonthCards) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Recharge {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new Recharge();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.firstRecharges.push(reader.readInt32());
                        break;
                    case 2:
                        message.isWelcomeGiftTaken = reader.readBool();
                        break;
                    case 3:
                        message.monthRecharge = reader.readUint32();
                        break;
                    case 4:
                        message.isFirstRechargeFinished = reader.readBool();
                        break;
                    case 5:
                        message.isFirstRechargeGiftTaken = reader.readBool();
                        break;
                    case 6:
                        reader.readMessage(message.monthCards, () => message.monthCards = MonthCards.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class MonthCard extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get id(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get dueTime(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set dueTime(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get lastTakePrizeTime(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as number | undefined;
        }
        set lastTakePrizeTime(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get lastTakePhysicalTime(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set lastTakePhysicalTime(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                id: this.id,
                dueTime: this.dueTime,
                lastTakePrizeTime: this.lastTakePrizeTime,
                lastTakePhysicalTime: this.lastTakePhysicalTime
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id)
                writer.writeInt32(1, this.id);
            if (this.dueTime)
                writer.writeInt64(2, this.dueTime);
            if (this.lastTakePrizeTime)
                writer.writeInt64(3, this.lastTakePrizeTime);
            if (this.lastTakePhysicalTime)
                writer.writeInt64(4, this.lastTakePhysicalTime);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MonthCard {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new MonthCard();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.dueTime = reader.readInt64();
                        break;
                    case 3:
                        message.lastTakePrizeTime = reader.readInt64();
                        break;
                    case 4:
                        message.lastTakePhysicalTime = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class MonthCards extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [1], null);
        }
        get cards(): MonthCard[] {
            return pb_1.Message.getRepeatedWrapperField(this, MonthCard, 1) as MonthCard[];
        }
        set cards(value: MonthCard[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        toObject() {
            return {
                cards: this.cards
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.cards)
                writer.writeRepeatedMessage(1, this.cards, (item: MonthCard) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MonthCards {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new MonthCards();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.cards, () => pb_1.Message.addToRepeatedWrapperField(message, 1, MonthCard.deserialize(reader), MonthCard));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_GetRechargeInfo extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get recharge(): Recharge | undefined {
            return pb_1.Message.getWrapperField(this, Recharge, 4) as Recharge | undefined;
        }
        set recharge(value: Recharge) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                recharge: this.recharge
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.recharge)
                writer.writeMessage(4, this.recharge, (item: Recharge) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_GetRechargeInfo {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_GetRechargeInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.recharge, () => message.recharge = Recharge.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class S_NotifyRechargeResult extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get recharge(): Recharge | undefined {
            return pb_1.Message.getWrapperField(this, Recharge, 4) as Recharge | undefined;
        }
        set recharge(value: Recharge) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                recharge: this.recharge
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.recharge)
                writer.writeMessage(4, this.recharge, (item: Recharge) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_NotifyRechargeResult {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new S_NotifyRechargeResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.recharge, () => message.recharge = Recharge.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_MonthCardTakePrize extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get monthCardId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set monthCardId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                monthCardId: this.monthCardId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.monthCardId)
                writer.writeInt32(4, this.monthCardId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_MonthCardTakePrize {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_MonthCardTakePrize();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.monthCardId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_GetHandBookInfo extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get handbook(): common.HandBook | undefined {
            return pb_1.Message.getWrapperField(this, common.HandBook, 4) as common.HandBook | undefined;
        }
        set handbook(value: common.HandBook) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                handbook: this.handbook
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.handbook)
                writer.writeMessage(4, this.handbook, (item: common.HandBook) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_GetHandBookInfo {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_GetHandBookInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.handbook, () => message.handbook = common.HandBook.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_GetHandBookAward extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get pageId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set pageId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                pageId: this.pageId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.pageId)
                writer.writeInt32(4, this.pageId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_GetHandBookAward {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_GetHandBookAward();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.pageId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_GetHandBookAward extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_GetHandBookAward {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_GetHandBookAward();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class DailyPhysical extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [1, 2], null);
        }
        get takeRecords(): number[] {
            return pb_1.Message.getField(this, 1) as number[];
        }
        set takeRecords(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get fullAttendGifts(): common.Item[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Item, 2) as common.Item[];
        }
        set fullAttendGifts(value: common.Item[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get fullAttendGiftId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as number | undefined;
        }
        set fullAttendGiftId(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        toObject() {
            return {
                takeRecords: this.takeRecords,
                fullAttendGifts: this.fullAttendGifts,
                fullAttendGiftId: this.fullAttendGiftId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.takeRecords)
                writer.writeRepeatedInt32(1, this.takeRecords);
            if (this.fullAttendGifts)
                writer.writeRepeatedMessage(2, this.fullAttendGifts, (item: common.Item) => item.serialize(writer));
            if (this.fullAttendGiftId)
                writer.writeInt32(3, this.fullAttendGiftId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DailyPhysical {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new DailyPhysical();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.takeRecords.push(reader.readInt32());
                        break;
                    case 2:
                        reader.readMessage(message.fullAttendGifts, () => pb_1.Message.addToRepeatedWrapperField(message, 2, common.Item.deserialize(reader), common.Item));
                        break;
                    case 3:
                        message.fullAttendGiftId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_TakeDailyPhysical extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get id(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                id: this.id
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.id)
                writer.writeInt32(4, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_TakeDailyPhysical {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_TakeDailyPhysical();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_TakeDailyPhysical extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get dailyPhysical(): DailyPhysical | undefined {
            return pb_1.Message.getWrapperField(this, DailyPhysical, 4) as DailyPhysical | undefined;
        }
        set dailyPhysical(value: DailyPhysical) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                dailyPhysical: this.dailyPhysical
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.dailyPhysical)
                writer.writeMessage(4, this.dailyPhysical, (item: DailyPhysical) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_TakeDailyPhysical {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_TakeDailyPhysical();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.dailyPhysical, () => message.dailyPhysical = DailyPhysical.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_DailyPhysicalTakeGifts extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_DailyPhysicalTakeGifts {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_DailyPhysicalTakeGifts();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_GetQuestionnaireInfo extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get qinfo(): common.QuestionnaireInfo | undefined {
            return pb_1.Message.getWrapperField(this, common.QuestionnaireInfo, 4) as common.QuestionnaireInfo | undefined;
        }
        set qinfo(value: common.QuestionnaireInfo) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get deletes(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as string | undefined;
        }
        set deletes(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                qinfo: this.qinfo,
                deletes: this.deletes
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.qinfo)
                writer.writeMessage(4, this.qinfo, (item: common.QuestionnaireInfo) => item.serialize(writer));
            if (this.deletes)
                writer.writeUint64String(5, this.deletes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_GetQuestionnaireInfo {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_GetQuestionnaireInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.qinfo, () => message.qinfo = common.QuestionnaireInfo.deserialize(reader));
                        break;
                    case 5:
                        message.deletes = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class S_QuestionnaireInfoComplete extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get id(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                id: this.id
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.id)
                writer.writeUint64String(4, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_QuestionnaireInfoComplete {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new S_QuestionnaireInfoComplete();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.id = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_UseGiftCode extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get giftCode(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set giftCode(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get op_id(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as string | undefined;
        }
        set op_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                giftCode: this.giftCode,
                op_id: this.op_id
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.giftCode)
                writer.writeString(4, this.giftCode);
            if (this.op_id)
                writer.writeUint64String(5, this.op_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_UseGiftCode {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_UseGiftCode();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.giftCode = reader.readString();
                        break;
                    case 5:
                        message.op_id = reader.readUint64String();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_UseGiftCode extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get des(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as string | undefined;
        }
        set des(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                des: this.des
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.des)
                writer.writeString(4, this.des);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_UseGiftCode {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_UseGiftCode();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.des = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class Drama extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [1, 3, 4], null);
        }
        get stages(): common.DramaStage[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.DramaStage, 1) as common.DramaStage[];
        }
        set stages(value: common.DramaStage[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get leftTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set leftTimes(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get ownSkills(): common.Skill[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.Skill, 3) as common.Skill[];
        }
        set ownSkills(value: common.Skill[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get dieCommanders(): number[] {
            return pb_1.Message.getField(this, 4) as number[];
        }
        set dieCommanders(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get maxSweepLevel(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set maxSweepLevel(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get needPieceNum(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as number | undefined;
        }
        set needPieceNum(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get treasurePieceCount(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 7, undefined) as number | undefined;
        }
        set treasurePieceCount(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get treasurePos(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 8, undefined) as number | undefined;
        }
        set treasurePos(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get haveOpenBox(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 9, undefined) as boolean | undefined;
        }
        set haveOpenBox(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        toObject() {
            return {
                stages: this.stages,
                leftTimes: this.leftTimes,
                ownSkills: this.ownSkills,
                dieCommanders: this.dieCommanders,
                maxSweepLevel: this.maxSweepLevel,
                needPieceNum: this.needPieceNum,
                treasurePieceCount: this.treasurePieceCount,
                treasurePos: this.treasurePos,
                haveOpenBox: this.haveOpenBox
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.stages)
                writer.writeRepeatedMessage(1, this.stages, (item: common.DramaStage) => item.serialize(writer));
            if (this.leftTimes)
                writer.writeInt32(2, this.leftTimes);
            if (this.ownSkills)
                writer.writeRepeatedMessage(3, this.ownSkills, (item: common.Skill) => item.serialize(writer));
            if (this.dieCommanders)
                writer.writeRepeatedInt32(4, this.dieCommanders);
            if (this.maxSweepLevel)
                writer.writeUint32(5, this.maxSweepLevel);
            if (this.needPieceNum)
                writer.writeInt32(6, this.needPieceNum);
            if (this.treasurePieceCount)
                writer.writeInt32(7, this.treasurePieceCount);
            if (this.treasurePos)
                writer.writeInt32(8, this.treasurePos);
            if (this.haveOpenBox)
                writer.writeBool(9, this.haveOpenBox);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Drama {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new Drama();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.stages, () => pb_1.Message.addToRepeatedWrapperField(message, 1, common.DramaStage.deserialize(reader), common.DramaStage));
                        break;
                    case 2:
                        message.leftTimes = reader.readInt32();
                        break;
                    case 3:
                        reader.readMessage(message.ownSkills, () => pb_1.Message.addToRepeatedWrapperField(message, 3, common.Skill.deserialize(reader), common.Skill));
                        break;
                    case 4:
                        message.dieCommanders.push(reader.readInt32());
                        break;
                    case 5:
                        message.maxSweepLevel = reader.readUint32();
                        break;
                    case 6:
                        message.needPieceNum = reader.readInt32();
                        break;
                    case 7:
                        message.treasurePieceCount = reader.readInt32();
                        break;
                    case 8:
                        message.treasurePos = reader.readInt32();
                        break;
                    case 9:
                        message.haveOpenBox = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_DramaBeginBattle extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get stageId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set stageId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get ver(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 200, undefined) as string | undefined;
        }
        set ver(value: string) {
            pb_1.Message.setField(this, 200, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                stageId: this.stageId,
                ver: this.ver
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.stageId)
                writer.writeInt32(4, this.stageId);
            if (this.ver)
                writer.writeString(200, this.ver);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_DramaBeginBattle {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_DramaBeginBattle();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.stageId = reader.readInt32();
                        break;
                    case 200:
                        message.ver = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_DramaBeginBattle extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get battleInfo(): common.BattleStartInfo | undefined {
            return pb_1.Message.getWrapperField(this, common.BattleStartInfo, 4) as common.BattleStartInfo | undefined;
        }
        set battleInfo(value: common.BattleStartInfo) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                battleInfo: this.battleInfo
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.battleInfo)
                writer.writeMessage(4, this.battleInfo, (item: common.BattleStartInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_DramaBeginBattle {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_DramaBeginBattle();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.battleInfo, () => message.battleInfo = common.BattleStartInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_DramaEndBattle extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get battleResult(): common.BattleResultInfo | undefined {
            return pb_1.Message.getWrapperField(this, common.BattleResultInfo, 5) as common.BattleResultInfo | undefined;
        }
        set battleResult(value: common.BattleResultInfo) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get stageId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as number | undefined;
        }
        set stageId(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get manualExit(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 7, undefined) as boolean | undefined;
        }
        set manualExit(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                battleResult: this.battleResult,
                stageId: this.stageId,
                manualExit: this.manualExit
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.battleResult)
                writer.writeMessage(5, this.battleResult, (item: common.BattleResultInfo) => item.serialize(writer));
            if (this.stageId)
                writer.writeInt32(6, this.stageId);
            if (this.manualExit)
                writer.writeBool(7, this.manualExit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_DramaEndBattle {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_DramaEndBattle();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.battleResult, () => message.battleResult = common.BattleResultInfo.deserialize(reader));
                        break;
                    case 6:
                        message.stageId = reader.readInt32();
                        break;
                    case 7:
                        message.manualExit = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_DramaReset extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_DramaReset {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_DramaReset();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_DramaReset extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get drama(): Drama | undefined {
            return pb_1.Message.getWrapperField(this, Drama, 4) as Drama | undefined;
        }
        set drama(value: Drama) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                drama: this.drama
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.drama)
                writer.writeMessage(4, this.drama, (item: Drama) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_DramaReset {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_DramaReset();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.drama, () => message.drama = Drama.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_DramaBattleTarget extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get stageId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set stageId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                stageId: this.stageId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.stageId)
                writer.writeInt32(4, this.stageId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_DramaBattleTarget {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_DramaBattleTarget();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.stageId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_DramaBattleTarget extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [5], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get target(): common.BattlePlayerInfo | undefined {
            return pb_1.Message.getWrapperField(this, common.BattlePlayerInfo, 4) as common.BattlePlayerInfo | undefined;
        }
        set target(value: common.BattlePlayerInfo) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get dieCommanders(): common.BattleCommander[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.BattleCommander, 5) as common.BattleCommander[];
        }
        set dieCommanders(value: common.BattleCommander[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                target: this.target,
                dieCommanders: this.dieCommanders
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.target)
                writer.writeMessage(4, this.target, (item: common.BattlePlayerInfo) => item.serialize(writer));
            if (this.dieCommanders)
                writer.writeRepeatedMessage(5, this.dieCommanders, (item: common.BattleCommander) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_DramaBattleTarget {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_DramaBattleTarget();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.target, () => message.target = common.BattlePlayerInfo.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.dieCommanders, () => pb_1.Message.addToRepeatedWrapperField(message, 5, common.BattleCommander.deserialize(reader), common.BattleCommander));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_DramaInfo extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_DramaInfo {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_DramaInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_DramaInfo extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get drama(): Drama | undefined {
            return pb_1.Message.getWrapperField(this, Drama, 4) as Drama | undefined;
        }
        set drama(value: Drama) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                drama: this.drama
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.drama)
                writer.writeMessage(4, this.drama, (item: Drama) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_DramaInfo {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_DramaInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.drama, () => message.drama = Drama.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_DramaSweep extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get stageId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set stageId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                stageId: this.stageId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.stageId)
                writer.writeInt32(4, this.stageId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_DramaSweep {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_DramaSweep();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.stageId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_DramaSweep extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_DramaSweep {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_DramaSweep();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_DramaSelectBuff extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get stageId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set stageId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get buffIndex(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set buffIndex(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get commanderId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 6, undefined) as number | undefined;
        }
        set commanderId(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                stageId: this.stageId,
                buffIndex: this.buffIndex,
                commanderId: this.commanderId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.stageId)
                writer.writeInt32(4, this.stageId);
            if (this.buffIndex)
                writer.writeInt32(5, this.buffIndex);
            if (this.commanderId)
                writer.writeInt32(6, this.commanderId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_DramaSelectBuff {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_DramaSelectBuff();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.stageId = reader.readInt32();
                        break;
                    case 5:
                        message.buffIndex = reader.readInt32();
                        break;
                    case 6:
                        message.commanderId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_DramaSelectBuff extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_DramaSelectBuff {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_DramaSelectBuff();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_DramaOpenBox extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get stageId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set stageId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                stageId: this.stageId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.stageId)
                writer.writeInt32(4, this.stageId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_DramaOpenBox {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_DramaOpenBox();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.stageId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_DramaOpenBox extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_DramaOpenBox {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_DramaOpenBox();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_DramaShopBuy extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get stageId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set stageId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                stageId: this.stageId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.stageId)
                writer.writeInt32(4, this.stageId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_DramaShopBuy {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_DramaShopBuy();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.stageId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_DramaCloseShop extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get stageId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set stageId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                stageId: this.stageId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.stageId)
                writer.writeInt32(4, this.stageId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_DramaCloseShop {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_DramaCloseShop();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.stageId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_DramaShopBuy extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_DramaShopBuy {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_DramaShopBuy();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_DramaTreasure extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_DramaTreasure {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_DramaTreasure();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_DramaTreasure extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_DramaTreasure {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_DramaTreasure();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class Chibi extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [5, 6], null);
        }
        get curStageID(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set curStageID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get curStageStartTime(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as string | undefined;
        }
        set curStageStartTime(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get challengedTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as number | undefined;
        }
        set challengedTimes(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get buyChallengeTimes(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set buyChallengeTimes(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get targetAwardTakenIds(): number[] {
            return pb_1.Message.getField(this, 5) as number[];
        }
        set targetAwardTakenIds(value: number[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get stageInfos(): ChibiStageInfo[] {
            return pb_1.Message.getRepeatedWrapperField(this, ChibiStageInfo, 6) as ChibiStageInfo[];
        }
        set stageInfos(value: ChibiStageInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        toObject() {
            return {
                curStageID: this.curStageID,
                curStageStartTime: this.curStageStartTime,
                challengedTimes: this.challengedTimes,
                buyChallengeTimes: this.buyChallengeTimes,
                targetAwardTakenIds: this.targetAwardTakenIds,
                stageInfos: this.stageInfos
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.curStageID)
                writer.writeInt32(1, this.curStageID);
            if (this.curStageStartTime)
                writer.writeInt64String(2, this.curStageStartTime);
            if (this.challengedTimes)
                writer.writeUint32(3, this.challengedTimes);
            if (this.buyChallengeTimes)
                writer.writeUint32(4, this.buyChallengeTimes);
            if (this.targetAwardTakenIds)
                writer.writeRepeatedInt32(5, this.targetAwardTakenIds);
            if (this.stageInfos)
                writer.writeRepeatedMessage(6, this.stageInfos, (item: ChibiStageInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Chibi {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new Chibi();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.curStageID = reader.readInt32();
                        break;
                    case 2:
                        message.curStageStartTime = reader.readInt64String();
                        break;
                    case 3:
                        message.challengedTimes = reader.readUint32();
                        break;
                    case 4:
                        message.buyChallengeTimes = reader.readUint32();
                        break;
                    case 5:
                        message.targetAwardTakenIds.push(reader.readInt32());
                        break;
                    case 6:
                        reader.readMessage(message.stageInfos, () => pb_1.Message.addToRepeatedWrapperField(message, 6, ChibiStageInfo.deserialize(reader), ChibiStageInfo));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class ChibiStageInfo extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get stageID(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set stageID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get firstName(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as string | undefined;
        }
        set firstName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get finishNum(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as number | undefined;
        }
        set finishNum(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        toObject() {
            return {
                stageID: this.stageID,
                firstName: this.firstName,
                finishNum: this.finishNum
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.stageID)
                writer.writeInt32(1, this.stageID);
            if (this.firstName)
                writer.writeString(2, this.firstName);
            if (this.finishNum)
                writer.writeUint32(3, this.finishNum);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChibiStageInfo {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new ChibiStageInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.stageID = reader.readInt32();
                        break;
                    case 2:
                        message.firstName = reader.readString();
                        break;
                    case 3:
                        message.finishNum = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_ChibiStartStage extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get stageId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set stageId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                stageId: this.stageId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.stageId)
                writer.writeInt32(4, this.stageId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_ChibiStartStage {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_ChibiStartStage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.stageId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_ChibiStartStage extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_ChibiStartStage {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_ChibiStartStage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_ChibiEnterFight extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get stageId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set stageId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get fightIndex(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set fightIndex(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get ver(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 200, undefined) as string | undefined;
        }
        set ver(value: string) {
            pb_1.Message.setField(this, 200, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                stageId: this.stageId,
                fightIndex: this.fightIndex,
                ver: this.ver
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.stageId)
                writer.writeInt32(4, this.stageId);
            if (this.fightIndex)
                writer.writeInt32(5, this.fightIndex);
            if (this.ver)
                writer.writeString(200, this.ver);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_ChibiEnterFight {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_ChibiEnterFight();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.stageId = reader.readInt32();
                        break;
                    case 5:
                        message.fightIndex = reader.readInt32();
                        break;
                    case 200:
                        message.ver = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_ChibiEnterFight extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get battleStartInfo(): common.BattleStartInfo | undefined {
            return pb_1.Message.getWrapperField(this, common.BattleStartInfo, 4) as common.BattleStartInfo | undefined;
        }
        set battleStartInfo(value: common.BattleStartInfo) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                battleStartInfo: this.battleStartInfo
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.battleStartInfo)
                writer.writeMessage(4, this.battleStartInfo, (item: common.BattleStartInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_ChibiEnterFight {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_ChibiEnterFight();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.battleStartInfo, () => message.battleStartInfo = common.BattleStartInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class C_ChibiEndFight extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get stageId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set stageId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get fightIndex(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set fightIndex(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get battleResult(): common.BattleResultInfo | undefined {
            return pb_1.Message.getWrapperField(this, common.BattleResultInfo, 6) as common.BattleResultInfo | undefined;
        }
        set battleResult(value: common.BattleResultInfo) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get manualExit(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 7, undefined) as boolean | undefined;
        }
        set manualExit(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                stageId: this.stageId,
                fightIndex: this.fightIndex,
                battleResult: this.battleResult,
                manualExit: this.manualExit
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.stageId)
                writer.writeInt32(4, this.stageId);
            if (this.fightIndex)
                writer.writeInt32(5, this.fightIndex);
            if (this.battleResult)
                writer.writeMessage(6, this.battleResult, (item: common.BattleResultInfo) => item.serialize(writer));
            if (this.manualExit)
                writer.writeBool(7, this.manualExit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_ChibiEndFight {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new C_ChibiEndFight();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.stageId = reader.readInt32();
                        break;
                    case 5:
                        message.fightIndex = reader.readInt32();
                        break;
                    case 6:
                        reader.readMessage(message.battleResult, () => message.battleResult = common.BattleResultInfo.deserialize(reader));
                        break;
                    case 7:
                        message.manualExit = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class S_ChibiEndFight extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get win(): boolean | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as boolean | undefined;
        }
        set win(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get totalTime(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set totalTime(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                win: this.win,
                totalTime: this.totalTime
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.win)
                writer.writeBool(4, this.win);
            if (this.totalTime)
                writer.writeUint32(5, this.totalTime);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_ChibiEndFight {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new S_ChibiEndFight();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        message.win = reader.readBool();
                        break;
                    case 5:
                        message.totalTime = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_ChibiSweep extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get stageId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set stageId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                stageId: this.stageId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.stageId)
                writer.writeInt32(4, this.stageId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_ChibiSweep {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_ChibiSweep();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.stageId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_ChibiSweep extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_ChibiSweep {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_ChibiSweep();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_ChibiBuyChallengeTime extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_ChibiBuyChallengeTime {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_ChibiBuyChallengeTime();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_ChibiBuyChallengeTime extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_ChibiBuyChallengeTime {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_ChibiBuyChallengeTime();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_ChibiTakeTargetAwards extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get takeId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set takeId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                takeId: this.takeId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.takeId)
                writer.writeInt32(4, this.takeId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_ChibiTakeTargetAwards {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_ChibiTakeTargetAwards();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.takeId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_ChibiTakeTargetAwards extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_ChibiTakeTargetAwards {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_ChibiTakeTargetAwards();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class C_ChibiRankList extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get rankType(): common.ChibiRankType | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as common.ChibiRankType | undefined;
        }
        set rankType(value: common.ChibiRankType) {
            pb_1.Message.setField(this, 4, value);
        }
        get stageId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 5, undefined) as number | undefined;
        }
        set stageId(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                rankType: this.rankType,
                stageId: this.stageId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.rankType)
                writer.writeEnum(4, this.rankType);
            if (this.stageId)
                writer.writeInt32(5, this.stageId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): C_ChibiRankList {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new C_ChibiRankList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.rankType = reader.readEnum();
                        break;
                    case 5:
                        message.stageId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class S_ChibiRankList extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [5], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get myRankPlayer(): RankPlayer | undefined {
            return pb_1.Message.getWrapperField(this, RankPlayer, 4) as RankPlayer | undefined;
        }
        set myRankPlayer(value: RankPlayer) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get ranks(): RankPlayer[] {
            return pb_1.Message.getRepeatedWrapperField(this, RankPlayer, 5) as RankPlayer[];
        }
        set ranks(value: RankPlayer[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get topPlayer(): TopPlayer | undefined {
            return pb_1.Message.getWrapperField(this, TopPlayer, 6) as TopPlayer | undefined;
        }
        set topPlayer(value: TopPlayer) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                myRankPlayer: this.myRankPlayer,
                ranks: this.ranks,
                topPlayer: this.topPlayer
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.myRankPlayer)
                writer.writeMessage(4, this.myRankPlayer, (item: RankPlayer) => item.serialize(writer));
            if (this.ranks)
                writer.writeRepeatedMessage(5, this.ranks, (item: RankPlayer) => item.serialize(writer));
            if (this.topPlayer)
                writer.writeMessage(6, this.topPlayer, (item: TopPlayer) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S_ChibiRankList {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new S_ChibiRankList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.myRankPlayer, () => message.myRankPlayer = RankPlayer.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.ranks, () => pb_1.Message.addToRepeatedWrapperField(message, 5, RankPlayer.deserialize(reader), RankPlayer));
                        break;
                    case 6:
                        reader.readMessage(message.topPlayer, () => message.topPlayer = TopPlayer.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_ChibiReqStageInfo extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get stageId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set stageId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                stageId: this.stageId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.stageId)
                writer.writeInt32(4, this.stageId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_ChibiReqStageInfo {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_ChibiReqStageInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.stageId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_ChibiReqStageInfo extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [4], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get stageInfos(): ChibiStageInfo[] {
            return pb_1.Message.getRepeatedWrapperField(this, ChibiStageInfo, 4) as ChibiStageInfo[];
        }
        set stageInfos(value: ChibiStageInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result,
                stageInfos: this.stageInfos
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (this.stageInfos)
                writer.writeRepeatedMessage(4, this.stageInfos, (item: ChibiStageInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_ChibiReqStageInfo {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_ChibiReqStageInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.stageInfos, () => pb_1.Message.addToRepeatedWrapperField(message, 4, ChibiStageInfo.deserialize(reader), ChibiStageInfo));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_CollectLevelUp extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get collectId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set collectId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                collectId: this.collectId
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.collectId)
                writer.writeInt32(4, this.collectId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_CollectLevelUp {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_CollectLevelUp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.collectId = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_CollectLevelUp extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_CollectLevelUp {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_CollectLevelUp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_CollectPutOn extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [5], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get collectId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set collectId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get posList(): common.CollectPos[] {
            return pb_1.Message.getRepeatedWrapperField(this, common.CollectPos, 5) as common.CollectPos[];
        }
        set posList(value: common.CollectPos[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                collectId: this.collectId,
                posList: this.posList
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.collectId)
                writer.writeInt32(4, this.collectId);
            if (this.posList)
                writer.writeRepeatedMessage(5, this.posList, (item: common.CollectPos) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_CollectPutOn {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_CollectPutOn();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.collectId = reader.readInt32();
                        break;
                    case 5:
                        reader.readMessage(message.posList, () => pb_1.Message.addToRepeatedWrapperField(message, 5, common.CollectPos.deserialize(reader), common.CollectPos));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_CollectPutOn extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_CollectPutOn {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_CollectPutOn();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class CS_CollectPutOff extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [5], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get guide(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as number | undefined;
        }
        set guide(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get trigger(): string | undefined {
            return pb_1.Message.getFieldWithDefault(this, 3, undefined) as string | undefined;
        }
        set trigger(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get collectId(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 4, undefined) as number | undefined;
        }
        set collectId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get posIds(): number[] {
            return pb_1.Message.getField(this, 5) as number[];
        }
        set posIds(value: number[]) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            return {
                sn: this.sn,
                guide: this.guide,
                trigger: this.trigger,
                collectId: this.collectId,
                posIds: this.posIds
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.guide)
                writer.writeInt32(2, this.guide);
            if (this.trigger)
                writer.writeString(3, this.trigger);
            if (this.collectId)
                writer.writeInt32(4, this.collectId);
            if (this.posIds)
                writer.writeRepeatedInt32(5, this.posIds);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CS_CollectPutOff {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new CS_CollectPutOff();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.guide = reader.readInt32();
                        break;
                    case 3:
                        message.trigger = reader.readString();
                        break;
                    case 4:
                        message.collectId = reader.readInt32();
                        break;
                    case 5:
                        message.posIds.push(reader.readInt32());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export class SC_CollectPutOff extends pb_1.Message {
        constructor(data?: any[]) {
            super();
            pb_1.Message.initialize(this, data, 0, -1, [], null);
        }
        get sn(): number | undefined {
            return pb_1.Message.getFieldWithDefault(this, 1, undefined) as number | undefined;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get code(): ret.RET | undefined {
            return pb_1.Message.getFieldWithDefault(this, 2, undefined) as ret.RET | undefined;
        }
        set code(value: ret.RET) {
            pb_1.Message.setField(this, 2, value);
        }
        get result(): RewardsResult | undefined {
            return pb_1.Message.getWrapperField(this, RewardsResult, 3) as RewardsResult | undefined;
        }
        set result(value: RewardsResult) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        toObject() {
            return {
                sn: this.sn,
                code: this.code,
                result: this.result
            };
        }
        serialize(w?: pb_1.BinaryWriter): Uint8Array | undefined {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn)
                writer.writeInt32(1, this.sn);
            if (this.code)
                writer.writeEnum(2, this.code);
            if (this.result)
                writer.writeMessage(3, this.result, (item: RewardsResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SC_CollectPutOff {
            const reader = bytes instanceof Uint8Array ? new pb_1.BinaryReader(bytes) : bytes, message = new SC_CollectPutOff();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readInt32();
                        break;
                    case 2:
                        message.code = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.result, () => message.result = RewardsResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
    }
    export enum ID {
        MSG_NONE = 0,
        MSG_MIN = 10000,
        MSG_MAX = 30000,
        MSG_BEGIN = 11000,
        MSG_END = 20000
    }
    export enum CommanderOp {
        None = 0,
        Levelup = 1,
        LittleStarLevelup = 2,
        BigStarLevelup = 3,
        LeadershipUp = 4
    }
    export enum JoinRequestState {
        reqJoin = 1,
        cancelJoin = 2,
        agreeJoin = 3,
        refuseJoin = 4
    }
    export enum DrawType {
        Normal = 1,
        Diamond = 2
    }
}
